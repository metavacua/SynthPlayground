{
  "targets": {
    "install": {
      "type": "command",
      "command": "pip install -r requirements.txt",
      "description": "Installs Python dependencies from requirements.txt."
    },
    "format": {
      "type": "command",
      "command": "black .",
      "description": "Formats all Python code using the Black code formatter."
    },
    "lint": {
      "type": "command",
      "command": "flake8 .",
      "description": "Lints all Python code using flake8."
    },
    "test": {
      "type": "command",
      "command": "python3 -m unittest discover -v .",
      "description": "Runs all unit tests in the repository."
    },
    "test:protocols": {
      "type": "command",
      "command": "python3 -m unittest discover -v tests/protocols",
      "description": "Runs all protocol tests."
    },
    "docs": {
      "type": "compiler",
      "compiler": "tooling/doc_builder.py",
      "options": {
        "--format": "system"
      },
      "description": "Generates detailed system documentation from docstrings."
    },
    "readme": {
      "type": "compiler",
      "compiler": "tooling/doc_builder.py",
       "options": {
        "--format": "readme"
      },
      "description": "Generates the root README.md file."
    },
    "doc-tooling": {
        "type": "compiler",
        "compiler": "tooling/doc_builder.py",
        "options": {
            "--format": "tooling-readme",
            "--source-dir": "tooling/",
            "--output-file": "tooling/README.md"
        },
        "description": "Generates a README for the tooling directory."
    },
    "pages": {
      "type": "compiler",
      "compiler": "tooling/doc_builder.py",
      "options": {
        "--format": "pages"
      },
      "description": "Generates index.html for GitHub Pages."
    },
    "security": {
      "type": "compiler",
      "output": "SECURITY.md",
      "compiler": "tooling/protocol_compiler.py",
      "sources": [
        "protocols/security/"
      ],
      "options": {
        "--schema-file": "protocols/protocol.schema.json"
      },
      "description": "Compiles security protocols into SECURITY.md."
    },
    "agents": {
      "type": "compiler",
      "compiler": "tooling/protocol_compiler.py",
      "description": "Recursively compiles all AGENTS.md files."
    },
    "knowledge-graph": {
        "type": "compiler",
        "compiler": "tooling/protocol_compiler.py",
        "options": {
            "--knowledge-graph-file": "knowledge_core/protocols.ttl"
        },
        "description": "Generates the knowledge graph from all protocols."
    },
    "knowledge": {
        "type": "compiler",
        "compiler": "tooling/knowledge_compiler.py",
        "sources": ["postmortems/"],
        "description": "Compiles lessons learned from post-mortem reports."
    },
    "audit": {
      "type": "command",
      "command": "python3 tooling/auditor.py all",
      "description": "Runs all unified audits (protocols, plans, docs)."
    },
    "clean": {
        "type": "command",
        "command": "rm -f AGENTS.md README.md SECURITY.md knowledge_core/SYSTEM_DOCUMENTATION.md index.html tooling/README.md",
        "description": "Removes all compiled protocol and documentation artifacts."
    }
  },
  "build_groups": {
    "all": ["docs", "security", "agents", "readme", "pages", "doc-tooling"],
    "quality": ["format", "lint", "test", "test:protocols"]
  }
}