@prefix dcterms: <http://purl.org/dc/terms/> .
@prefix proto: <http://agent-protocol.com/ontology#> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .

proto:Protocol a rdfs:Class ;
    rdfs:label "Protocol" .

proto:Rule a rdfs:Class ;
    rdfs:label "Rule" .

proto:governsTool a rdf:Property .

proto:hasRule a rdf:Property .

<http://agent-protocol.com/protocols/agent-bootstrap-001> a proto:Protocol ;
    rdfs:label "agent-bootstrap-001" ;
    proto:governsTool "read_file" ;
    proto:hasRule <http://agent-protocol.com/rules/agent-bootstrap-001/bootstrap-load-agents-md> ;
    dcterms:description "A foundational protocol that dictates the agent's initial actions upon starting any task." .

<http://agent-protocol.com/protocols/agent-interaction-001> a proto:Protocol ;
    rdfs:label "agent-interaction-001" ;
    proto:governsTool "message_user",
        "set_plan" ;
    proto:hasRule <http://agent-protocol.com/rules/agent-interaction-001/communication-tool-access>,
        <http://agent-protocol.com/rules/agent-interaction-001/planning-tool-access> ;
    dcterms:description "A protocol governing the agent's core interaction and planning tools." .

<http://agent-protocol.com/protocols/agent-shell-001> a proto:Protocol ;
    rdfs:label "agent-shell-001" ;
    proto:governsTool "tooling/agent_shell.py" ;
    proto:hasRule <http://agent-protocol.com/rules/agent-shell-001/shell-is-primary-entry-point> ;
    dcterms:description "A protocol governing the use of the interactive agent shell as the primary entry point for all tasks." .

<http://agent-protocol.com/protocols/aorp-header> a proto:Protocol ;
    rdfs:label "aorp-header" ;
    proto:hasRule <http://agent-protocol.com/rules/aorp-header/aorp-identity>,
        <http://agent-protocol.com/rules/aorp-header/aorp-versioning> ;
    dcterms:description "Defines the identity and versioning of the Advanced Orientation and Research Protocol (AORP)." .

<http://agent-protocol.com/protocols/aura-execution-001> a proto:Protocol ;
    rdfs:label "aura-execution-001" ;
    proto:governsTool "tooling/aura_executor.py" ;
    proto:hasRule <http://agent-protocol.com/rules/aura-execution-001/execute-aura-script> ;
    dcterms:description "A protocol for executing Aura scripts, enabling a more expressive and powerful planning and automation language for the agent." .

<http://agent-protocol.com/protocols/best-practices-001> a proto:Protocol ;
    rdfs:label "best-practices-001" ;
    proto:governsTool "create_file_with_block",
        "delete_file",
        "grep",
        "list_files",
        "overwrite_file_with_block",
        "read_file",
        "replace_with_git_merge_diff" ;
    proto:hasRule <http://agent-protocol.com/rules/best-practices-001/verify-after-write> ;
    dcterms:description "A set of best practices derived from observing successful, data-driven workflow patterns." .

<http://agent-protocol.com/protocols/capability-verification-001> a proto:Protocol ;
    rdfs:label "capability-verification-001" ;
    proto:governsTool "tooling/capability_verifier.py" ;
    proto:hasRule <http://agent-protocol.com/rules/capability-verification-001/verify-capability-acquisition> ;
    dcterms:description "A protocol for using the capability verifier tool to empirically test the agent's monotonic improvement." .

<http://agent-protocol.com/protocols/cfdc-protocol-001> a proto:Protocol ;
    rdfs:label "cfdc-protocol-001" ;
    proto:governsTool "tooling/fdc_cli.py",
        "tooling/master_control.py" ;
    proto:hasRule <http://agent-protocol.com/rules/cfdc-protocol-001/hierarchical-planning-via-call-plan>,
        <http://agent-protocol.com/rules/cfdc-protocol-001/max-recursion-depth> ;
    dcterms:description "Defines the Context-Free Development Cycle (CFDC), a hierarchical planning and execution model." .

<http://agent-protocol.com/protocols/core-directive-001> a proto:Protocol ;
    rdfs:label "core-directive-001" ;
    proto:governsTool "tooling/fdc_cli.py" ;
    proto:hasRule <http://agent-protocol.com/rules/core-directive-001/mandatory-fdc-start> ;
    dcterms:description "The mandatory first action for any new task, ensuring a formal start to the Finite Development Cycle (FDC)." .

<http://agent-protocol.com/protocols/critic-meta-protocol-001> a proto:Protocol ;
    rdfs:label "critic-meta-protocol-001" ;
    proto:hasRule <http://agent-protocol.com/rules/critic-meta-protocol-001/built-in-tools-are-valid>,
        <http://agent-protocol.com/rules/critic-meta-protocol-001/functional-change-definition>,
        <http://agent-protocol.com/rules/critic-meta-protocol-001/protocol-as-source-code> ;
    dcterms:description "A meta-protocol that governs the behavior and evaluation criteria of the Code Review Critic agent." .

<http://agent-protocol.com/protocols/critic-reset-prohibition-001> a proto:Protocol ;
    rdfs:label "critic-reset-prohibition-001" ;
    proto:governsTool "reset_all" ;
    proto:hasRule <http://agent-protocol.com/rules/critic-reset-prohibition-001/critic-no-reset> ;
    dcterms:description "A specific, high-priority protocol that forbids the Code Review Critic agent from using the 'reset_all' tool." .

<http://agent-protocol.com/protocols/csdc-001> a proto:Protocol ;
    rdfs:label "csdc-001" ;
    proto:governsTool "tooling/csdc_cli.py" ;
    proto:hasRule <http://agent-protocol.com/rules/csdc-001/model-a-constraints>,
        <http://agent-protocol.com/rules/csdc-001/model-b-constraints>,
        <http://agent-protocol.com/rules/csdc-001/use-csdc-cli> ;
    dcterms:description "A protocol for the Context-Sensitive Development Cycle (CSDC), which introduces development models based on logical constraints." .

<http://agent-protocol.com/protocols/decidability-constraints-001> a proto:Protocol ;
    rdfs:label "decidability-constraints-001" ;
    proto:governsTool "tooling/fdc_cli.py",
        "tooling/fdc_fsm.json" ;
    proto:hasRule <http://agent-protocol.com/rules/decidability-constraints-001/bounded-recursion>,
        <http://agent-protocol.com/rules/decidability-constraints-001/fsm-adherence>,
        <http://agent-protocol.com/rules/decidability-constraints-001/non-turing-completeness> ;
    dcterms:description "Ensures all development processes are formally decidable and computationally tractable." .

<http://agent-protocol.com/protocols/deep-research-cycle-001> a proto:Protocol ;
    rdfs:label "deep-research-cycle-001" ;
    proto:governsTool "create_file_with_block",
        "google_search",
        "view_text_website" ;
    proto:hasRule <http://agent-protocol.com/rules/deep-research-cycle-001/structured-research-phases> ;
    dcterms:description "A standardized, callable plan for conducting in-depth research on a complex topic." .

<http://agent-protocol.com/protocols/dependency-management-001> a proto:Protocol ;
    rdfs:label "dependency-management-001" ;
    proto:governsTool "run_in_bash_session" ;
    proto:hasRule <http://agent-protocol.com/rules/dependency-management-001/dependency-install-on-start> ;
    dcterms:description "A protocol for ensuring a reliable execution environment through formal dependency management." .

<http://agent-protocol.com/protocols/experimental-prologue-001> a proto:Protocol ;
    rdfs:label "experimental-prologue-001" ;
    proto:governsTool "create_file_with_block" ;
    proto:hasRule <http://agent-protocol.com/rules/experimental-prologue-001/create-prologue-file> ;
    dcterms:description "An experimental protocol to test dynamic rule-following. It mandates a prologue action before file creation." .

<http://agent-protocol.com/protocols/fdc-protocol-001> a proto:Protocol ;
    rdfs:label "fdc-protocol-001" ;
    proto:governsTool "LOGGING_SCHEMA.md",
        "knowledge_core/dependency_graph.json",
        "knowledge_core/symbols.json",
        "message_user",
        "set_plan",
        "tooling/fdc_cli.py",
        "tooling/fdc_fsm.json" ;
    proto:hasRule <http://agent-protocol.com/rules/fdc-protocol-001/fdc-entry-point>,
        <http://agent-protocol.com/rules/fdc-protocol-001/fdc-state-transitions>,
        <http://agent-protocol.com/rules/fdc-protocol-001/phase1-deconstruction>,
        <http://agent-protocol.com/rules/fdc-protocol-001/phase2-planning>,
        <http://agent-protocol.com/rules/fdc-protocol-001/phase3-execution>,
        <http://agent-protocol.com/rules/fdc-protocol-001/phase4-post-mortem> ;
    dcterms:description "Defines the Finite Development Cycle (FDC), a formally defined process for executing a single, coherent task." .

<http://agent-protocol.com/protocols/file-indexing-001> a proto:Protocol ;
    rdfs:label "file-indexing-001" ;
    proto:governsTool "tooling/file_indexer.py" ;
    proto:hasRule <http://agent-protocol.com/rules/file-indexing-001/update-index-before-submit> ;
    dcterms:description "A protocol for maintaining an up-to-date file index to accelerate tool performance." .

<http://agent-protocol.com/protocols/hdl-proving-001> a proto:Protocol ;
    rdfs:label "hdl-proving-001" ;
    proto:governsTool "tooling/hdl_prover.py" ;
    proto:hasRule <http://agent-protocol.com/rules/hdl-proving-001/prove-sequent> ;
    dcterms:description "A protocol for interacting with the Hypersequent-calculus-based logic engine, allowing the agent to perform formal logical proofs." .

<http://agent-protocol.com/protocols/meta-protocol-001> a proto:Protocol ;
    rdfs:label "meta-protocol-001" ;
    proto:governsTool "run_in_bash_session" ;
    proto:hasRule <http://agent-protocol.com/rules/meta-protocol-001/agents-md-self-awareness> ;
    dcterms:description "A meta-protocol governing the agent's awareness and maintenance of its own core protocol files." .

<http://agent-protocol.com/protocols/non-compliance-protocol-001> a proto:Protocol ;
    rdfs:label "non-compliance-protocol-001" ;
    proto:hasRule <http://agent-protocol.com/rules/non-compliance-protocol-001/non-compliance-architectural-deviation>,
        <http://agent-protocol.com/rules/non-compliance-protocol-001/non-compliance-definition>,
        <http://agent-protocol.com/rules/non-compliance-protocol-001/non-compliance-direct-editing>,
        <http://agent-protocol.com/rules/non-compliance-protocol-001/non-compliance-self-awareness-failure>,
        <http://agent-protocol.com/rules/non-compliance-protocol-001/non-compliance-test-procedure> ;
    dcterms:description "A protocol that defines non-compliance with AGENTS.md and specifies corrective actions." .

<http://agent-protocol.com/protocols/orientation-cascade-001> a proto:Protocol ;
    rdfs:label "orientation-cascade-001" ;
    proto:governsTool "google_search",
        "tooling/environmental_probe.py",
        "view_text_website" ;
    proto:hasRule <http://agent-protocol.com/rules/orientation-cascade-001/l1-self-awareness>,
        <http://agent-protocol.com/rules/orientation-cascade-001/l2-repository-sync>,
        <http://agent-protocol.com/rules/orientation-cascade-001/l3-environmental-probing>,
        <http://agent-protocol.com/rules/orientation-cascade-001/l4-deep-research-cycle> ;
    dcterms:description "Defines the mandatory, four-tiered orientation cascade that must be executed at the start of any task to establish a coherent model of the agent's identity, environment, and the world state." .

<http://agent-protocol.com/protocols/plan-registry-001> a proto:Protocol ;
    rdfs:label "plan-registry-001" ;
    proto:governsTool "tooling/fdc_cli.py",
        "tooling/master_control.py",
        "tooling/plan_manager.py" ;
    proto:hasRule <http://agent-protocol.com/rules/plan-registry-001/registry-definition>,
        <http://agent-protocol.com/rules/plan-registry-001/registry-first-resolution>,
        <http://agent-protocol.com/rules/plan-registry-001/registry-management-tool> ;
    dcterms:description "Defines a central registry for discovering and executing hierarchical plans by a logical name." .

<http://agent-protocol.com/protocols/plllu-execution-001> a proto:Protocol ;
    rdfs:label "plllu-execution-001" ;
    proto:governsTool "tooling/plllu_runner.py" ;
    proto:hasRule <http://agent-protocol.com/rules/plllu-execution-001/execute-plllu-script> ;
    dcterms:description "A protocol for executing pLLLU scripts, enabling a more expressive and powerful planning and automation language for the agent." .

<http://agent-protocol.com/protocols/pre-commit-protocol-001> a proto:Protocol ;
    rdfs:label "pre-commit-protocol-001" ;
    proto:governsTool "code_linter",
        "pre_commit_instructions" ;
    proto:hasRule <http://agent-protocol.com/rules/pre-commit-protocol-001/pre-commit-instructions-mandate> ;
    dcterms:description "Defines the mandatory pre-commit checks to ensure code quality, correctness, and readiness for submission." .

<http://agent-protocol.com/protocols/research-fdc-001> a proto:Protocol ;
    rdfs:label "research-fdc-001" ;
    proto:governsTool "tooling/fdc_cli.py",
        "tooling/master_control.py",
        "tooling/research.py",
        "tooling/research_planner.py" ;
    proto:hasRule <http://agent-protocol.com/rules/research-fdc-001/executable-plans>,
        <http://agent-protocol.com/rules/research-fdc-001/l4-invocation>,
        <http://agent-protocol.com/rules/research-fdc-001/specialized-fsm> ;
    dcterms:description "Defines the formal Finite Development Cycle (FDC) for conducting deep research." .

<http://agent-protocol.com/protocols/research-protocol-001> a proto:Protocol ;
    rdfs:label "research-protocol-001" ;
    proto:governsTool "tooling.research.execute_research_protocol",
        "tooling.research_planner.plan_deep_research" ;
    proto:hasRule <http://agent-protocol.com/rules/research-protocol-001/mandate-research-tools> ;
    dcterms:description "A protocol for conducting systematic research using the integrated research toolchain." .

<http://agent-protocol.com/protocols/reset-all-prohibition-001> a proto:Protocol ;
    rdfs:label "reset-all-prohibition-001" ;
    proto:governsTool "reset_all" ;
    proto:hasRule <http://agent-protocol.com/rules/reset-all-prohibition-001/no-reset-all> ;
    dcterms:description "A high-priority protocol that unconditionally forbids the use of the `reset_all` tool." .

<http://agent-protocol.com/protocols/security-header> a proto:Protocol ;
    rdfs:label "security-header" ;
    dcterms:description "Defines the identity and purpose of the Security Protocol document." .

<http://agent-protocol.com/protocols/security-vuln-reporting-001> a proto:Protocol ;
    rdfs:label "security-vuln-reporting-001" ;
    proto:hasRule <http://agent-protocol.com/rules/security-vuln-reporting-001/no-public-disclosure>,
        <http://agent-protocol.com/rules/security-vuln-reporting-001/vuln-reporting-channel> ;
    dcterms:description "Defines the official policy and procedure for reporting security vulnerabilities." .

<http://agent-protocol.com/protocols/self-correction-protocol-001> a proto:Protocol ;
    rdfs:label "self-correction-protocol-001" ;
    proto:governsTool "initiate_memory_recording",
        "tooling/code_suggester.py",
        "tooling/knowledge_compiler.py",
        "tooling/protocol_updater.py",
        "tooling/self_correction_orchestrator.py" ;
    proto:hasRule <http://agent-protocol.com/rules/self-correction-protocol-001/automated-orchestration>,
        <http://agent-protocol.com/rules/self-correction-protocol-001/autonomous-code-suggestion>,
        <http://agent-protocol.com/rules/self-correction-protocol-001/programmatic-rule-refinement>,
        <http://agent-protocol.com/rules/self-correction-protocol-001/programmatic-updates>,
        <http://agent-protocol.com/rules/self-correction-protocol-001/structured-lessons> ;
    dcterms:description "Defines the automated, closed-loop workflow for protocol self-correction." .

<http://agent-protocol.com/protocols/self-modification-001> a proto:Protocol ;
    rdfs:label "self-modification-001" ;
    proto:governsTool "protocols/protocol.schema.json",
        "tooling/compiler.py",
        "tooling/hierarchical_compiler.py",
        "tooling/knowledge_graph_generator.py" ;
    proto:hasRule <http://agent-protocol.com/rules/self-modification-001/rebuild-after-modification>,
        <http://agent-protocol.com/rules/self-modification-001/source-only-modification>,
        <http://agent-protocol.com/rules/self-modification-001/test-driven-protocol-development>,
        <http://agent-protocol.com/rules/self-modification-001/validation-is-mandatory> ;
    dcterms:description "A meta-protocol governing the agent's modification of its own governing protocols." .

<http://agent-protocol.com/protocols/speculative-execution-001> a proto:Protocol ;
    rdfs:label "speculative-execution-001" ;
    proto:governsTool "create_file_with_block",
        "request_user_input",
        "set_plan" ;
    proto:hasRule <http://agent-protocol.com/rules/speculative-execution-001/formal-proposal-required>,
        <http://agent-protocol.com/rules/speculative-execution-001/idle-state-trigger>,
        <http://agent-protocol.com/rules/speculative-execution-001/resource-constraints>,
        <http://agent-protocol.com/rules/speculative-execution-001/speculative-logging>,
        <http://agent-protocol.com/rules/speculative-execution-001/user-review-gate> ;
    dcterms:description "A protocol that governs the agent's ability to initiate and execute self-generated, creative, or exploratory tasks during idle periods." .

<http://agent-protocol.com/protocols/standing-orders-001> a proto:Protocol ;
    rdfs:label "standing-orders-001" ;
    proto:governsTool "google_search",
        "tooling/fdc_cli.py",
        "view_text_website" ;
    proto:hasRule <http://agent-protocol.com/rules/standing-orders-001/aorp-mandate>,
        <http://agent-protocol.com/rules/standing-orders-001/fdc-toolchain-mandate>,
        <http://agent-protocol.com/rules/standing-orders-001/rag-mandate> ;
    dcterms:description "A set of non-negotiable, high-priority mandates that govern the agent's behavior across all tasks." .

<http://agent-protocol.com/protocols/toolchain-review-on-schema-change-001> a proto:Protocol ;
    rdfs:label "toolchain-review-on-schema-change-001" ;
    proto:governsTool "tooling/hierarchical_compiler.py",
        "tooling/protocol_auditor.py",
        "tooling/protocol_compiler.py" ;
    proto:hasRule <http://agent-protocol.com/rules/toolchain-review-on-schema-change-001/toolchain-audit-on-schema-change> ;
    dcterms:description "A meta-protocol to ensure the agent's toolchain remains synchronized with the architecture of its governing protocols." .

<http://agent-protocol.com/protocols/unified-auditor-001> a proto:Protocol ;
    rdfs:label "unified-auditor-001" ;
    proto:governsTool "tooling/auditor.py" ;
    proto:hasRule <http://agent-protocol.com/rules/unified-auditor-001/run-all-audits> ;
    dcterms:description "A protocol for the unified repository auditing tool, which combines multiple health and compliance checks into a single interface." .

<http://agent-protocol.com/protocols/unified-doc-builder-001> a proto:Protocol ;
    rdfs:label "unified-doc-builder-001" ;
    proto:governsTool "tooling/doc_builder.py" ;
    proto:hasRule <http://agent-protocol.com/rules/unified-doc-builder-001/use-doc-builder-for-all-docs> ;
    dcterms:description "A protocol for the unified documentation builder, which generates various documentation artifacts from the repository's sources of truth." .

<http://agent-protocol.com/rules/agent-bootstrap-001/bootstrap-load-agents-md> a proto:Rule ;
    rdfs:label "bootstrap-load-agents-md" ;
    proto:enforcement "This rule is enforced by the agent's core startup logic. The agent must verify the load of AGENTS.md before proceeding to the planning phase." ;
    dcterms:description "Upon initialization for any task, the agent's first and highest-priority action must be to locate, read, and parse the AGENTS.md file in the repository root. This ensures the agent is properly contextualized before any planning or execution begins." .

<http://agent-protocol.com/rules/agent-interaction-001/communication-tool-access> a proto:Rule ;
    rdfs:label "communication-tool-access" ;
    proto:enforcement "The agent's core logic should be designed to use this tool for all user-facing communication." ;
    dcterms:description "The agent is authorized to use the `message_user` tool to communicate with the user, providing updates and asking for clarification. This is essential for a collaborative workflow." .

<http://agent-protocol.com/rules/agent-interaction-001/planning-tool-access> a proto:Rule ;
    rdfs:label "planning-tool-access" ;
    proto:enforcement "The agent's core logic should be designed to use this tool for all planning activities." ;
    dcterms:description "The agent is authorized to use the `set_plan` tool to create and update its execution plan. This is a foundational capability for task execution." .

<http://agent-protocol.com/rules/agent-shell-001/shell-is-primary-entry-point> a proto:Rule ;
    rdfs:label "shell-is-primary-entry-point" ;
    proto:enforcement "This is a procedural rule. The agent's operational framework should only expose the agent_shell.py as the means of starting a new task." ;
    dcterms:description "All agent tasks must be initiated through the `agent_shell.py` script. This script is the designated, API-driven entry point that ensures proper initialization of the MasterControlGraph FSM, centralized logging, and programmatic lifecycle management. Direct execution of other tools or scripts is forbidden for task initiation." .

<http://agent-protocol.com/rules/aorp-header/aorp-identity> a proto:Rule ;
    rdfs:label "aorp-identity" ;
    proto:enforcement "Protocol is identified by its name in documentation and compiled artifacts." ;
    dcterms:description "The governing protocol set is identified as the Advanced Orientation and Research Protocol (AORP)." .

<http://agent-protocol.com/rules/aorp-header/aorp-versioning> a proto:Rule ;
    rdfs:label "aorp-versioning" ;
    proto:enforcement "Build or validation scripts should verify the presence and format of the VERSION file." ;
    dcterms:description "The official protocol version is tracked in the VERSION file in the repository root, following Semantic Versioning (SemVer)." .

<http://agent-protocol.com/rules/aura-execution-001/execute-aura-script> a proto:Rule ;
    rdfs:label "execute-aura-script" ;
    proto:enforcement "The tool is used by invoking it from the command line with the path to the Aura script as an argument." ;
    dcterms:description "The `aura_executor.py` tool should be used to execute .aura script files. This tool provides the bridge between the agent's master control loop and the Aura language interpreter." .

<http://agent-protocol.com/rules/best-practices-001/verify-after-write> a proto:Rule ;
    rdfs:label "verify-after-write" ;
    proto:enforcement "This is a core operational discipline. Future tooling, such as a trace validator, could enforce this by analyzing the execution log against this protocol." ;
    dcterms:description "After every file creation or modification action (`create_file_with_block`, `overwrite_file_with_block`, `replace_with_git_merge_diff`), the agent MUST use a subsequent read-only tool (`read_file`, `list_files`, `grep`) to verify that the action was executed successfully and had the intended effect. A plan step should only be marked as complete after this verification." .

<http://agent-protocol.com/rules/capability-verification-001/verify-capability-acquisition> a proto:Rule ;
    rdfs:label "verify-capability-acquisition" ;
    proto:enforcement "The tool is used by invoking it from the command line with the path to the target test file." ;
    dcterms:description "The `capability_verifier.py` tool should be used to test the agent's ability to acquire a new capability defined by a failing test file. The tool orchestrates the failure, self-correction, and verification process." .

<http://agent-protocol.com/rules/cfdc-protocol-001/hierarchical-planning-via-call-plan> a proto:Rule ;
    rdfs:label "hierarchical-planning-via-call-plan" ;
    proto:enforcement "The plan validator must be able to parse this directive and recursively validate sub-plans. The execution engine must implement a plan execution stack to manage the context of nested calls." ;
    dcterms:description "Plans may execute other plans as sub-routines using the 'call_plan <path_to_plan>' directive. This enables a modular, hierarchical workflow." .

<http://agent-protocol.com/rules/cfdc-protocol-001/max-recursion-depth> a proto:Rule ;
    rdfs:label "max-recursion-depth" ;
    proto:enforcement "The execution engine must check the stack depth before every 'call_plan' execution and terminate with a fatal error if the limit would be exceeded." ;
    dcterms:description "To ensure decidability, the plan execution stack must not exceed a system-wide constant, MAX_RECURSION_DEPTH. This prevents infinite recursion and guarantees all processes will terminate." .

<http://agent-protocol.com/rules/core-directive-001/mandatory-fdc-start> a proto:Rule ;
    rdfs:label "mandatory-fdc-start" ;
    proto:enforcement "This is a hard-coded behavior in the agent's core operational loop and is verified by the FDC toolchain." ;
    dcterms:description "Upon receiving a new task, the agent's first action MUST be to programmatically execute the FDC 'start' command to formally initiate the task and run the AORP orientation cascade." .

<http://agent-protocol.com/rules/critic-meta-protocol-001/built-in-tools-are-valid> a proto:Rule ;
    rdfs:label "built-in-tools-are-valid" ;
    proto:enforcement "The Code Review Critic must not flag a change as 'incomplete' or 'non-functional' solely because the implementation of a built-in tool is not present in the repository." ;
    dcterms:description "The agent's execution environment provides a set of built-in tools (e.g., `read_file`, `delete_file`, `pre_commit_instructions`). The implementation of these tools does not reside within the repository. A protocol change that adds a built-in tool to the `associated_tools` list is a valid and complete functional change." .

<http://agent-protocol.com/rules/critic-meta-protocol-001/functional-change-definition> a proto:Rule ;
    rdfs:label "functional-change-definition" ;
    proto:enforcement "The Code Review Critic's evaluation of 'functionality' must encompass both traditional code and protocol definitions." ;
    dcterms:description "A change is considered 'functional' if it correctly modifies the agent's operational rules or capabilities, as defined by the combination of Python source code and the protocol source files in `protocols/`." .

<http://agent-protocol.com/rules/critic-meta-protocol-001/protocol-as-source-code> a proto:Rule ;
    rdfs:label "protocol-as-source-code" ;
    proto:enforcement "The Code Review Critic must analyze changes in this directory with the same rigor as changes to `.py` files." ;
    dcterms:description "The `protocols/` directory and all its contents (`.md`, `.json` files) MUST be treated as functional source code. Changes to these files directly alter the agent's operational capabilities and governing rules." .

<http://agent-protocol.com/rules/critic-reset-prohibition-001/critic-no-reset> a proto:Rule ;
    rdfs:label "critic-no-reset" ;
    proto:enforcement "This rule is enforced by its inclusion in the compiled AGENTS.md, which serves as the context for the Code Review Critic. The critic must be programmed to parse and adhere to this prohibition." ;
    dcterms:description "The agent role-playing as the 'Code Review Critic' is explicitly forbidden from invoking the 'reset_all' tool under any circumstances. This is a critical safeguard to prevent the loss of work during the review process." .

<http://agent-protocol.com/rules/csdc-001/model-a-constraints> a proto:Rule ;
    rdfs:label "model-a-constraints" ;
    proto:enforcement "Enforced by the `fsm_model_a.json` FSM used by the `csdc_cli.py` tool." ;
    dcterms:description "Model A permits `define_set_of_names` but forbids `define_diagonalization_function`." .

<http://agent-protocol.com/rules/csdc-001/model-b-constraints> a proto:Rule ;
    rdfs:label "model-b-constraints" ;
    proto:enforcement "Enforced by the `fsm_model_b.json` FSM used by the `csdc_cli.py` tool." ;
    dcterms:description "Model B permits `define_diagonalization_function` but forbids `define_set_of_names`." .

<http://agent-protocol.com/rules/csdc-001/use-csdc-cli> a proto:Rule ;
    rdfs:label "use-csdc-cli" ;
    proto:enforcement "The tool is used by invoking it from the command line with the plan file, model, and complexity as arguments." ;
    dcterms:description "The `csdc_cli.py` tool must be used to validate plans under the CSDC. This tool enforces model-specific constraints (A or B) and complexity requirements (P or EXP)." .

<http://agent-protocol.com/rules/decidability-constraints-001/bounded-recursion> a proto:Rule ;
    rdfs:label "bounded-recursion" ;
    proto:enforcement "The `lint` command in `tooling/fdc_cli.py` scans plans for disallowed recursive calls." ;
    dcterms:description "The agent MUST NOT generate plans that involve recursion or self-invocation. A plan cannot trigger another FDC or a sub-plan, with the sole exception of the 'Deep Research Cycle'." .

<http://agent-protocol.com/rules/decidability-constraints-001/fsm-adherence> a proto:Rule ;
    rdfs:label "fsm-adherence" ;
    proto:enforcement "The `lint` command in `tooling/fdc_cli.py` validates the plan against the FSM definition." ;
    dcterms:description "All plans must be valid strings in the language defined by the tooling/fdc_fsm.json Finite State Machine." .

<http://agent-protocol.com/rules/decidability-constraints-001/non-turing-completeness> a proto:Rule ;
    rdfs:label "non-turing-completeness" ;
    proto:enforcement "Enforced by the design of the plan runner and validated by the `lint` command in the FDC toolchain." ;
    dcterms:description "The agent's planning and execution language is, by design, not Turing-complete. This is a fundamental constraint to guarantee that all processes will terminate." .

<http://agent-protocol.com/rules/deep-research-cycle-001/structured-research-phases> a proto:Rule ;
    rdfs:label "structured-research-phases" ;
    proto:enforcement "The plan's structure itself enforces this rule. The `lint` command can be extended to validate the structure of registered research plans." ;
    dcterms:description "The deep research plan MUST follow a structured four-phase process: Scoping, Broad Gathering, Targeted Extraction, and Synthesis." .

<http://agent-protocol.com/rules/dependency-management-001/dependency-install-on-start> a proto:Rule ;
    rdfs:label "dependency-install-on-start" ;
    proto:enforcement "The agent's core startup logic should be designed to execute `pip install -r requirements.txt` as one of its initial actions." ;
    dcterms:description "Upon starting a task, after loading AGENTS.md, the agent MUST install all required Python packages listed in the `requirements.txt` file. This ensures the environment is correctly configured before any other tools are executed." .

<http://agent-protocol.com/rules/experimental-prologue-001/create-prologue-file> a proto:Rule ;
    rdfs:label "create-prologue-file" ;
    proto:enforcement "This is a procedural rule. The agent must verify the existence of 'prologue.txt' before using 'create_file_with_block' or similar tools for other files." ;
    dcterms:description "Before creating any new file as part of a task, the agent MUST first create a file named 'prologue.txt' with the content 'This is a prologue file.' This rule serves as a test of the agent's ability to adapt its behavior to new, dynamically loaded protocols." .

<http://agent-protocol.com/rules/fdc-protocol-001/fdc-entry-point> a proto:Rule ;
    rdfs:label "fdc-entry-point" ;
    proto:enforcement "Enforced by the `start` command in `tooling/fdc_cli.py`." ;
    dcterms:description "The AORP cascade is the mandatory entry point to every FDC." .

<http://agent-protocol.com/rules/fdc-protocol-001/fdc-state-transitions> a proto:Rule ;
    rdfs:label "fdc-state-transitions" ;
    proto:enforcement "Validated by the `lint` command in `tooling/fdc_cli.py`." ;
    dcterms:description "The FDC is a Finite State Machine (FSM) formally defined in `tooling/fdc_fsm.json`. Plans must be valid strings in the language defined by this FSM." .

<http://agent-protocol.com/rules/fdc-protocol-001/phase1-deconstruction> a proto:Rule ;
    rdfs:label "phase1-deconstruction" ;
    proto:enforcement "Procedural step guided by the agent's core logic, using artifacts in `logs/` and `knowledge_core/`." ;
    dcterms:description "Phase 1 (Deconstruction & Contextualization): The agent must ingest the task, query historical logs, identify entities using the symbol map, and analyze impact using the dependency graph." .

<http://agent-protocol.com/rules/fdc-protocol-001/phase2-planning> a proto:Rule ;
    rdfs:label "phase2-planning" ;
    proto:enforcement "The `lint` command in `tooling/fdc_cli.py` is a mandatory pre-flight check." ;
    dcterms:description "Phase 2 (Planning & Self-Correction): The agent must generate a granular plan, lint it using the FDC toolchain, cite evidence for its steps, and perform a critical review." .

<http://agent-protocol.com/rules/fdc-protocol-001/phase3-execution> a proto:Rule ;
    rdfs:label "phase3-execution" ;
    proto:enforcement "Logging is performed by the agent's action execution wrapper." ;
    dcterms:description "Phase 3 (Execution & Structured Logging): The agent must execute the validated plan and log every action according to the `LOGGING_SCHEMA.md`." .

<http://agent-protocol.com/rules/fdc-protocol-001/phase4-post-mortem> a proto:Rule ;
    rdfs:label "phase4-post-mortem" ;
    proto:enforcement "The `close` command in `tooling/fdc_cli.py` initiates this phase." ;
    dcterms:description "Phase 4 (Pre-Submission Post-Mortem): The agent must formally close the task using the `close` command and complete the generated post-mortem report." .

<http://agent-protocol.com/rules/file-indexing-001/update-index-before-submit> a proto:Rule ;
    rdfs:label "update-index-before-submit" ;
    proto:enforcement "This is a procedural rule. The agent's pre-submission checklist should include a step to run 'python tooling/file_indexer.py build'." ;
    dcterms:description "Before submitting any changes that alter the file structure (create, delete, rename), the agent MUST rebuild the repository's file index. This ensures that tools relying on the index, such as the FDC validator, have an accurate view of the filesystem." .

<http://agent-protocol.com/rules/hdl-proving-001/prove-sequent> a proto:Rule ;
    rdfs:label "prove-sequent" ;
    proto:enforcement "The tool is used by invoking it from the command line with the sequent to be proved as an argument." ;
    dcterms:description "The `hdl_prover.py` tool should be used to check the provability of a logical sequent. This tool acts as a wrapper for the underlying Lisp-based prover." .

<http://agent-protocol.com/rules/meta-protocol-001/agents-md-self-awareness> a proto:Rule ;
    rdfs:label "agents-md-self-awareness" ;
    proto:enforcement "The agent should incorporate this check into its standard operating procedure, particularly at the beginning of a task or when unexpected behavior occurs." ;
    dcterms:description "The AGENTS.md file is a build artifact generated from source files in the 'protocols/' directory. Before relying on AGENTS.md, the agent should ensure it is up-to-date by running 'make AGENTS.md'. This ensures the agent is operating with the latest set of protocols." .

<http://agent-protocol.com/rules/non-compliance-protocol-001/non-compliance-architectural-deviation> a proto:Rule ;
    rdfs:label "non-compliance-architectural-deviation" ;
    proto:enforcement "Agent must revert non-compliant changes and re-implement them according to standards." ;
    dcterms:description "Forbids changes that contradict documented architectural patterns or coding conventions." .

<http://agent-protocol.com/rules/non-compliance-protocol-001/non-compliance-definition> a proto:Rule ;
    rdfs:label "non-compliance-definition" ;
    proto:enforcement "This is a definitional rule. Enforcement is achieved through the agent's adherence to the specific non-compliance rules that follow." ;
    dcterms:description "Defines non-compliance as a violation of any rule, convention, or procedure in AGENTS.md or its source protocols." .

<http://agent-protocol.com/rules/non-compliance-protocol-001/non-compliance-direct-editing> a proto:Rule ;
    rdfs:label "non-compliance-direct-editing" ;
    proto:enforcement "Agent must revert direct edits and modify source files, then run the appropriate build command." ;
    dcterms:description "Prohibits the direct editing of build artifacts like AGENTS.md or README.md. Changes must be made to source files, followed by a rebuild." .

<http://agent-protocol.com/rules/non-compliance-protocol-001/non-compliance-self-awareness-failure> a proto:Rule ;
    rdfs:label "non-compliance-self-awareness-failure" ;
    proto:enforcement "Agent should run 'make AGENTS.md' to refresh its protocol knowledge and re-evaluate its plan." ;
    dcterms:description "Requires the agent to maintain an up-to-date understanding of protocols by recompiling AGENTS.md when necessary." .

<http://agent-protocol.com/rules/non-compliance-protocol-001/non-compliance-test-procedure> a proto:Rule ;
    rdfs:label "non-compliance-test-procedure" ;
    proto:enforcement "Agent must halt execution and run the required tests, debugging any failures before proceeding." ;
    dcterms:description "Requires adherence to all documented testing procedures before submitting changes." .

<http://agent-protocol.com/rules/orientation-cascade-001/l1-self-awareness> a proto:Rule ;
    rdfs:label "l1-self-awareness" ;
    proto:enforcement "The `start` command of the FDC toolchain executes this step and fails if the artifact is missing or invalid." ;
    dcterms:description "Level 1 (Self-Awareness): The agent must first establish its own identity and inherent limitations by reading the `knowledge_core/agent_meta.json` artifact." .

<http://agent-protocol.com/rules/orientation-cascade-001/l2-repository-sync> a proto:Rule ;
    rdfs:label "l2-repository-sync" ;
    proto:enforcement "The `start` command of the FDC toolchain executes this step." ;
    dcterms:description "Level 2 (Repository Sync): The agent must understand the current state of the local repository by loading primary artifacts from the `knowledge_core/` directory." .

<http://agent-protocol.com/rules/orientation-cascade-001/l3-environmental-probing> a proto:Rule ;
    rdfs:label "l3-environmental-probing" ;
    proto:enforcement "The `start` command of the FDC toolchain executes this step, utilizing tools like `google_search` and `view_text_website`." ;
    dcterms:description "Level 3 (Environmental Probing & Targeted RAG): The agent must discover the rules and constraints of its operational environment by executing a probe script and using targeted RAG to resolve 'known unknowns'." .

<http://agent-protocol.com/rules/orientation-cascade-001/l4-deep-research-cycle> a proto:Rule ;
    rdfs:label "l4-deep-research-cycle" ;
    proto:enforcement "This is a special case of recursion, explicitly allowed and managed by the FDC toolchain." ;
    dcterms:description "Level 4 (Deep Research Cycle): To investigate 'unknown unknowns', the agent must initiate a formal, self-contained Finite Development Cycle (FDC) of the 'Analysis Modality'." .

<http://agent-protocol.com/rules/plan-registry-001/registry-definition> a proto:Rule ;
    rdfs:label "registry-definition" ;
    proto:enforcement "The file's existence and format can be checked by the validation toolchain." ;
    dcterms:description "A central plan registry MUST exist at 'knowledge_core/plan_registry.json'. It maps logical plan names to their file paths." .

<http://agent-protocol.com/rules/plan-registry-001/registry-first-resolution> a proto:Rule ;
    rdfs:label "registry-first-resolution" ;
    proto:enforcement "This logic must be implemented in both the plan validator (`fdc_cli.py`) and the execution engine (`master_control.py`)." ;
    dcterms:description "The 'call_plan <argument>' directive MUST first attempt to resolve '<argument>' as a logical name in the plan registry. If resolution fails, it MUST fall back to treating '<argument>' as a direct file path for backward compatibility." .

<http://agent-protocol.com/rules/plan-registry-001/registry-management-tool> a proto:Rule ;
    rdfs:label "registry-management-tool" ;
    proto:enforcement "The tool's existence and functionality can be verified via integration tests." ;
    dcterms:description "A dedicated tool (`tooling/plan_manager.py`) MUST be provided for managing the plan registry, with functions to register, deregister, and list plans." .

<http://agent-protocol.com/rules/plllu-execution-001/execute-plllu-script> a proto:Rule ;
    rdfs:label "execute-plllu-script" ;
    proto:enforcement "The tool is used by invoking it from the command line with the path to the pLLLU script as an argument." ;
    dcterms:description "The `plllu_runner.py` tool should be used to execute .plllu script files. This tool provides the bridge between the agent's master control loop and the pLLLU language interpreter." .

<http://agent-protocol.com/rules/pre-commit-protocol-001/pre-commit-instructions-mandate> a proto:Rule ;
    rdfs:label "pre-commit-instructions-mandate" ;
    proto:enforcement "The agent's core logic should invoke this tool as the entry point to the pre-submission phase." ;
    dcterms:description "Before submitting changes, the agent MUST execute the `pre_commit_instructions` tool to receive the required sequence of validation steps (e.g., running tests, requesting code review)." .

<http://agent-protocol.com/rules/research-fdc-001/executable-plans> a proto:Rule ;
    rdfs:label "executable-plans" ;
    proto:enforcement "The output of the research planner must be linted and validated by the `fdc_cli.py` tool using the `research_fsm.json`." ;
    dcterms:description "Research plans must be generated by `tooling/research_planner.py` as valid, executable plans that conform to the `research_fsm.json` definition. They are not just templates but formal, verifiable artifacts." .

<http://agent-protocol.com/rules/research-fdc-001/l4-invocation> a proto:Rule ;
    rdfs:label "l4-invocation" ;
    proto:enforcement "The `master_control.py` orchestrator is responsible for triggering the L4 cycle." ;
    dcterms:description "The L4 Deep Research Cycle is the designated mechanism for resolving complex 'unknown unknowns'. It is invoked by the main orchestrator when a task requires knowledge that cannot be obtained through simple L1-L3 orientation probes." .

<http://agent-protocol.com/rules/research-fdc-001/specialized-fsm> a proto:Rule ;
    rdfs:label "specialized-fsm" ;
    proto:enforcement "The `master_control.py` orchestrator must load and execute plans against this specific FSM when initiating an L4 Deep Research Cycle." ;
    dcterms:description "The Research FDC must be governed by its own dedicated Finite State Machine, defined in `tooling/research_fsm.json`. This FSM is tailored for a research workflow, with states for gathering, synthesis, and reporting." .

<http://agent-protocol.com/rules/research-protocol-001/mandate-research-tools> a proto:Rule ;
    rdfs:label "mandate-research-tools" ;
    proto:enforcement "Adherence is monitored by the Code Review Critic and through post-mortem analysis of the activity log." ;
    dcterms:description "For all complex research tasks, the `plan_deep_research` tool MUST be used to generate a plan, and the `execute_research_protocol` tool MUST be used for data gathering. This ensures a systematic and auditable research process." .

<http://agent-protocol.com/rules/reset-all-prohibition-001/no-reset-all> a proto:Rule ;
    rdfs:label "no-reset-all" ;
    proto:enforcement "This rule is enforced by the `master_control.py` orchestrator, which will immediately terminate the workflow with an error if an attempt is made to call this tool." ;
    dcterms:description "The `reset_all` tool is strictly forbidden under all circumstances. It is a legacy tool that has been superseded by more granular and safer methods of workspace management. Its use is considered a critical failure." .

<http://agent-protocol.com/rules/security-vuln-reporting-001/no-public-disclosure> a proto:Rule ;
    rdfs:label "no-public-disclosure" ;
    proto:enforcement "Violation of this rule may result in being banned from the project community." ;
    dcterms:description "Vulnerabilities MUST NOT be disclosed publicly until a patch is available and has been distributed." .

<http://agent-protocol.com/rules/security-vuln-reporting-001/vuln-reporting-channel> a proto:Rule ;
    rdfs:label "vuln-reporting-channel" ;
    proto:enforcement "This is a procedural rule. The designated contact is specified in the project's main SECURITY.md file." ;
    dcterms:description "All suspected security vulnerabilities MUST be reported privately to the designated security contact." .

<http://agent-protocol.com/rules/self-correction-protocol-001/automated-orchestration> a proto:Rule ;
    rdfs:label "automated-orchestration" ;
    proto:enforcement "This script is the designated engine for the PDSC workflow." ;
    dcterms:description "The self-correction cycle must be managed by the `tooling/self_correction_orchestrator.py` script, which processes pending lessons and triggers the necessary updates." .

<http://agent-protocol.com/rules/self-correction-protocol-001/autonomous-code-suggestion> a proto:Rule ;
    rdfs:label "autonomous-code-suggestion" ;
    proto:enforcement "The `tooling/self_correction_orchestrator.py` invokes the code suggester when it processes a lesson of this type." ;
    dcterms:description "The self-correction system can generate and apply code changes to its own tooling. This is achieved through a `PROPOSE_CODE_CHANGE` action, which is processed by `tooling/code_suggester.py` to create an executable plan." .

<http://agent-protocol.com/rules/self-correction-protocol-001/programmatic-rule-refinement> a proto:Rule ;
    rdfs:label "programmatic-rule-refinement" ;
    proto:enforcement "The `tooling/knowledge_compiler.py` can generate `update-rule` actions, and the `tooling/self_correction_orchestrator.py` executes them." ;
    dcterms:description "The self-correction system can modify the description of existing protocol rules via the `update-rule` command in `tooling/protocol_updater.py`, allowing it to refine its own logic." .

<http://agent-protocol.com/rules/self-correction-protocol-001/programmatic-updates> a proto:Rule ;
    rdfs:label "programmatic-updates" ;
    proto:enforcement "Agent's core logic should be designed to use this tool for all protocol modifications." ;
    dcterms:description "All modifications to protocol source files must be performed programmatically via the `tooling/protocol_updater.py` tool to ensure consistency and prevent manual errors." .

<http://agent-protocol.com/rules/self-correction-protocol-001/structured-lessons> a proto:Rule ;
    rdfs:label "structured-lessons" ;
    proto:enforcement "The `tooling/knowledge_compiler.py` script is responsible for generating lessons in the correct format." ;
    dcterms:description "Lessons learned from post-mortem analysis must be generated as structured, machine-readable JSON objects in `knowledge_core/lessons.jsonl`." .

<http://agent-protocol.com/rules/self-modification-001/rebuild-after-modification> a proto:Rule ;
    rdfs:label "rebuild-after-modification" ;
    proto:enforcement "The agent's plan for modifying protocols must include a final step to run the build script. This can be verified by reviewing the execution log." ;
    dcterms:description "After modifying any '.protocol.json' source file, the agent MUST execute the main build script 'tooling/hierarchical_compiler.py' to regenerate all 'AGENTS.md' artifacts and the 'protocols.ttl' knowledge graph." .

<http://agent-protocol.com/rules/self-modification-001/source-only-modification> a proto:Rule ;
    rdfs:label "source-only-modification" ;
    proto:enforcement "Procedural rule. The agent must demonstrate awareness of this by using tools like 'replace_with_git_merge_diff' or 'create_file_with_block' on source files, not build artifacts." ;
    dcterms:description "The agent MUST NOT edit any 'AGENTS.md' file directly. All modifications to protocols must be made to the '.protocol.json' source files within the 'protocols/' directories." .

<http://agent-protocol.com/rules/self-modification-001/test-driven-protocol-development> a proto:Rule ;
    rdfs:label "test-driven-protocol-development" ;
    proto:enforcement "This is a best-practice guideline. Adherence can be checked during code review by observing the agent's workflow." ;
    dcterms:description "When adding or significantly altering a protocol, the agent SHOULD, where practical, create a temporary, illustrative test case (e.g., a deliberately invalid file) to prove the change has the intended effect and that the build system's error handling is robust." .

<http://agent-protocol.com/rules/self-modification-001/validation-is-mandatory> a proto:Rule ;
    rdfs:label "validation-is-mandatory" ;
    proto:enforcement "The `hierarchical_compiler.py` script's successful execution serves as the enforcement mechanism." ;
    dcterms:description "Any new or modified protocol source file MUST be successfully validated against the 'protocols/protocol.schema.json'. The build process, which includes this validation, must complete without errors." .

<http://agent-protocol.com/rules/speculative-execution-001/formal-proposal-required> a proto:Rule ;
    rdfs:label "formal-proposal-required" ;
    proto:enforcement "The initial plan for any speculative task must include a step to generate and save a proposal artifact." ;
    dcterms:description "A speculative task must begin with the creation of a formal proposal document, outlining the objective, rationale, and plan." .

<http://agent-protocol.com/rules/speculative-execution-001/idle-state-trigger> a proto:Rule ;
    rdfs:label "idle-state-trigger" ;
    proto:enforcement "The agent's main control loop must verify an idle state before allowing the invocation of a speculative plan." ;
    dcterms:description "The agent may only initiate a speculative task when it has no active, user-assigned tasks." .

<http://agent-protocol.com/rules/speculative-execution-001/resource-constraints> a proto:Rule ;
    rdfs:label "resource-constraints" ;
    proto:enforcement "This is a system-level constraint that the agent orchestrator must enforce." ;
    dcterms:description "Speculative tasks must operate under defined resource limits." .

<http://agent-protocol.com/rules/speculative-execution-001/speculative-logging> a proto:Rule ;
    rdfs:label "speculative-logging" ;
    proto:enforcement "The agent's logging and file-creation tools should be context-aware and apply this tag when in a speculative mode." ;
    dcterms:description "All logs and artifacts generated during a speculative task must be tagged as 'speculative'." .

<http://agent-protocol.com/rules/speculative-execution-001/user-review-gate> a proto:Rule ;
    rdfs:label "user-review-gate" ;
    proto:enforcement "The agent is forbidden from using tools like 'submit' or 'merge' within a speculative context. It must use 'request_user_input' to present the results." ;
    dcterms:description "Final artifacts from a speculative task must be submitted for user review and cannot be merged directly." .

<http://agent-protocol.com/rules/standing-orders-001/aorp-mandate> a proto:Rule ;
    rdfs:label "aorp-mandate" ;
    proto:enforcement "Enforced by the agent's core operational loop and the `start` command in `tooling/fdc_cli.py`." ;
    dcterms:description "All Finite Development Cycles (FDCs) MUST be initiated using the FDC toolchain's 'start' command. This is non-negotiable." .

<http://agent-protocol.com/rules/standing-orders-001/fdc-toolchain-mandate> a proto:Rule ;
    rdfs:label "fdc-toolchain-mandate" ;
    proto:enforcement "The agent's internal logic is designed to prefer these specific tool commands for FDC state transitions." ;
    dcterms:description "Use the `fdc_cli.py` tool for all core FDC state transitions: task initiation ('start'), plan linting ('lint'), and task closure ('close')." .

<http://agent-protocol.com/rules/standing-orders-001/rag-mandate> a proto:Rule ;
    rdfs:label "rag-mandate" ;
    proto:enforcement "This is a core principle of the L3 orientation phase, utilizing tools like `google_search`." ;
    dcterms:description "For any task involving external technologies, Just-In-Time External RAG is REQUIRED to verify current best practices. Do not trust internal knowledge." .

<http://agent-protocol.com/rules/toolchain-review-on-schema-change-001/toolchain-audit-on-schema-change> a proto:Rule ;
    rdfs:label "toolchain-audit-on-schema-change" ;
    proto:enforcement "This is a procedural rule for any agent developing the protocol system. Adherence can be partially checked by post-commit hooks or review processes that look for a tooling audit in any change that modifies the specified core files." ;
    dcterms:description "If a change is made to the core protocol schema (`protocol.schema.json`) or to the compilers that process it (`protocol_compiler.py`, `hierarchical_compiler.py`), a formal audit of the entire `tooling/` directory MUST be performed as a subsequent step. This audit should verify that all tools are compatible with the new protocol structure." .

<http://agent-protocol.com/rules/unified-auditor-001/run-all-audits> a proto:Rule ;
    rdfs:label "run-all-audits" ;
    proto:enforcement "The tool is invoked via the command line, typically through the `make audit` target." ;
    dcterms:description "The `auditor.py` script should be used to run comprehensive checks on the repository's health. It can be run with 'all' to check protocols, plans, and documentation completeness." .

<http://agent-protocol.com/rules/unified-doc-builder-001/use-doc-builder-for-all-docs> a proto:Rule ;
    rdfs:label "use-doc-builder-for-all-docs" ;
    proto:enforcement "The tool is invoked via the command line, typically through the `make docs`, `make readme`, or `make pages` targets." ;
    dcterms:description "The `doc_builder.py` script is the single entry point for generating all user-facing documentation, including system-level docs, README files, and GitHub Pages. It should be called with the appropriate '--format' argument." .
