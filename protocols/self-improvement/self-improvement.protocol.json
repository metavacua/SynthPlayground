{
  "protocol_id": "self-improvement-protocol-001",
  "description": "A formal protocol for the agent to propose, validate, and implement improvements to its own operational protocols and tools.",
  "rules": [
    {
      "rule_id": "sip-001",
      "description": "Proposals for self-improvement must be initiated via the `self_improvement_cli.py` tool.",
      "enforcement": "The `self_improvement_cli.py` tool will create a new branch and a proposal markdown file in the `proposals/` directory."
    },
    {
      "rule_id": "sip-002",
      "description": "Improvement proposals must be formally structured, including sections for 'Problem Statement', 'Proposed Solution', 'Success Criteria', and 'Impact Analysis'.",
      "enforcement": "The `self_improvement_cli.py` tool will generate a template with these required sections."
    },
    {
      "rule_id": "sip-003",
      "description": "Any proposed changes to protocols must be implemented in the relevant source files within the `protocols/` subdirectories, not directly in the generated AGENTS.md files.",
      "enforcement": "Pre-submit checks will fail if generated AGENTS.md files are modified directly."
    },
    {
      "rule_id": "sip-004",
      "description": "After protocol source files are modified, the `protocol_compiler.py` must be executed to re-compile the protocols and validate the changes.",
      "enforcement": "A pre-submit git hook will trigger the compiler and block the commit if compilation fails."
    },
    {
      "rule_id": "sip-005",
      "description": "The success of an improvement must be verified by running relevant tests or a new, specific verification script.",
      "enforcement": "The improvement proposal must reference the specific tests or scripts used for verification."
    }
  ],
  "associated_tools": [
    "tooling/self_improvement_cli.py",
    "tooling/protocol_compiler.py",
    "tooling/pre_submit_check.py"
  ]
}