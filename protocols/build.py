import os
import sys
import json
import jsonschema
from pathlib import Path

# Add the root directory to the Python path
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))

from tooling.build_utils import find_files, load_schema, sanitize_markdown, execute_code

# --- Configuration ---
ROOT_DIR = os.path.abspath(os.path.join(os.path.dirname(__file__), ".."))
PROTOCOLS_DIR = os.path.dirname(__file__)
SCHEMA_FILE = os.path.join(PROTOCOLS_DIR, "protocol.schema.json")
TOOL_MANIFEST_FILE = os.path.join(ROOT_DIR, "tooling", "tool_manifest.json")

DISCLAIMER_TEMPLATE = """\
# ---
# DO NOT EDIT THIS FILE DIRECTLY.
# This file is programmatically generated by the build script in this directory.
# All changes to agent protocols must be made in the source files.
#
# This file contains the compiled protocols in a human-readable Markdown format,
# with machine-readable JSON definitions embedded.
# ---
"""

# --- Tool Manifest Logic ---
def load_tool_manifest():
    """Loads the tool manifest from the specified file."""
    if not os.path.exists(TOOL_MANIFEST_FILE):
        print(f"Warning: Tool manifest not found at {TOOL_MANIFEST_FILE}", file=sys.stderr)
        return {}
    with open(TOOL_MANIFEST_FILE, "r") as f:
        return json.load(f)

def validate_protocol_tools(protocol_data, tool_manifest):
    """Validates the tools used in a protocol against the tool manifest."""
    if "rules" not in protocol_data:
        return

    for rule in protocol_data["rules"]:
        if "tool" in rule:
            tool_name = rule["tool"]
            if tool_name not in [tool["name"] for tool in tool_manifest.get("tools", [])]:
                print(f"Warning: Tool '{tool_name}' in protocol '{protocol_data.get('protocol_id', 'N/A')}' not found in tool manifest.", file=sys.stderr)

# --- Core Compilation Logic ---
def compile_protocol_module(source_dir, target_file):
    """Compiles all protocol files in a given directory into a single AGENTS.md."""
    print(f"--- Compiling Protocol Module: {source_dir} ---")

    schema = load_schema(SCHEMA_FILE)
    if not schema:
        print(f"Error: Could not load schema from {SCHEMA_FILE}", file=sys.stderr)
        return

    tool_manifest = load_tool_manifest()

    all_md_files = sorted(find_files(".protocol.md", base_dir=source_dir, recursive=False))
    all_json_files = sorted(find_files(".protocol.json", base_dir=source_dir, recursive=False))

    if not all_md_files and not all_json_files:
        print("No protocol files found. Skipping.")
        return

    final_content = [DISCLAIMER_TEMPLATE]

    # Process markdown files
    for file_path in all_md_files:
        with open(os.path.join(source_dir, file_path), "r") as f:
            content = f.read()
            sanitized_content = sanitize_markdown(content)
            final_content.append(sanitized_content)
        final_content.append("\n---\n")

    # Process JSON files
    for file_path in all_json_files:
        try:
            with open(os.path.join(source_dir, file_path), "r") as f:
                protocol_data = json.load(f)
            jsonschema.validate(instance=protocol_data, schema=schema)
            validate_protocol_tools(protocol_data, tool_manifest)
            json_string = json.dumps(protocol_data, indent=2)
            md_json_block = f"```json\n{json_string}\n```\n"
            final_content.append(md_json_block)
            final_content.append("\n---\n")
        except json.JSONDecodeError:
            print(f"Warning: Could not decode JSON from {file_path}", file=sys.stderr)
        except jsonschema.ValidationError as e:
            print(f"Warning: Schema validation failed for {file_path}: {e.message}", file=sys.stderr)

    # Write the final output
    with open(target_file, "w") as f:
        f.write("\n".join(final_content))
    print(f"Successfully compiled AGENTS.md at {target_file}")


def generate_root_agents_md(child_protocol_dirs):
    """Generates the root AGENTS.md file, linking to the compiled sub-modules."""
    print("--- Generating Root AGENTS.md ---")
    content = [
        "# AGENTS.md",
        "\nThis file provides instructions for AI coding agents to interact with this project.",
        "\n## Project Overview",
        "\nThis is a Python-based project with a sophisticated, self-correcting agent architecture.",
        "\n## Build & Commands",
        "\nThis repository uses a hierarchical, decentralized protocol system. Each of the following directories contains a self-contained set of protocols and is compiled by its own local build script."
    ]

    for dir_path in sorted(child_protocol_dirs):
        module_name = Path(dir_path).name.replace('_', ' ').title()
        link = f"- [{module_name}]({Path(dir_path).relative_to(ROOT_DIR)}/AGENTS.md)"
        content.append(link)

    content.append("\n### Dependency Installation")
    content.append("General protocols are defined in the [root protocol module](./protocols/AGENTS.md).")
    content.append("To install all required Python packages, run:\n```bash\nmake install\n```")
    content.append("\n### Running Tests")
    content.append("To run the full suite of unit tests, use the following command:\n```bash\nmake test\n```")

    target_file = os.path.join(ROOT_DIR, "AGENTS.md")
    with open(target_file, "w") as f:
        f.write("\n".join(content))
    print(f"Successfully generated root AGENTS.md at {target_file}")


def main():
    """Main function to orchestrate the hierarchical compilation process."""
    print("--- Starting Hierarchical Protocol Compilation ---")
    protocol_dirs = [d for d in Path(PROTOCOLS_DIR).iterdir() if d.is_dir()]

    for directory in protocol_dirs:
        target_file = os.path.join(directory, "AGENTS.md")
        compile_protocol_module(str(directory), target_file)

    # Compile the root protocol files as well
    compile_protocol_module(PROTOCOLS_DIR, os.path.join(PROTOCOLS_DIR, "AGENTS.md"))

    # Generate the main AGENTS.md that links to all sub-protocols
    generate_root_agents_md(protocol_dirs)


if __name__ == "__main__":
    main()
