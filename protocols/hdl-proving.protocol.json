{
  "protocol_id": "hdl-proving-001",
  "description": "A protocol for interacting with the Hypersequent-calculus-based logic engine, allowing the agent to perform formal logical proofs.\n\n**Associated Tool Documentation (`tooling/hdl_prover.py`):**\n\n  \n  ### `/app/tooling/hdl_prover.py`\n  A command-line tool for proving sequents in Intuitionistic Linear Logic.\n  \n  This script provides a basic interface to a simple logic prover. It takes a\n  sequent as a command-line argument, parses it into a logical structure, and\n  then attempts to prove it using a rudimentary proof search algorithm.\n  \n  The primary purpose of this tool is to allow the agent to perform formal\n  reasoning and verification tasks by checking the validity of logical entailments.\n  For example, it can be used to verify that a certain conclusion follows from a\n  set of premises according to the rules of linear logic.\n  \n  The current implementation uses a very basic parser and proof algorithm,\n  serving as a placeholder and demonstration for a more sophisticated, underlying\n  logic engine.\n  \n  **Public Functions:**\n  \n  - #### `def main()`\n  \n  - #### `def parse_formula(s)`\n    > A very basic parser for formulas.\n  \n  - #### `def parse_sequent(s)`\n    > A very basic parser for sequents.\n  \n  - #### `def prove_sequent(sequent)`\n    > A very simple proof search algorithm.\n    > This is a placeholder for a more sophisticated prover.\n",
  "rules": [
    {
      "rule_id": "prove-sequent",
      "description": "The `hdl_prover.py` tool should be used to check the provability of a logical sequent. This tool acts as a wrapper for the underlying Lisp-based prover.",
      "enforcement": "The tool is used by invoking it from the command line with the sequent to be proved as an argument."
    }
  ],
  "associated_tools": [
    "tooling/hdl_prover.py"
  ]
}