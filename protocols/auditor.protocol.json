{
  "protocol_id": "unified-auditor-001",
  "description": "A protocol for the unified repository auditing tool, which combines multiple health and compliance checks into a single interface.\n\n**Associated Tool Documentation (`tooling/auditor.py`):**\n\n  \n  ### `/app/tooling/auditor.py`\n  A unified auditing tool for maintaining repository health and compliance.\n  \n  This script combines the functionality of several disparate auditing tools into a\n  single, comprehensive command-line interface. It serves as the central tool for\n  validating the key components of the agent's architecture, including protocols,\n  plans, and documentation.\n  \n  The auditor can perform the following checks:\n  1.  **Protocol Audit (`protocol`):**\n      - Checks if `AGENTS.md` artifacts are stale compared to their source files.\n      - Verifies protocol completeness by comparing tools used in logs against\n        tools defined in protocols.\n      - Analyzes tool usage frequency (centrality).\n  2.  **Plan Registry Audit (`plans`):**\n      - Scans `knowledge_core/plan_registry.json` for \"dead links\" where the\n        target plan file does not exist.\n  3.  **Documentation Audit (`docs`):**\n      - Scans the generated `SYSTEM_DOCUMENTATION.md` to find Python modules\n        that are missing module-level docstrings.\n  \n  The tool is designed to be run from the command line and can execute specific\n  audits or all of them, generating a consolidated `audit_report.md` file.\n  \n  **Public Functions:**\n  \n  - #### `def find_all_agents_md_files(root_dir)`\n  \n  - #### `def get_protocol_tools_from_agents_md(agents_md_paths)`\n  \n  - #### `def get_used_tools_from_log(log_path)`\n  \n  - #### `def main()`\n  \n  - #### `def run_doc_audit()`\n  \n  - #### `def run_plan_registry_audit()`\n  \n  - #### `def run_protocol_audit()`\n",
  "rules": [
    {
      "rule_id": "run-all-audits",
      "description": "The `auditor.py` script should be used to run comprehensive checks on the repository's health. It can be run with 'all' to check protocols, plans, and documentation completeness.",
      "enforcement": "The tool is invoked via the command line, typically through the `make audit` target."
    }
  ],
  "associated_tools": [
    "tooling/auditor.py"
  ]
}