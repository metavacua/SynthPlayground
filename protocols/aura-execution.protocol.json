{
  "protocol_id": "aura-execution-001",
  "description": "A protocol for executing Aura scripts, enabling a more expressive and powerful planning and automation language for the agent.\n\n**Associated Tool Documentation (`tooling/aura_executor.py`):**\n\n  \n  ### `/app/tooling/aura_executor.py`\n  This script serves as the command-line executor for `.aura` files.\n  \n  It bridges the gap between the high-level Aura scripting language and the\n  agent's underlying Python-based toolset. The executor is responsible for:\n  1.  Parsing the `.aura` source code using the lexer and parser from the\n      `aura_lang` package.\n  2.  Setting up an execution environment for the interpreter.\n  3.  Injecting a \"tool-calling\" capability into the Aura environment, which\n      allows Aura scripts to dynamically invoke registered Python tools\n      (e.g., `hdl_prover`, `environmental_probe`).\n  4.  Executing the parsed program and printing the final result.\n  \n  This makes it a key component for enabling more expressive and complex\n  automation scripts for the agent.\n  \n  **Public Functions:**\n  \n  - #### `def dynamic_agent_call_tool(tool_name_obj, *args)`\n    > Dynamically imports and calls a tool from the 'tooling' directory and wraps the result.\n    > \n    > This function provides the bridge between the Aura scripting environment and the\n    > Python-based agent tools. It takes the tool's module name and arguments,\n    > runs the tool in a subprocess, and wraps the captured output in an Aura `Object`.\n    > \n    > Args:\n    >     tool_name_obj: An Aura Object containing the tool's module name (e.g., 'hdl_prover').\n    >     *args: A variable number of Aura Objects to be passed as string arguments to the tool.\n    > \n    > Returns:\n    >     An Aura `Object` containing the tool's stdout as a string, or an error message.\n  \n  - #### `def main()`\n    > Main entry point for the Aura script executor.\n",
  "rules": [
    {
      "rule_id": "execute-aura-script",
      "description": "The `aura_executor.py` tool should be used to execute .aura script files. This tool provides the bridge between the agent's master control loop and the Aura language interpreter.",
      "enforcement": "The tool is used by invoking it from the command line with the path to the Aura script as an argument."
    }
  ],
  "associated_tools": [
    "tooling/aura_executor.py"
  ]
}