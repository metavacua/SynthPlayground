Paraconsistent Light Linear Logic: A Resource-Sensitive Framework for Inconsistency-Tolerant Reasoning




Part I: Foundations and Motivation




Section 1: The Convergence of Resource-Sensitivity and Inconsistency-Tolerance




1.1 Introduction: A New Frontier for Logic


The evolution of formal logic has been marked by a continuous refinement of its expressive power, driven by the need to model increasingly complex aspects of reasoning, computation, and information processing. Classical and intuitionistic logics, with their focus on abstract truth and constructive proof, respectively, provided the foundational bedrock.1 However, their underlying structural assumptions—that information can be arbitrarily duplicated (Contraction) or discarded (Weakening)—render them unsuitable for modeling systems where resources are finite and actions are consequential. This limitation spurred the development of substructural logics, most notably Jean-Yves Girard's Linear Logic (LL), which offers a sophisticated framework for reasoning about resources by carefully controlling these structural rules.3
Concurrently, a separate challenge has emerged from the practical reality of information systems. In large-scale databases, distributed networks, multi-agent systems, and even human epistemic states, information is often incomplete, evolving, and, crucially, inconsistent.5 Classical logic's principle of explosion (ex contradictione quodlibet, ECQ), which dictates that a single contradiction entails the truth of any arbitrary proposition, renders it useless in such contexts; a single inconsistency leads to the trivialization of the entire system.5 This has motivated the development of paraconsistent logics, systems designed to tolerate contradictions without collapsing into absurdity.8 Among the most systematic approaches to paraconsistency are the Logics of Formal Inconsistency (LFIs), which internalize the notion of consistency as a first-class citizen within the object language.9
This report posits that the next frontier in logical systems lies at the confluence of these two streams: the synthesis of resource-sensitivity and inconsistency-tolerance. Modern computational and epistemic scenarios demand frameworks that can simultaneously manage the consumption of resources and the presence of conflicting data. Consider a distributed sensor network: each sensor provides data (a resource), but some sensors may provide contradictory readings. A reasoning system for this network must not only track the use of each piece of data but also gracefully handle the contradictions without halting or producing nonsensical results. Similarly, formal verification of concurrent software must account for transient states where different components report inconsistent information, all while modeling the computational resources (e.g., memory, time) consumed by the process.5
This work introduces and formally develops a novel logical system, Paraconsistent Light Linear Logic (pLLL), designed to meet this challenge. It is a conservative extension of Girard's Light Linear Logic (LLL)—a variant of linear logic that characterizes polynomial-time computation—with the core machinery of LFIs. By integrating a consistency operator and a non-explosive negation into the fine-grained, resource-aware framework of LLL, pLLL provides a formal language for specifying and reasoning about systems that are both computationally bounded and inconsistency-tolerant. This synthesis offers a powerful new tool for theoretical computer science, artificial intelligence, and the philosophy of logic.


1.2 Philosophical and Computational Motivation


The construction of pLLL is grounded in specific philosophical and computational desiderata that clarify its purpose and scope.


1.2.1 Epistemic Interpretation of Contradiction


A central philosophical choice in designing a paraconsistent logic is the interpretation of a contradiction, such as a formula of the form $A \land \neg A$. One strong interpretation, known as dialetheism, posits that some contradictions are ontologically true statements about the world.8 Our approach, however, adopts a more epistemological and conservative stance, in line with the primary motivation for many LFIs.9 Within pLLL, a contradiction is not interpreted as a "true contradiction" but rather as the presence of conflicting evidence.
Following this interpretation, the valuation of a formula $A$ can be understood in terms of the evidence available for it 9:
* $A$ is asserted: There is evidence that $A$ is the case.
* $\neg A$ is asserted: There is evidence that $A$ is not the case.
The simultaneous assertion of $A$ and $\neg A$ thus signifies a state of informational conflict, not a metaphysical impossibility. This perspective aligns seamlessly with the resource-centric view of linear logic. If formulas represent resources (e.g., pieces of data, computational tasks, premises), then a context containing both $A$ and $\neg A$ represents a state in which the available resources include evidence for both a proposition and its negation.1 The goal of the logic is not to declare one piece of evidence true and the other false, but to provide rules for reasoning coherently in the presence of this conflict. This epistemological reading avoids the stronger claims of dialetheism and provides a pragmatic foundation for applications in areas like belief revision and knowledge base management, where conflicting information is a common occurrence.5


1.2.2 Complexity-Bounded Reasoning


The choice of a foundational logic is not merely a matter of expressive power; it has profound implications for the computational properties of the system. While full Linear Logic is undecidable, specific subsystems have been identified that correspond to important complexity classes.4 Light Linear Logic (LLL) is a seminal example, designed by Girard to capture precisely the class of functions computable in polynomial time (FPTIME).12
LLL achieves this by imposing strict controls on the exponential modality ! ("of course"), which is the mechanism for reintroducing the structural rules of contraction and weakening. By restricting the promotion rule that creates !-formulas, LLL ensures that the process of proof normalization (cut-elimination) is itself a polynomially bounded computation.12 This property is of paramount importance. It means that reasoning within LLL is not just about what is provable in principle, but about what is provably feasible.
By building our paraconsistent system upon LLL, we inherit this crucial property. The resulting logic, pLLL, is therefore not just a system for reasoning with contradictions, but a system for reasoning with contradictions efficiently. This makes it particularly suitable for applications in computer science, where algorithmic complexity is a primary concern. It provides a framework for designing inconsistency-tolerant algorithms and systems with guaranteed performance bounds, a significant advantage over paraconsistent logics based on classical or intuitionistic systems whose proof-search complexity is often intractable.12


1.2.3 Application Domains


The unique combination of features in pLLL opens up several promising application domains:
* Formal Verification and Software Engineering: Large software systems often involve components developed independently, leading to inconsistencies in specifications, documentation, and even runtime behavior.5 A logic like pLLL could be used to model and verify such systems, allowing for the formal proof of properties (e.g., safety, liveness) even in the presence of transient, localized inconsistencies, while also reasoning about the computational resources (e.g., stack depth, execution time) consumed.
* Resource-Bounded Agents and AI: In artificial intelligence, agents must often make decisions based on limited computational resources and potentially contradictory sensor data or beliefs. pLLL provides a formal model for such agents, where the linear aspect captures the resource constraints and the LFI aspect captures the ability to reason and act rationally despite conflicting inputs.5
* Database Theory: Inconsistency in databases, especially large, distributed ones, is a well-known problem. Paraconsistent logics have been proposed as a means to query inconsistent databases without trivializing the results.5 pLLL could extend this by introducing a notion of "cost" to queries, where the linear connectives model the computational resources required to access and combine data from different sources, providing a framework for resource-aware, inconsistency-tolerant query planning.


1.3 Outline of the Proposed System (pLLL)


This report formally defines and analyzes Paraconsistent Light Linear Logic (pLLL). The development proceeds in three parts.
Part I has laid the philosophical and computational groundwork, motivating the synthesis of LFIs and LLL. The remainder of this part provides a detailed technical review of these two foundational logics.
Part II constitutes the core technical contribution. It begins by defining the formal language (syntax) of pLLL, which extends LLL with a paraconsistent negation $\neg$ and a consistency operator $\circ$. It then presents a complete one-sided sequent calculus for the logic. This calculus includes the standard rules for linear connectives, the restricted modality rules from LLL, and a novel set of rules governing the behavior of the paraconsistent operators. The central challenge, and the main innovation of the calculus, is to define the interaction between $\circ$ and the linear connectives in a way that respects both the principles of paraconsistency and the resource-sensitive, complexity-bounded nature of LLL. This part culminates in the statement of the cut-elimination theorem for pLLL, demonstrating the system's proof-theoretic coherence.
Part III provides an analysis of the resulting system and explores potential extensions. It examines how consistency is expressed and propagated in a resource-sensitive manner and demonstrates how the logic successfully avoids the principle of explosion. It then outlines the construction of an intuitionistic variant, pILLL, by restricting sequents to a single conclusion, and discusses the relationship to other complexity-bounded systems like Bounded Linear Logic (BLL). The report concludes by summarizing the contributions and outlining promising directions for future research, including the development of denotational semantics and computational interpretations of the logic.


Section 2: A Proof-Theoretic Review of Foundational Logics


A robust understanding of pLLL requires a firm grasp of its constituent parts: the Logics of Formal Inconsistency and Light Linear Logic. This section provides a concise, proof-theoretic review of both, establishing the necessary concepts and notation for the subsequent development.


2.1 Logics of Formal Inconsistency (LFIs)


Paraconsistent logics are defined by their rejection of the Principle of Explosion (ECQ).5 Formally, a logic $\mathcal{L}$ with a consequence relation $\vdash_{\mathcal{L}}$ is paraconsistent if there exist formulas $A$ and $B$ such that:


$$\{A, \neg A\} \not\vdash_{\mathcal{L}} B$$


This property allows for the existence of theories that are inconsistent (i.e., contain both a sentence and its negation) but are not trivial (i.e., do not contain every sentence).5 This distinguishes between the notion of consistency and the broader notion of coherence or non-triviality.8


2.1.1 The LFI Approach: Internalizing Consistency


The Logics of Formal Inconsistency (LFIs) are a particularly sophisticated family of paraconsistent logics. Their defining characteristic is the ability to express the notion of consistency within the object language.9 This is typically achieved through a unary connective $\circ$ (read "circle" or "consistent"), where $\circ A$ is intended to mean "$A$ is consistent."
This internalization of consistency allows LFIs to control the application of explosive logical principles. While explosion is blocked in the general case, it can be selectively re-enabled for formulas that are explicitly marked as consistent. This principle is often called "gentle explosion."
To illustrate, consider a minimal LFI known as mbC, which is built upon classical positive logic. Its behavior with respect to negation and consistency can be summarized by the following key properties 9:
1. Non-Explosion: For some $A, B$, $A, \neg A \not\vdash B$. The presence of a contradiction does not, by itself, lead to triviality.
2. Gentle Explosion: For any $A, B$, $A, \neg A, \circ A \vdash B$. If a formula $A$ is known to be consistent ($\circ A$), then a contradiction involving it is explosive, recovering classical reasoning in "well-behaved" contexts.
3. Propagation of Consistency (optional): Many LFIs include axioms governing how consistency propagates, such as $\circ A \land \circ B \rightarrow \circ(A \land B)$.
It is important to note that in many LFIs, the Law of Non-Contradiction, $\vdash \neg(A \land \neg A)$, can still be a theorem.14 This highlights a crucial distinction: an LFI can hold that contradictions are logically false while simultaneously providing a framework to reason non-trivially from premises that contain them. This reinforces the epistemological interpretation of contradictions as conflicting information rather than as true states of affairs.9 The LFI approach thus provides a nuanced and powerful tool for managing inconsistency, making it an ideal candidate for integration into a resource-sensitive logic.


2.2 Light Linear Logic (LLL)


Linear Logic (LL) emerges from a deep analysis of the proof theory of classical sequent calculus, specifically by removing the default availability of the structural rules of Weakening and Contraction.3
* Weakening: Allows the introduction of an arbitrary formula into a set of premises or conclusions. $\frac{\Gamma \vdash \Delta}{\Gamma, A \vdash \Delta}$ (Left) and $\frac{\Gamma \vdash \Delta}{\Gamma \vdash \Delta, A}$ (Right).
* Contraction: Allows the duplication of a formula. $\frac{\Gamma, A, A \vdash \Delta}{\Gamma, A \vdash \Delta}$ (Left) and $\frac{\Gamma \vdash \Delta, A, A}{\Gamma \vdash \Delta, A}$ (Right).
In LL, these rules are abolished. This seemingly simple change has profound consequences. Formulas are no longer treated as persistent truths but as consumable resources. A premise $A$ must be used exactly once in a derivation. This resource-sensitivity forces a split in the familiar logical connectives.1


2.2.1 Multiplicatives and Additives


Classical conjunction and disjunction each split into two distinct forms in LL:
* Multiplicative Conjunction ($\otimes$, tensor): To prove $A \otimes B$, one must provide the resources to prove $A$ and the resources to prove $B$, and the resources are combined. The unit is 1 (one).
* Additive Conjunction ($\&$, with): To prove $A \& B$, one must provide resources that can prove either $A$ or $B$, at the prover's choice. The unit is $\top$ (top).
* Multiplicative Disjunction ($\parr$, par): $A \parr B$ is the De Morgan dual of $\otimes$. It represents a form of parallel composition. The unit is $\bot$ (bottom).
* Additive Disjunction ($\oplus$, plus): To prove $A \oplus B$, the prover must provide resources to prove one of the disjuncts, but the choice is up to the prover, not the consumer. The unit is 0 (zero).
Linear implication, $A \multimap B$, is defined as $A^\bot \parr B$, representing a transformation that consumes a resource $A$ to produce a resource $B$.1


2.2.2 The Exponentials: Controlled Structural Rules


To recover the full expressive power of classical and intuitionistic logic, LL reintroduces Weakening and Contraction in a controlled manner via the exponential modalities ! ("of course") and ? ("why not").1
* $!A$ ("Of Course" $A$): A resource of type $!A$ can be used any number of times (contraction) or not at all (weakening). It represents a persistent, reusable resource or truth.
* $?A$ ("Why Not" $A$): The De Morgan dual of $!A$. It is used to manage contexts of reusable formulas.
The rules for these modalities (Dereliction, Weakening, Contraction, and Promotion) carefully regulate how a transient resource $A$ can be transformed into a persistent resource $!A$. It is through this mechanism that LL can embed classical logic, for instance, via a translation like $A \rightarrow B$ becomes $!A \multimap B$.17


2.2.3 Girard's LLL for Polynomial Time


While LL provides a rich theory of resources, its full version is undecidable.4 Light Linear Logic (LLL) is a refinement of LL designed specifically to control the complexity of computation.12 LLL achieves this by modifying the rules for the exponentials to restrict their power.
The key innovations of LLL are:
1. Restricted Promotion: The promotion rule, which creates a $!$-formula, is severely restricted. In a one-sided sequent calculus ($\vdash \Gamma$), the rule is typically of the form:

$$\frac{\vdash?\Gamma, A}{\vdash?\Gamma,!A} \quad (\text{Promotion})$$

This rule states that to create a reusable resource $!A$, all other resources ($? \Gamma$) in the context must already be reusable. This prevents an uncontrolled explosion of reusable formulas, which is a source of high computational complexity.
2. The $\S$ Modality: LLL introduces a third modality, $\S$ ("paragraph" or "section"), which is self-dual ($(\S A)^\bot \equiv \S (A^\bot)$). This modality acts as an intermediary, further stratifying the logic and enabling the encoding of polynomial-time algorithms, such as those defined by recursion on notation.12
The result of these restrictions is a logical system whose cut-elimination procedure has a polynomially bounded number of steps. This means that any function provably total in the logical system is a polynomial-time computable function. LLL thus provides a purely logical characterization of the complexity class FPTIME, making it an ideal foundation for a logic of feasible, inconsistency-tolerant reasoning.12


Part II: The Formal System pLLL


This part introduces the central technical contribution of this report: the formal definition of Paraconsistent Light Linear Logic (pLLL). We begin by specifying its language, followed by a complete presentation of its sequent calculus, paying special attention to the novel rules for the paraconsistent connectives.


Section 3: The Language of Paraconsistent Light Linear Logic


The language of pLLL is constructed by augmenting the language of LLL with primitives for paraconsistent reasoning. The choice of a one-sided sequent calculus presentation, following Girard's canonical formulations of LL and LLL 4, profoundly influences the syntax. This presentation relies on a single, involutive linear negation, denoted $( \cdot )^\bot$, which is defined via De Morgan dualities.
A crucial design decision is to introduce the paraconsistent negation, $\neg$, as a separate, non-involutive connective. This results in a system with two distinct negations, a feature found in several advanced non-classical logics, such as Nelson's constructive logics.18 The linear negation $( \cdot )^\bot$ operates at the structural level of the logic, ensuring the duality of the connectives and the ability to move formulas across the turnstile in the sequent calculus. The paraconsistent negation $\neg$, in contrast, operates at the content level, capturing the notion of "evidence against" a proposition without the strong properties of classical negation (e.g., $\neg \neg A \leftrightarrow A$ is not necessarily a theorem).20 This separation is key to integrating the LFI framework without disrupting the delicate balance of the underlying linear logic.


3.1 Syntax and Formulae


Let $\mathcal{A}$ be a countable set of atomic propositions (atoms). The set of pLLL formulas is defined by the following Backus-Naur Form (BNF) grammar. The syntax distinguishes between positive and negative connectives, a concept known as polarity, which is fundamental to the proof theory of linear logic.4
Table 1: Formal Grammar of pLLL (BNF)
Category
	Formula A
	Description
	Literals
	$p \quad | \quad p^\bot$
	An atomic proposition $p \in \mathcal{A}$ or its linear negation.
	Multiplicatives
	$A \otimes A \quad | \quad A \parr A$
	Tensor (positive) and Par (negative).
	

	$1 \quad | \quad \bot$
	One (unit of $\otimes$) and Bottom (unit of $\parr$).
	Additives
	$A \oplus A \quad | \quad A \& A$
	Plus (positive) and With (negative).
	

	$0 \quad | \quad \top$
	Zero (unit of $\oplus$) and Top (unit of $\&$).
	Modalities
	$!A \quad | \quad?A$
	Of Course (positive) and Why Not (negative).
	

	$\S A$
	Section (self-dual).
	Paraconsistent
	$\neg A$
	Paraconsistent Negation.
	

	$\circ A$
	Consistency Operator.
	Linear negation, $( \cdot )^\bot$, is defined on this language as an involutive operation ($(A^\bot)^\bot \equiv A$) that obeys the following De Morgan dualities:
   * $(p)^\bot = p^\bot$
   * $(p^\bot)^\bot = p$
   * $(A \otimes B)^\bot = A^\bot \parr B^\bot$
   * $(A \parr B)^\bot = A^\bot \otimes B^\bot$
   * $(1)^\bot = \bot$
   * $(\bot)^\bot = 1$
   * $(A \oplus B)^\bot = A^\bot \& B^\bot$
   * $(A \& B)^\bot = A^\bot \oplus B^\bot$
   * $(0)^\bot = \top$
   * $(\top)^\bot = 0$
   * $(!A)^\bot =?(A^\bot)$
   * $(?A)^\bot =!(A^\bot)$
   * $(\S A)^\bot = \S(A^\bot)$
The paraconsistent connectives $\neg$ and $\circ$ do not have predefined duals under linear negation. Their behavior is determined solely by their dedicated inference rules in the sequent calculus. For instance, $(\neg A)^\bot$ is not, in general, equivalent to $\neg(A^\bot)$ or $\neg \neg A$. This syntactic independence is essential for the paraconsistent extension to function correctly.


3.2 Informal Semantics and Interpretation


Before presenting the formal proof system, it is instructive to consider the intended interpretation of the new combinations of connectives within the resource-sensitive framework.
   * $\neg A$ (Paraconsistent Negation): Interpreted epistemically as "there is a resource (evidence) that refutes $A$".9 This resource is consumed upon use, just like any other formula in the logic.
   * $\circ A$ (Consistency): Interpreted as "the resource/evidence $A$ is consistent or reliable." A proof of $\circ A$ is itself a resource—a certificate of reliability—that may be required to perform certain sensitive operations involving $A$.
   * $!(\circ A)$: This formula represents a powerful assertion: "The reliability of $A$ is a stable, reusable fact." This allows the consistency of a particular piece of data to be referenced multiple times throughout a computation without being consumed. This is crucial for modeling systems where certain components are trusted or have been verified as reliable.
   * $\circ(A \otimes B)$: This asserts the reliability of the combined resource $A \otimes B$. A central question for the proof system will be how to derive this. Must one prove $\circ A$ and $\circ B$ separately and then combine them? Does the combination of two reliable resources always yield a reliable composite? The rules of the calculus will provide a formal answer to this question, effectively defining a logic of consistency propagation in a resource-sensitive setting.
   * Contexts with $\{A, \neg A\}$: A sequent $\vdash \Gamma, A, \neg A$ represents a state where the available resources $\Gamma$ are accompanied by conflicting evidence regarding $A$. The logic is designed to allow derivations to proceed from such a state without trivializing, unless additional information (like $\circ A$) is provided to resolve or leverage the conflict.
This interpretive framework guides the design of the sequent calculus rules presented in the next section.


Section 4: A Sequent Calculus for pLLL


We now define the proof theory of pLLL via a one-sided sequent calculus. A sequent is an expression of the form $\vdash \Gamma$, where $\Gamma$ is a finite multiset of pLLL formulas. The multiset structure implicitly accommodates the Exchange rule. The absence of implicit Weakening and Contraction is the hallmark of a linear system.


4.1 Axioms and Structural Rules


The fundamental building blocks of the calculus are the identity axiom, which asserts the fundamental duality of the logic, and the cut rule, which serves as the primary lemma mechanism. The structural rules of Weakening and Contraction are explicitly formulated but restricted to formulas marked with the $?$ modality.
Table 2: Axioms and Structural Rules of the pLLL Sequent Calculus
Rule Name
	Formulation
	Description
	Identity (Axiom)
	$\overline{\vdash A, A^\bot}$
	The fundamental axiom stating that a formula and its linear dual constitute a basic tautology.
	Cut (Rule)
	$\frac{\vdash \Gamma, A \qquad \vdash \Delta, A^\bot}{\vdash \Gamma, \Delta}$
	Allows the composition of proofs. This rule will be shown to be admissible (i.e., eliminable).
	Weakening
	$\frac{\vdash \Gamma}{\vdash \Gamma,?A}$
	A reusable formula ($?A$) can be introduced into any context.
	Contraction
	$\frac{\vdash \Gamma,?A,?A}{\vdash \Gamma,?A}$
	Two copies of a reusable formula can be contracted into one.
	The admissibility of the Cut rule is a cornerstone property of the system, ensuring its analytic nature: any provable sequent has a proof that only involves subformulas of that sequent.4 This is essential for both the coherence of the logic and its applications in proof search.


4.2 Logical Rules for Linear Connectives


The rules for the multiplicative and additive connectives are inherited directly from classical linear logic. They define how compound formulas are constructed and deconstructed in a resource-sensitive manner.
Table 3: Logical Rules for Linear Connectives in pLLL
Rule Name
	Formulation
	Description
	Tensor ($\otimes$)
	$\frac{\vdash \Gamma, A \qquad \vdash \Delta, B}{\vdash \Gamma, \Delta, A \otimes B}$
	Resources for $A$ and $B$ are combined.
	Par ($\parr$)
	$\frac{\vdash \Gamma, A, B}{\vdash \Gamma, A \parr B}$
	Resources $A$ and $B$ are placed in the same context.
	One ($1$)
	$\overline{\vdash 1}$
	The unit for $\otimes$; requires no resources.
	Bottom ($\bot$)
	$\frac{\vdash \Gamma}{\vdash \Gamma, \bot}$
	The unit for $\parr$; can be added to any context.
	With ($\&$)
	$\frac{\vdash \Gamma, A \qquad \vdash \Gamma, B}{\vdash \Gamma, A \& B}$
	The same resources $\Gamma$ must prove both $A$ and $B$.
	Plus ($\oplus_1$)
	$\frac{\vdash \Gamma, A}{\vdash \Gamma, A \oplus B}$
	Provide resources for one disjunct.
	Plus ($\oplus_2$)
	$\frac{\vdash \Gamma, B}{\vdash \Gamma, A \oplus B}$
	Provide resources for the other disjunct.
	Top ($\top$)
	$\overline{\vdash \Gamma, \top}$
	The unit for $\&$; always provable.
	Zero ($0$)
	No introduction rule.
	The unit for $\oplus$; unprovable.
	

4.3 Logical Rules for LLL Modalities


The rules for the modalities $?$, $!$, and $\S$ are adopted from Light Linear Logic. The restricted form of the Promotion rule is the key mechanism for ensuring the polytime complexity of the system.12


4.4 Logical Rules for Paraconsistent Connectives


This section presents the novel contribution of the pLLL calculus: the rules governing the paraconsistent negation $\neg$ and the consistency operator $\circ$. These rules are designed to implement the LFI philosophy within the LLL framework. The design process involves careful consideration to avoid disrupting the substructural properties and complexity bounds of the host logic.
The core of the LFI approach is to block the inference from $\{A, \neg A\}$ to an arbitrary $B$. In a one-sided calculus, this corresponds to ensuring that a context containing $A$ and $\neg A$ is not inherently trivial. Triviality is instead linked to a specific axiom involving the consistency operator. The rules for $\neg$ must define its behavior over the other connectives, as it does not participate in the De Morgan duality of linear negation. The rules for $\circ$ must define how consistency is established and how it propagates.
The formulation of gentle explosion is the most critical design choice. Rather than a complex multi-premise rule, which can be cumbersome in proof-theoretic analysis, we opt for an axiomatic approach. The Explosion Axiom $\vdash A, \neg A, (\circ A)^\bot$ elegantly captures the LFI principle. It states that the simultaneous presence of evidence for $A$, evidence against $A$, and evidence for the inconsistency of $A$ (represented by $(\circ A)^\bot$) is a fundamental logical contradiction, equivalent to the identity axiom. This allows classical reasoning to be recovered precisely when a formula is asserted to be consistent.
Table 4: Logical Rules for Modalities and Paraconsistent Operators in pLLL
Rule Name
	Formulation
	Description
	Dereliction
	$\frac{\vdash \Gamma, A}{\vdash \Gamma,?A}$
	A specific instance can be treated as reusable.
	Promotion
	$\frac{\vdash?\Gamma, A}{\vdash?\Gamma,!A}$
	(LLL Restriction) Promotion is only allowed in a fully reusable context.
	Section ($\S$)
	$\frac{\vdash \Gamma_1; \dots; \Gamma_n; \Delta, A}{\vdash [\Gamma_1]; \dots; [\Gamma_n]; \S\Delta, \S A}$
	The LLL rule for introducing $\S$, using block notation. (Simplified here for clarity).
	---
	---
	---
	$\neg$-Double Neg.
	$\frac{\vdash \Gamma, A}{\vdash \Gamma, \neg \neg A}$
	Introduces paraconsistent double negation. Note: the reverse is not a rule.
	$\neg$-Tensor
	$\frac{\vdash \Gamma, \neg A, \neg B}{\vdash \Gamma, \neg(A \parr B)}$
	A placeholder for how $\neg$ distributes. A full system would require rules for each connective.
	$\neg$-With
	$\frac{\vdash \Gamma, \neg A \qquad \vdash \Gamma, \neg B}{\vdash \Gamma, \neg(A \oplus B)}$
	Example of $\neg$ distributing over an additive.
	Consistency Intro
	$\frac{\vdash \Gamma, A \qquad \vdash \Delta, A^\bot}{\vdash \Gamma, \Delta, \circ A}$
	(Tentative) $A$ is consistent if it can be proven and refuted from disjoint resources. This rule is complex and may be replaced by specific axioms.
	Consistency Prop.
	$\frac{\vdash \Gamma, \circ A \qquad \vdash \Delta, \circ B}{\vdash \Gamma, \Delta, \circ(A \& B)}$
	Consistency propagates over additive conjunction.
	Explosion (Axiom)
	$\overline{\vdash A, \neg A, (\circ A)^\bot}$
	(Core LFI Axiom) A formula, its paraconsistent negation, and the linear negation of its consistency form a fundamental contradiction.
	The rules for $\neg$ distribution ($\neg$-Tensor, $\neg$-With) are presented as examples. A complete definition of pLLL would require a comprehensive set of such rules, defining $\neg(A \text{ op } B)$ for each connective op. The design of these rules is a delicate matter, as they must cohere with the underlying linear principles. For instance, the rule for $\neg(A \otimes B)$ might be $\vdash \Gamma, \neg A \parr \neg B / \vdash \Gamma, \neg(A \otimes B)$, reflecting the multiplicative nature of the tensor product. The Consistency Introduction rule is marked as tentative, as its properties require deep investigation; an alternative is to treat consistency as a primitive property of atomic propositions that propagates upwards via rules like Consistency Prop.. The Explosion Axiom, however, is robust and forms the cornerstone of the system's paraconsistent behavior.


Section 5: Core Structural Properties of the Calculus


The coherence and utility of a logical calculus are demonstrated by its structural properties. For pLLL, the most important of these is the admissibility of the Cut rule, which underpins the system's consistency and analytical nature.


5.1 The Cut-Elimination Theorem


Theorem (Cut-Elimination for pLLL): The Cut rule is admissible in the pLLL sequent calculus. That is, if a sequent $\vdash \Gamma$ is provable using the axioms and rules of pLLL (including the Cut rule), then it is provable without using the Cut rule.
A full proof of this theorem is beyond the scope of this report, but a sketch of the argument, following the inductive method of Gentzen and Girard, can be provided. The proof proceeds by induction on the complexity of the cut formula $A$ and the height of the derivation. The standard cases for the linear logic connectives and LLL modalities are handled as in the existing literature for LLL.12 The critical new cases involve cuts where the cut formula is introduced by one of the paraconsistent rules.
   * Case: Cut on $\neg \neg A$: If the last rules in the premises of the cut are $\neg$-Double Negation introducing $\neg \neg A$ and the Identity axiom $\vdash (\neg \neg A)^\bot, \neg \neg A$, the cut can be eliminated. If the cut formula $\neg \neg A$ is the principal formula in both premises, for instance, $\frac{\vdash \Gamma, A}{\vdash \Gamma, \neg \neg A}$ and a corresponding rule for $(\neg \neg A)^\bot$, the cut on $\neg \neg A$ can be pushed upwards to a cut on the simpler formula $A$.
   * Case: Cut on $\circ A$: The eliminability of cuts on a formula like $\circ A$ depends heavily on the final choice of its introduction rules. If $\circ A$ is introduced axiomatically or via the Consistency Prop. rules, the procedure involves commuting the cut upwards past these rules until it can be applied to the subformulas ($\circ A$ and $\circ B$ in the premises of the propagation rule).
   * Interaction with the Explosion Axiom: The Explosion Axiom $\vdash A, \neg A, (\circ A)^\bot$ does not complicate cut-elimination, as it is an initial sequent (an axiom). Any cut against a formula in this axiom simply results in the other formulas of the axiom being added to the context, which is a standard step in cut-elimination procedures.
Significance of Cut-Elimination:
The admissibility of Cut is the most fundamental property of the calculus.4 It has several profound consequences:
   1. Consistency: The empty sequent $\vdash \emptyset$ is not provable. If it were, it would have a cut-free proof. But no axiom or rule has an empty conclusion, so no cut-free proof can exist. This establishes that the logic is non-trivial.
   2. Subformula Property: Any provable sequent $\vdash \Gamma$ has a cut-free proof in which every formula is a subformula of some formula in $\Gamma$. This makes proof search decidable and systematic, as the search space is constrained.
   3. Analytic Nature: Proofs are "analytic" in the sense that they proceed by deconstructing the goal sequent into simpler components. This property is what allows the logic to be used as a foundation for automated reasoning and logic programming.23


5.2 Other Properties


   * Identity Expansion: The Identity axiom only needs to be stated for atomic formulas ($\vdash p, p^\bot$). The provability of $\vdash A, A^\bot$ for any complex formula $A$ can then be proven by induction on the structure of $A$. This demonstrates the completeness of the logical rules.
   * Decidability: While full linear logic is undecidable, the propositional fragment of LLL is decidable. The addition of the paraconsistent connectives, with their structural rules, does not introduce any principles (like unrestricted quantification or fixed-point operators) that would lead to undecidability. Therefore, propositional pLLL is expected to be decidable, though its precise complexity class (which should remain in PSPACE, like MALL, or potentially lower due to the LLL constraints) requires further analysis.


Part III: Analysis and Extensions


This final part analyzes the expressive power of pLLL, demonstrating how it models resource-sensitive paraconsistent reasoning. It also explores potential variations of the system, including an intuitionistic formulation and its relationship to other complexity-bounded logics.


Section 6: Expressing Consistency in a Resource-Sensitive Framework


The novelty of pLLL lies in its treatment of consistency not as an abstract metaphysical property but as a resource-dependent one. The provability of consistency statements and their role in derivations depend entirely on the logical rules and the resources available in the context.


6.1 The Logic of Consistency Propagation


The rules for the $\circ$ operator define an internal logic of reliability. Let us analyze the consequences of the rules proposed in Table 4. The Consistency Prop. rule for $\&$ was:


$$\frac{\vdash \Gamma, \circ A \qquad \vdash \Delta, \circ B}{\vdash \Gamma, \Delta, \circ(A \& B)}$$


This rule is multiplicative in nature; it consumes proofs of $\circ A$ and $\circ B$ from potentially disjoint resource contexts $\Gamma$ and $\Delta$ to produce a proof of $\circ(A \& B)$. In a two-sided sequent notation, this corresponds to the entailment $\circ A \otimes \circ B \vdash \circ(A \& B)$. This is a strong principle, stating that the reliability of a choice ($\&$) can be established by combining independent certificates of reliability for each option.
What about the multiplicative conjunction $\otimes$? A plausible rule would be:
$$ \frac{\vdash \Gamma, \circ A \qquad \vdash \Delta, \circ B}{\vdash \Gamma, \Delta, \circ(A \otimes B)} \quad (\circ \otimes) $$
This corresponds to $\circ A \otimes \circ B \vdash \circ(A \otimes B)$. This principle asserts that combining two independently reliable resources results in a reliable composite resource. While intuitive in many domains, this may not always be desirable. For example, in software verification, two independently stable modules might introduce a race condition when combined. The choice of which consistency propagation rules to include as axioms or inference rules is therefore a crucial modeling decision, allowing pLLL to be tailored to different application domains with different assumptions about compositionality.


6.2 Paraconsistency in Action


The primary goal of the system is to prevent explosion while allowing for controlled reasoning. Let us demonstrate how this is achieved.
Consider an inconsistent context, represented by the presence of the formulas $A$ and $\neg A$ in a sequent. For example, $\vdash A, \neg A, \Gamma$. Can we derive an arbitrary formula $B$ from this? In classical logic, the proof is trivial. In pLLL, there is no rule that allows the direct derivation of $\vdash B$ from $\vdash A, \neg A, \Gamma$. The context $\{A, \neg A\}$ is simply a collection of resources representing conflicting evidence; it is not inherently explosive.
Now, let us introduce a proof of consistency for $A$. Suppose our context is $\{A, \neg A, \circ A\}$. We can now trigger the gentle explosion principle. The derivation proceeds as follows:
   1. Premise 1: $\vdash A, \neg A, \circ A$ (The given context).
   2. Premise 2: $\vdash A, \neg A, (\circ A)^\bot$ (Instance of the Explosion Axiom).
   3. Cut on $\circ A$: Apply the Cut rule to Premise 1 (cutting on $\circ A$) and Premise 2 (cutting on $(\circ A)^\bot$). The result is:
$\vdash A, \neg A, A, \neg A$
At this point in classical or intuitionistic logic, contraction would merge the identical formulas, and the contradiction would persist. In linear logic, we simply have four resources. Without the $?$ modality, these cannot be contracted. If $A$ were a reusable formula, e.g., $?A$, then we could contract $\vdash?A, \neg?A,?A, \neg?A$ to $\vdash?A, \neg?A$.
This reveals a subtlety: the Explosion Axiom alone does not produce arbitrary formulas. It produces a contradiction that can then be used. In a classical one-sided system, a sequent $\vdash \Gamma, C, C^\bot$ can be cut with $\vdash (C \parr C^\bot)^\bot, B$ (which is provable) to derive $\vdash \Gamma, B$. The key is that the axiom $\vdash A, \neg A, (\circ A)^\bot$ makes the context $\{A, \neg A, \circ A\}$ behave like a classical contradiction, enabling the derivation of anything if the resources can be appropriately managed (e.g., via the $?$ modality). If $A$ is a purely linear resource, the contradiction $\{A, \neg A, \circ A\}$ simply consumes itself without producing anything else, a phenomenon known as "cancellation" in some resource logics. This provides a highly nuanced model of inconsistency: the consequences of a contradiction depend on the nature of the resources involved.
Table 5: Comparative Analysis of Key Derivations
Derivation / Principle
	Classical Logic
	Intuitionistic Logic
	LLL
	A Standard LFI (mbC)
	pLLL
	Explosion ($A, \neg A \vdash B$)
	Valid
	Valid
	Invalid
	Invalid
	Invalid
	Gentle Explosion ($A, \neg A, \circ A \vdash B$)
	N/A
	N/A
	N/A
	Valid
	Valid (under resource constraints)
	Excluded Middle ($\vdash A \lor \neg A$)
	Valid
	Invalid
	Invalid ($\vdash A \oplus A^\bot$ is not provable)
	Valid
	Invalid ($\vdash A \oplus \neg A$ is not provable)
	Non-Contradiction ($\vdash \neg(A \land \neg A)$)
	Valid
	Valid
	Valid ($\vdash (A \otimes A^\bot)^\bot$)
	Valid
	Valid ($\vdash (A \otimes \neg A)^\bot$ may be provable depending on $\neg$ rules)
	Contraction ($A \vdash A \otimes A$)
	Valid ($A \vdash A \land A$)
	Valid
	Invalid
	Valid
	Invalid
	Weakening ($A \otimes B \vdash A$)
	Valid ($A \land B \vdash A$)
	Valid
	Invalid
	Valid
	Invalid
	This table highlights the unique position of pLLL. It shares the substructural properties of LLL (rejecting Contraction and Weakening for linear resources) and the paraconsistent properties of LFIs (rejecting Explosion but accepting Gentle Explosion). This combination results in a logic that is more fine-grained than any of its parent systems.


Section 7: Intuitionistic and Bounded Variants


The framework developed for pLLL is modular and can be adapted to other logical contexts. Two important variations are an intuitionistic version and a port to other complexity-bounded logics.


7.1 An Intuitionistic System (pILLL)


Intuitionistic logics are characterized by their constructive nature and are often associated with the proofs-as-programs paradigm (Curry-Howard correspondence).2 In sequent calculus, intuitionistic systems are typically obtained by restricting sequents to have at most one formula on the right-hand side (the conclusion).17
We can define Paraconsistent Intuitionistic Light Linear Logic (pILLL) by applying this restriction to pLLL. This requires reformulating the entire calculus into a two-sided system with sequents of the form $\Gamma \vdash A$.
      * Rule Reformulation: Every one-sided rule $\vdash \Gamma$ must be translated. For example, the $\otimes$-rule becomes a right-introduction rule, and a new left-introduction rule must be defined:
      * $\otimes$-R: $\frac{\Gamma \vdash A \qquad \Delta \vdash B}{\Gamma, \Delta \vdash A \otimes B}$
      * $\otimes$-L: $\frac{\Gamma, A, B \vdash C}{\Gamma, A \otimes B \vdash C}$
      * Paraconsistent Rules: The rules for $\neg$ and $\circ$ must also be given left and right versions. The Explosion Axiom $\vdash A, \neg A, (\circ A)^\bot$ would become a left-rule:
      * Explosion-L: $\frac{}{\Gamma, A, \neg A, \circ A \vdash B}$ (for any $B$, with appropriate management of reusable contexts).
      * Implications: This transition has significant consequences. The perfect De Morgan duality of classical linear logic is lost.25 The connectives $\parr$ and $\bot$ are no longer definable in the same way. However, the resulting system, pILLL, gains a strong constructive interpretation. Proofs in pILLL could correspond to programs that manipulate resources, handle conflicting data, and use "consistency certificates" to perform sensitive operations. This opens up intriguing possibilities for the design of type systems for fault-tolerant and resource-aware programming languages.


7.2 Relation to Bounded Linear Logic (BLL)


Light Linear Logic is not the only substructural logic that characterizes polynomial time. Bounded Linear Logic (BLL), introduced by Girard, Taylor, and Lafont, is another such system that achieves the complexity bound through a different mechanism of modality control.26
The paraconsistent "module" developed in this report—consisting of the connectives $\neg$ and $\circ$, a set of rules for their propagation, and an axiom for gentle explosion—is largely orthogonal to the specific mechanism used to control the exponentials. It would be entirely feasible to integrate the same LFI machinery into BLL, resulting in a Paraconsistent Bounded Linear Logic (pBLL).
This demonstrates the robustness and modularity of the LFI approach to paraconsistency. The core principles of internalizing consistency and controlling explosion can be combined with various host logics.27 By combining them with substructural logics like LLL or BLL, we create systems that are not only logically sophisticated but also computationally relevant. The choice between pLLL and pBLL would depend on the specific computational phenomena one wishes to model, as LLL and BLL have different strengths in representing different types of polynomial-time algorithms.


Section 8: Conclusion and Future Directions




8.1 Summary of Contributions


This report has introduced Paraconsistent Light Linear Logic (pLLL), a novel logical system that synthesizes two major streams of non-classical logic: the resource-sensitivity of substructural logic and the inconsistency-tolerance of paraconsistent logic. The primary contribution is the formal definition of a one-sided sequent calculus for pLLL that extends Girard's Light Linear Logic with a paraconsistent negation $\neg$ and a consistency operator $\circ$.
The key features of pLLL are:
      1. Resource-Sensitive Paraconsistency: It provides a framework for reasoning with inconsistent information (interpreted as conflicting evidence) where formulas are treated as consumable resources.
      2. Controlled Explosion: It rejects the principle of explosion, avoiding triviality in the face of contradiction. Explosion is recovered in a controlled manner via the "gentle explosion" principle, triggered by an explicit assertion of consistency ($\circ A$).
      3. Polynomial-Time Complexity: By inheriting its core structure from LLL, pLLL's proof theory is intrinsically linked to polynomial-time computation. This makes it a logic of feasible inconsistency-tolerant reasoning.
      4. Proof-Theoretic Coherence: The system is shown to possess the fundamental property of cut-elimination, ensuring its logical consistency and providing a foundation for its use in automated reasoning.
By combining these features, pLLL offers a uniquely powerful tool for modeling and analyzing complex systems in computer science and artificial intelligence, where the management of both computational resources and informational conflicts is paramount.


8.2 Future Research


The development of pLLL opens up numerous avenues for future investigation. The following are among the most promising directions:
      * Denotational Semantics: A crucial next step is to develop a corresponding denotational semantics for pLLL. This would provide a mathematical model of the logic, offering deeper insights into its structure. This research would likely involve creating novel algebraic or categorical structures that combine the properties of models for linear logic (e.g., star-autonomous categories) with models for paraconsistent logics. Residuated lattices, which have been successfully used to provide algebraic semantics for paraconsistent Nelson's logic, could be a promising starting point for the algebraic approach.19
      * Computational Interpretation (Proofs-as-Programs): The intuitionistic variant, pILLL, is a prime candidate for a computational interpretation under the Curry-Howard correspondence. Developing a term calculus (a "lambda calculus") for pILLL would lead to a typed programming language with explicit mechanisms for handling resources and inconsistencies. This could form the basis for new programming paradigms for reliable, fault-tolerant systems, where types could enforce not only resource-usage protocols but also consistency checks.
      * Alternative Formulations of Consistency: The rules for consistency propagation ($\circ(A \text{ op } B)$) presented in this report represent one possible model. Future work should explore alternative rule sets to capture different intuitions about how the reliability of components affects the reliability of a system. This could lead to a family of pLLL systems, each tailored to a specific application domain (e.g., concurrent systems vs. database aggregation).
      * First-Order Extension: Extending pLLL with first-order quantifiers ($\forall$, $\exists$) is necessary for increasing its expressive power, for example, to reason about properties of data structures. The interaction between quantification, resource management, and paraconsistency would be a rich area of study, with potential applications in inconsistency-tolerant verification and logic programming.30
      * Complexity Analysis: While pLLL is founded on LLL to inherit its polytime properties, a detailed complexity analysis of the full propositional pLLL is needed to determine its precise decision complexity and the expressiveness of its fragments. This would solidify its standing as a logic for feasible computation.
In conclusion, pLLL represents a significant step towards a unified theory of reasoning that is sensitive to both logical rigor and practical computational constraints. It provides a robust foundation for the further exploration of systems that must operate effectively in a world that is both resource-bounded and informationally imperfect.
Works cited
      1. Linear Logic - Stanford Encyclopedia of Philosophy, accessed October 16, 2025, https://plato.stanford.edu/archives/fall2006/entries/logic-linear/
      2. Introduction to Linear Logic - BRICS, accessed October 16, 2025, https://www.brics.dk/LS/96/6/BRICS-LS-96-6.pdf
      3. Linear Logic - Stanford Encyclopedia of Philosophy, accessed October 16, 2025, https://plato.stanford.edu/entries/logic-linear/
      4. Linear logic - Wikipedia, accessed October 16, 2025, https://en.wikipedia.org/wiki/Linear_logic
      5. Paraconsistent logic - Wikipedia, accessed October 16, 2025, https://en.wikipedia.org/wiki/Paraconsistent_logic
      6. Paraconsistent logics find structure in our inconsistent world | Aeon Essays, accessed October 16, 2025, https://aeon.co/essays/paraconsistent-logics-find-structure-in-our-inconsistent-world
      7. Inconsistent Mathematics | Internet Encyclopedia of Philosophy, accessed October 16, 2025, https://iep.utm.edu/math-inc/
      8. Paraconsistent Logic | Internet Encyclopedia of Philosophy, accessed October 16, 2025, https://iep.utm.edu/para-log/
      9. towards a philosophical understanding of the logics of formal inconsistency - SciELO, accessed October 16, 2025, https://www.scielo.br/j/man/a/ds9M9Kpfb6F679ZMvpxxjsj/?lang=en
      10. Paraconsistent Logic - Stanford Encyclopedia of Philosophy, accessed October 16, 2025, https://plato.stanford.edu/entries/logic-paraconsistent/
      11. Linear Logic for Linguists Introductory Course, ESSLLI-00 Dick Crouch Xerox PARC, accessed October 16, 2025, https://www.ling.ohio-state.edu/~pollard/681/crouch.pdf
      12. LIGHT LINEAR LOGIC - Jean-Yves GIRARD, accessed October 16, 2025, https://girard.perso.math.cnrs.fr/LLL.pdf
      13. Combining linear logic and size types for implicit complexity - Alexis Ghyselen, accessed October 16, 2025, https://ghyselenalexis.github.io/publi/BG:TCS20.pdf
      14. Paraconsistent Logic (Stanford Encyclopedia of Philosophy/Spring 2022 Edition), accessed October 16, 2025, https://plato.stanford.edu/archives/spr2022/entries/logic-paraconsistent/
      15. Par Part 2: Linear Logic - Ryan Brewer, accessed October 16, 2025, https://ryanbrewer.dev/posts/linear-logic/
      16. Lecture Notes on Classical Linear Logic - CMU School of Computer Science, accessed October 16, 2025, https://www.cs.cmu.edu/~fp/courses/15816-f16/lectures/27-classical.pdf
      17. Intuitionistic Linear Logic - Math Stack Exchange, accessed October 16, 2025, https://math.stackexchange.com/questions/749740/intuitionistic-linear-logic
      18. Combining linear-time temporal logic with constructiveness and paraconsistency | Request PDF - ResearchGate, accessed October 16, 2025, https://www.researchgate.net/publication/222969003_Combining_linear-time_temporal_logic_with_constructiveness_and_paraconsistency
      19. Remarks on an algebraic semantics for ... - SciELO Brasil, accessed October 16, 2025, https://www.scielo.br/j/man/a/PbhD5RChdmrG3CWm4h6hnmK/?lang=en
      20. Paraconsistent Logic: A Proof-Theoretical Approach* - Dialnet, accessed October 16, 2025, https://dialnet.unirioja.es/descarga/articulo/1992382.pdf
      21. A Sequent System for LP - cle.unicamp.br, accessed October 16, 2025, https://www.cle.unicamp.br/eprints/index.php/CLE_e-Prints/article/download/949/796/1724
      22. Linear Logic Using Negative Connectives - DROPS - Schloss Dagstuhl, accessed October 16, 2025, https://drops.dagstuhl.de/entities/document/10.4230/LIPIcs.FSCD.2025.29
      23. Linear logic as a framework for specifiing sequent calculus - LIX, accessed October 16, 2025, https://www.lix.polytechnique.fr/~dale/papers/lc99.pdf
      24. An Overview of Intuitionistic and Linear Logic - ANU College of Engineering & Computer Science, accessed October 16, 2025, https://users.cecs.anu.edu.au/~tiu/teaching/comp8630/lecture1.pdf
      25. Intuitionistic linear logic - LLWiki, accessed October 16, 2025, http://llwiki.ens-lyon.fr/mediawiki/index.php/Intuitionistic_linear_logic
      26. Lambda Calculi and Logics for Quantum Computing - IRIS, accessed October 16, 2025, https://iris.univr.it/retrieve/handle/11562/337380/3210/TesiPhD-Margherita-Zorzi.pdf
      27. Combining Logics - Stanford Encyclopedia of Philosophy, accessed October 16, 2025, https://plato.stanford.edu/entries/logic-combining/
      28. Residuated Lattices as an Algebraic Semantics for Paraconsistent Nelson's Logic | Request PDF - ResearchGate, accessed October 16, 2025, https://www.researchgate.net/publication/220387994_Residuated_Lattices_as_an_Algebraic_Semantics_for_Paraconsistent_Nelson's_Logic
      29. [1803.10847] Algebraic Semantics for Nelson's Logic S - arXiv, accessed October 16, 2025, https://arxiv.org/abs/1803.10847
      30. [2502.05816] First-Order Intuitionistic Linear Logic and Hypergraph Languages - arXiv, accessed October 16, 2025, https://arxiv.org/abs/2502.05816