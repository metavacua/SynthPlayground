"""
Generates the master AGENTS.md file by synthesizing information from the
compiled system documentation, the integrated knowledge core, and the build
configuration.

This script is the final step in the build process and is responsible for
creating the primary entry point for any AI agent interacting with this
repository. It addresses the problem of "contextual blindness" by ensuring
the AGENTS.md file is not just a static list of commands, but a dynamic,
context-rich overview of the entire project's architecture, knowledge, and
capabilities.
"""

import argparse
import json
import os
import re

# --- Configuration ---
ROOT_DIR = os.path.abspath(os.path.join(os.path.dirname(__file__), ".."))

# --- Template for the master AGENTS.md ---
AGENTS_MD_TEMPLATE = """
# AGENTS.md (Dynamically Generated)

This file provides instructions for AI coding agents to interact with this project.
It is dynamically generated by the build system to be a comprehensive, up-to-date
summary of the repository's structure, knowledge, and capabilities.

**Last Generated:** {generation_date}

---

## 1. Project Overview

This is a Python-based project with a sophisticated, self-correcting agent
architecture. The agent's core protocols and knowledge are managed
programmatically and summarized below. The goal of this repository is to
facilitate the development of an AI agent that can autonomously manage,
refactor, and enhance its own codebase.

---

## 2. System Architecture Summary

This summary is automatically extracted from the detailed system documentation.
It provides a high-level overview of the key modules and their purpose.

{system_documentation_summary}

---

## 3. Knowledge Core Summary

This summary is automatically extracted from the integrated knowledge graph,
which includes lessons learned from post-mortems, formal protocol definitions,
and findings from research documents.

{knowledge_core_summary}

---

## 4. Build & Commands

The following build targets are available. They are the primary way to test,
build, and maintain this repository.

{build_commands_summary}

---

## 5. Core Directives & Protocols

The agent's behavior is governed by a set of formal protocols. A full list of
protocols can be found in the compiled `AGENTS.md` files within each module of
the `protocols/` directory. Interacting with this repository requires adhering
to these protocols.

"""


def summarize_system_documentation(doc_path: str) -> str:
    """
    Reads the full system documentation and creates a high-level summary.
    """
    if not os.path.exists(doc_path):
        return "_System documentation not found._"

    with open(doc_path, "r") as f:
        content = f.read()

    # Find all the top-level directory summaries
    directory_headers = re.findall(r"## `(.+?)` Directory", content)

    if not directory_headers:
        return "_Could not extract a summary from the system documentation._"

    summary_parts = ["The system is organized into the following key directories:"]
    for header in directory_headers:
        summary_parts.append(f"- **`{header}`**: Contains core tooling, utilities, and logic for the system.")

    summary_parts.append("\n_For a detailed breakdown of each module, class, and function, refer to the full `docs/SYSTEM_DOCUMENTATION.md`._")
    return "\n".join(summary_parts)


def summarize_knowledge_core(knowledge_path: str) -> str:
    """
    Reads the integrated knowledge graph and creates a high-level summary.
    """
    if not os.path.exists(knowledge_path):
        return "_Integrated knowledge core not found._"

    with open(knowledge_path, "r") as f:
        graph = json.load(f)

    # Simple summary by counting the number of nodes of each type
    num_lessons = 0
    num_protocols = 0
    num_rules = 0
    num_research = 0

    for node in graph:
        node_type = node.get("@type", [""])[0]
        if "Lesson" in node_type:
            num_lessons += 1
        elif "Protocol" in node_type:
            num_protocols += 1
        elif "Rule" in node_type:
            num_rules += 1
        elif "Research" in node_type:
            num_research += 1

    summary_parts = [
        "The knowledge core contains the following structured information:",
        f"- **{num_lessons}** lessons learned from past tasks.",
        f"- **{num_protocols}** formal protocols defining agent behavior.",
        f"- **{num_rules}** individual rules within those protocols.",
        f"- **{num_research}** research documents with key findings.",
        "\n_For a detailed, machine-readable view of all knowledge, refer to the `knowledge_core/integrated_knowledge.json` file._"
    ]
    return "\n".join(summary_parts)


def summarize_build_commands(config_path: str) -> str:
    """
    Reads the build configuration and creates a summary of available commands.
    """
    if not os.path.exists(config_path):
        return "_Build configuration not found._"

    with open(config_path, "r") as f:
        config = json.load(f)

    summary_parts = []
    summary_parts.append("### Build Groups\n")
    for group_name, members in config.get("build_groups", {}).items():
        summary_parts.append(f"- **`{group_name}`**: Runs the following targets: `{', '.join(members)}`")

    summary_parts.append("\n### Individual Targets\n")
    for target_name, details in config.get("targets", {}).items():
        description = details.get("description", "No description available.")
        summary_parts.append(f"- **`{target_name}`**: {description}")

    summary_parts.append("\nTo run any target or group, use the command: `python3 tooling/builder.py --target <name>`")
    return "\n".join(summary_parts)


def main():
    parser = argparse.ArgumentParser(
        description="Generates the master AGENTS.md file."
    )
    parser.add_argument(
        "--doc-file",
        required=True,
        help="Path to the SYSTEM_DOCUMENTATION.md file.",
    )
    parser.add_argument(
        "--knowledge-file",
        required=True,
        help="Path to the integrated_knowledge.json file.",
    )
    parser.add_argument(
        "--build-config",
        required=True,
        help="Path to the build_config.json file.",
    )
    parser.add_argument(
        "--output-file",
        required=True,
        help="Path to the output AGENTS.md file.",
    )
    args = parser.parse_args()

    # --- Generate Summaries ---
    doc_summary = summarize_system_documentation(args.doc_file)
    knowledge_summary = summarize_knowledge_core(args.knowledge_file)
    build_summary = summarize_build_commands(args.build_config)

    # --- Populate Template ---
    from datetime import datetime
    final_content = AGENTS_MD_TEMPLATE.format(
        generation_date=datetime.now().strftime("%Y-%m-%d %H:%M:%S UTC"),
        system_documentation_summary=doc_summary,
        knowledge_core_summary=knowledge_summary,
        build_commands_summary=build_summary,
    )

    # --- Write Output ---
    with open(args.output_file, "w") as f:
        f.write(final_content.strip())

    print(f"Successfully generated master AGENTS.md at '{args.output_file}'")


if __name__ == "__main__":
    main()
