"""
A hierarchical protocol compiler for the project.

This script discovers all protocol modules (subdirectories within `protocols/`) and
compiles each one into its own `AGENTS.md` file. It then generates a root
`AGENTS.md` that links to all the compiled modules, creating a unified,
navigable system.
"""

import argparse
import os
import json


def compile_protocol_module(module_path):
    """
    Compiles a single protocol module into an AGENTS.md file.
    """
    protocol_md_path = None
    protocol_json_path = None

    for file_name in os.listdir(module_path):
        if file_name.endswith(".protocol.md"):
            protocol_md_path = os.path.join(module_path, file_name)
        elif file_name.endswith(".protocol.json"):
            protocol_json_path = os.path.join(module_path, file_name)

    if not protocol_md_path or not protocol_json_path:
        return None  # Not a valid protocol module

    with open(protocol_md_path, "r") as f:
        md_content = f.read()

    with open(protocol_json_path, "r") as f:
        json_content = json.load(f)

    agents_md_content = f"""\
# ---
# DO NOT EDIT THIS FILE DIRECTLY.
# This file is programmatically generated by the `protocol_compiler.py` script.
# All changes to agent protocols must be made in the source files
# located in the `{os.path.basename(module_path)}/` directory.
#
# This file contains the compiled protocols in a human-readable Markdown format,
# with machine-readable JSON definitions embedded.
# ---

{md_content}

---

```json
{json.dumps(json_content, indent=2)}
```
"""

    agents_md_path = os.path.join(module_path, "AGENTS.md")
    with open(agents_md_path, "w") as f:
        f.write(agents_md_content)

    return os.path.relpath(
        agents_md_path, os.path.dirname(os.path.dirname(module_path))
    )


def main():
    """
    Main function to run the protocol compiler.
    """
    parser = argparse.ArgumentParser(
        description="Compiles protocol source files into AGENTS.md files."
    )
    parser.add_argument(
        "--source-dir",
        required=True,
        help="The root directory of the protocols.",
    )
    parser.add_argument(
        "--output-file",
        required=True,
        help="The path to the root AGENTS.md file.",
    )
    args = parser.parse_args()

    compiled_modules = []
    for dir_name in sorted(os.listdir(args.source_dir)):
        module_path = os.path.join(args.source_dir, dir_name)
        if os.path.isdir(module_path):
            compiled_path = compile_protocol_module(module_path)
            if compiled_path:
                compiled_modules.append(compiled_path)

    root_agents_md_content = """\
# AGENTS.md

This file provides instructions for AI coding agents to interact with this project.

## Project Overview

This is a Python-based project with a sophisticated, self-correcting agent architecture.

## Build & Commands

This repository uses a unified build system driven by `tooling/builder.py`. All build, test, and quality assurance commands are defined as targets in `build_config.json`.

To run a build target, use the following command:

```bash
python3 tooling/builder.py --target [TARGET_NAME]
```

To see a list of all available targets, run:

```bash
python3 tooling/builder.py --list
```

## Core Protocols

The agent's behavior is governed by a set of core protocols, which are defined in the following modules:
"""

    for module_path in compiled_modules:
        module_name = (
            os.path.basename(os.path.dirname(module_path)).replace("_", " ").title()
        )
        root_agents_md_content += f"- [{module_name}]({module_path})\n"

    with open(args.output_file, "w") as f:
        f.write(root_agents_md_content)

    print(f"Successfully compiled {len(compiled_modules)} protocol modules.")
    print(f"Root AGENTS.md generated at: {args.output_file}")


if __name__ == "__main__":
    main()
