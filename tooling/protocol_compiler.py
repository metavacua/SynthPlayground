"""
Compiles source protocol files into unified, human-readable and machine-readable artifacts.

This script is the engine behind the "protocol as code" principle. It discovers,
validates, and assembles protocol definitions from a source directory (e.g., `protocols/`)
into high-level documents like `AGENTS.md`.

Key Functions:
- **Discovery:** Scans a directory for source files, including `.protocol.json`
  (machine-readable rules) and `.protocol.md` (human-readable context).
- **Validation:** Uses a JSON schema (`protocol.schema.json`) to validate every
  `.protocol.json` file, ensuring all protocol definitions are syntactically
  correct and adhere to the established structure.
- **Compilation:** Combines the human-readable markdown and the machine-readable
  JSON into a single, cohesive Markdown file, embedding the JSON in code blocks.
- **Documentation Injection:** Can inject other generated documents, like the
  `SYSTEM_DOCUMENTATION.md`, into the final output at specified locations.
- **Knowledge Graph Generation:** Optionally, it can process the validated JSON
  protocols and serialize them into an RDF knowledge graph (in Turtle format),
  creating a machine-queryable version of the agent's governing rules.

This process ensures that `AGENTS.md` and other protocol documents are not edited
manually but are instead generated from a validated, single source of truth,
making the agent's protocols robust, verifiable, and maintainable.
"""
import os
import glob
import json
import jsonschema
import argparse
from rdflib import Graph

# --- Configuration ---
ROOT_DIR = os.path.abspath(os.path.join(os.path.dirname(__file__), ".."))
DEFAULT_PROTOCOLS_DIR = os.path.join(ROOT_DIR, "protocols")
DEFAULT_SCHEMA_FILE = os.path.join(DEFAULT_PROTOCOLS_DIR, "protocol.schema.json")
DEFAULT_TARGET_FILE = os.path.join(ROOT_DIR, "AGENTS.md")
DEFAULT_KG_FILE = os.path.join(ROOT_DIR, "knowledge_core", "protocols.ttl")
DEFAULT_AUTODOC_FILE = os.path.join(ROOT_DIR, "knowledge_core", "SYSTEM_DOCUMENTATION.md")


DISCLAIMER_TEMPLATE = """\
# ---
# DO NOT EDIT THIS FILE DIRECTLY.
# This file is programmatically generated by the `protocol_compiler.py` script.
# All changes to agent protocols must be made in the source files
# located in the `{source_dir_name}/` directory.
#
# This file contains the compiled protocols in a human-readable Markdown format,
# with machine-readable JSON definitions embedded.
# ---

"""

def load_schema(schema_file):
    """Loads the protocol JSON schema."""
    try:
        with open(schema_file, "r") as f:
            return json.load(f)
    except FileNotFoundError:
        print(f"Error: Schema file not found at {schema_file}")
        return None
    except json.JSONDecodeError:
        print(f"Error: Could not decode JSON from schema file at {schema_file}")
        return None

def compile_protocols(source_dir, target_file, schema_file, knowledge_graph_file=None, autodoc_file=None):
    """
    Reads all .protocol.json and corresponding .protocol.md files from the
    source directory, validates them, and compiles them into a target markdown file.
    Optionally, it can also generate a machine-readable knowledge graph.
    """
    output_filename = os.path.basename(target_file)
    print(f"--- Starting Protocol Compilation for {output_filename} ---")
    print(f"Source directory: {source_dir}")
    print(f"Target file: {target_file}")
    if knowledge_graph_file:
        print(f"Target Knowledge Graph file: {knowledge_graph_file}")


    schema = load_schema(schema_file)
    if not schema:
        return

    # Find all source files of different types
    protocol_files = sorted(glob.glob(os.path.join(source_dir, "*.protocol.json")))
    md_files = glob.glob(os.path.join(source_dir, "*.protocol.md"))
    autodoc_files = glob.glob(os.path.join(source_dir, "*.autodoc.md"))

    # Combine all file types into a single list and sort them numerically
    all_files = sorted(protocol_files + autodoc_files)

    if not all_files:
        print(f"Warning: No protocol or autodoc files found in {source_dir}.")
        # Create an empty file with just the disclaimer
        with open(target_file, "w") as f:
            f.write(DISCLAIMER_TEMPLATE.format(source_dir_name=os.path.basename(source_dir)))
        return


    print(f"Found {len(protocol_files)} protocol, {len(md_files)} markdown, and {len(autodoc_files)} autodoc files.")

    # Initialize RDF graph and start building content
    g = Graph()
    disclaimer = DISCLAIMER_TEMPLATE.format(source_dir_name=os.path.basename(source_dir))
    final_content = [disclaimer]

    # Process each file
    for file_path in all_files:
        base_name = os.path.basename(file_path)
        print(f"  - Processing {base_name}...")

        if file_path.endswith(".autodoc.md"):
            if autodoc_file and os.path.exists(autodoc_file):
                try:
                    with open(autodoc_file, "r") as f:
                        final_content.append(f.read())
                    print(f"    - Injected system documentation from {autodoc_file}")
                except Exception as e:
                    print(f"    - Error reading autodoc file {autodoc_file}: {e}")
            else:
                 print(f"    - Warning: System documentation file not found at {autodoc_file}")
            final_content.append("\n---\n")
            continue

        # --- Standard .protocol.json processing ---
        prefix = base_name.split("_")[0]
        matching_md = next((md for md in md_files if os.path.basename(md).startswith(prefix + "_")), None)

        if matching_md:
            print(f"    - Found corresponding markdown: {os.path.basename(matching_md)}")
            with open(matching_md, "r") as f:
                final_content.append(f.read())
        else:
            print(f"    - Warning: No corresponding markdown file found for prefix '{prefix}'.")

        # --- Validate and append JSON protocol content ---
        try:
            with open(file_path, "r") as f:
                protocol_data = json.load(f)
            jsonschema.validate(instance=protocol_data, schema=schema)
            print(f"    - JSON validation successful.")

            # --- Knowledge Graph Generation (Optional) ---
            if knowledge_graph_file:
                protocol_data_for_ld = protocol_data.copy()
                # Consistently look for the context file in the main protocols directory.
                context_path = os.path.join(DEFAULT_PROTOCOLS_DIR, "protocol.context.jsonld")
                if os.path.exists(context_path):
                    # The @context path in the JSON-LD data should be relative to the protocol file being processed.
                    relative_context_path = os.path.relpath(context_path, os.path.dirname(file_path))
                    protocol_data_for_ld["@context"] = relative_context_path

                    # The base URI should be the directory containing the protocol file, to resolve relative paths.
                    base_uri = "file://" + os.path.abspath(os.path.dirname(file_path)) + "/"
                    g.parse(data=json.dumps(protocol_data_for_ld), format="json-ld", publicID=base_uri)
                    print(f"    - Parsed {base_name} into knowledge graph.")
                else:
                    print(f"    - Warning: JSON-LD context file not found at {context_path}")


            # --- Markdown Generation ---
            json_string = json.dumps(protocol_data, indent=2)
            md_json_block = f"```json\n{json_string}\n```\n"
            final_content.append(md_json_block)
        except Exception as e:
            print(f"    - Error: Failed to process JSON for {base_name}: {e}")

        final_content.append("\n---\n")


    # --- Finalize and Write Outputs ---

    # Write the final markdown content to a temporary file for atomic replacement.
    temp_target_file = target_file + ".tmp"
    try:
        with open(temp_target_file, "w") as f:
            f.write("\n".join(final_content))

        # Atomically rename the temporary file to the final target file.
        # This prevents a race condition where the file is deleted and not yet recreated.
        os.rename(temp_target_file, target_file)
        print(f"\n--- {output_filename} Compilation Successful ---")
        print(f"Successfully generated new {output_filename} file.")

    except Exception as e:
        print(f"\n--- {output_filename} Compilation Failed ---")
        print(f"An error occurred during file write/rename: {e}")
        # Clean up the temporary file if it exists to prevent leaving artifacts.
        if os.path.exists(temp_target_file):
            os.remove(temp_target_file)

    # Write the knowledge graph if requested
    if knowledge_graph_file:
        try:
            g.serialize(destination=knowledge_graph_file, format="turtle")
            print("\n--- Knowledge Graph Compilation Successful ---")
            print(f"Successfully generated knowledge graph at {knowledge_graph_file}")
        except Exception as e:
            print(f"\n--- Knowledge Graph Compilation Failed ---")
            print(f"Error serializing RDF graph: {e}")

    print("\n--- Compilation Successful ---")
    print(f"Successfully generated new AGENTS.md file.")

def main():
    """Main function to run the compiler."""
    parser = argparse.ArgumentParser(description="Compiles protocol files into a single Markdown document and optional Knowledge Graph.")
    parser.add_argument(
        "--source-dir",
        default=DEFAULT_PROTOCOLS_DIR,
        help=f"Directory containing the protocol source files. Defaults to {DEFAULT_PROTOCOLS_DIR}"
    )
    parser.add_argument(
        "--output-file",
        default=DEFAULT_TARGET_FILE,
        help=f"Path for the output Markdown file. Defaults to {DEFAULT_TARGET_FILE}"
    )
    parser.add_argument(
        "--schema-file",
        default=DEFAULT_SCHEMA_FILE,
        help=f"Path to the JSON schema for validation. Defaults to {DEFAULT_SCHEMA_FILE}"
    )
    parser.add_argument(
        "--knowledge-graph-file",
        nargs='?', # makes it optional
        const=DEFAULT_KG_FILE, # value if flag is present but no arg
        default=None, # value if flag is not present
        help=f"If specified, generates a Turtle knowledge graph file. Defaults to {DEFAULT_KG_FILE} if flag is present."
    )
    parser.add_argument(
        "--autodoc-file",
        default=DEFAULT_AUTODOC_FILE,
        help=f"Path to the system documentation file to be injected. Defaults to {DEFAULT_AUTODOC_FILE}"
    )


    args = parser.parse_args()

    compile_protocols(
        source_dir=args.source_dir,
        target_file=args.output_file,
        schema_file=args.schema_file,
        knowledge_graph_file=args.knowledge_graph_file,
        autodoc_file=args.autodoc_file
    )

if __name__ == "__main__":
    main()