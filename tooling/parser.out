Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> formula
Rule 1     formula -> formula IMPLIES formula
Rule 2     formula -> formula WITH formula
Rule 3     formula -> formula PLUS formula
Rule 4     formula -> NOT formula
Rule 5     formula -> BANG formula
Rule 6     formula -> LPAREN formula RPAREN
Rule 7     formula -> ATOM

Terminals, with rules where they appear

ATOM                 : 7
BANG                 : 5
IMPLIES              : 1
LPAREN               : 6
NOT                  : 4
PLUS                 : 3
RPAREN               : 6
WITH                 : 2
error                :

Nonterminals, with rules where they appear

formula              : 1 1 2 2 3 3 4 5 6 0

Parsing method: LALR

state 0

    (0) S' -> . formula
    (1) formula -> . formula IMPLIES formula
    (2) formula -> . formula WITH formula
    (3) formula -> . formula PLUS formula
    (4) formula -> . NOT formula
    (5) formula -> . BANG formula
    (6) formula -> . LPAREN formula RPAREN
    (7) formula -> . ATOM

    NOT             shift and go to state 2
    BANG            shift and go to state 3
    LPAREN          shift and go to state 4
    ATOM            shift and go to state 5

    formula                        shift and go to state 1

state 1

    (0) S' -> formula .
    (1) formula -> formula . IMPLIES formula
    (2) formula -> formula . WITH formula
    (3) formula -> formula . PLUS formula

    IMPLIES         shift and go to state 6
    WITH            shift and go to state 7
    PLUS            shift and go to state 8


state 2

    (4) formula -> NOT . formula
    (1) formula -> . formula IMPLIES formula
    (2) formula -> . formula WITH formula
    (3) formula -> . formula PLUS formula
    (4) formula -> . NOT formula
    (5) formula -> . BANG formula
    (6) formula -> . LPAREN formula RPAREN
    (7) formula -> . ATOM

    NOT             shift and go to state 2
    BANG            shift and go to state 3
    LPAREN          shift and go to state 4
    ATOM            shift and go to state 5

    formula                        shift and go to state 9

state 3

    (5) formula -> BANG . formula
    (1) formula -> . formula IMPLIES formula
    (2) formula -> . formula WITH formula
    (3) formula -> . formula PLUS formula
    (4) formula -> . NOT formula
    (5) formula -> . BANG formula
    (6) formula -> . LPAREN formula RPAREN
    (7) formula -> . ATOM

    NOT             shift and go to state 2
    BANG            shift and go to state 3
    LPAREN          shift and go to state 4
    ATOM            shift and go to state 5

    formula                        shift and go to state 10

state 4

    (6) formula -> LPAREN . formula RPAREN
    (1) formula -> . formula IMPLIES formula
    (2) formula -> . formula WITH formula
    (3) formula -> . formula PLUS formula
    (4) formula -> . NOT formula
    (5) formula -> . BANG formula
    (6) formula -> . LPAREN formula RPAREN
    (7) formula -> . ATOM

    NOT             shift and go to state 2
    BANG            shift and go to state 3
    LPAREN          shift and go to state 4
    ATOM            shift and go to state 5

    formula                        shift and go to state 11

state 5

    (7) formula -> ATOM .

    IMPLIES         reduce using rule 7 (formula -> ATOM .)
    WITH            reduce using rule 7 (formula -> ATOM .)
    PLUS            reduce using rule 7 (formula -> ATOM .)
    $end            reduce using rule 7 (formula -> ATOM .)
    RPAREN          reduce using rule 7 (formula -> ATOM .)


state 6

    (1) formula -> formula IMPLIES . formula
    (1) formula -> . formula IMPLIES formula
    (2) formula -> . formula WITH formula
    (3) formula -> . formula PLUS formula
    (4) formula -> . NOT formula
    (5) formula -> . BANG formula
    (6) formula -> . LPAREN formula RPAREN
    (7) formula -> . ATOM

    NOT             shift and go to state 2
    BANG            shift and go to state 3
    LPAREN          shift and go to state 4
    ATOM            shift and go to state 5

    formula                        shift and go to state 12

state 7

    (2) formula -> formula WITH . formula
    (1) formula -> . formula IMPLIES formula
    (2) formula -> . formula WITH formula
    (3) formula -> . formula PLUS formula
    (4) formula -> . NOT formula
    (5) formula -> . BANG formula
    (6) formula -> . LPAREN formula RPAREN
    (7) formula -> . ATOM

    NOT             shift and go to state 2
    BANG            shift and go to state 3
    LPAREN          shift and go to state 4
    ATOM            shift and go to state 5

    formula                        shift and go to state 13

state 8

    (3) formula -> formula PLUS . formula
    (1) formula -> . formula IMPLIES formula
    (2) formula -> . formula WITH formula
    (3) formula -> . formula PLUS formula
    (4) formula -> . NOT formula
    (5) formula -> . BANG formula
    (6) formula -> . LPAREN formula RPAREN
    (7) formula -> . ATOM

    NOT             shift and go to state 2
    BANG            shift and go to state 3
    LPAREN          shift and go to state 4
    ATOM            shift and go to state 5

    formula                        shift and go to state 14

state 9

    (4) formula -> NOT formula .
    (1) formula -> formula . IMPLIES formula
    (2) formula -> formula . WITH formula
    (3) formula -> formula . PLUS formula

    IMPLIES         reduce using rule 4 (formula -> NOT formula .)
    WITH            reduce using rule 4 (formula -> NOT formula .)
    PLUS            reduce using rule 4 (formula -> NOT formula .)
    $end            reduce using rule 4 (formula -> NOT formula .)
    RPAREN          reduce using rule 4 (formula -> NOT formula .)

  ! IMPLIES         [ shift and go to state 6 ]
  ! WITH            [ shift and go to state 7 ]
  ! PLUS            [ shift and go to state 8 ]


state 10

    (5) formula -> BANG formula .
    (1) formula -> formula . IMPLIES formula
    (2) formula -> formula . WITH formula
    (3) formula -> formula . PLUS formula

    IMPLIES         reduce using rule 5 (formula -> BANG formula .)
    WITH            reduce using rule 5 (formula -> BANG formula .)
    PLUS            reduce using rule 5 (formula -> BANG formula .)
    $end            reduce using rule 5 (formula -> BANG formula .)
    RPAREN          reduce using rule 5 (formula -> BANG formula .)

  ! IMPLIES         [ shift and go to state 6 ]
  ! WITH            [ shift and go to state 7 ]
  ! PLUS            [ shift and go to state 8 ]


state 11

    (6) formula -> LPAREN formula . RPAREN
    (1) formula -> formula . IMPLIES formula
    (2) formula -> formula . WITH formula
    (3) formula -> formula . PLUS formula

    RPAREN          shift and go to state 15
    IMPLIES         shift and go to state 6
    WITH            shift and go to state 7
    PLUS            shift and go to state 8


state 12

    (1) formula -> formula IMPLIES formula .
    (1) formula -> formula . IMPLIES formula
    (2) formula -> formula . WITH formula
    (3) formula -> formula . PLUS formula

    $end            reduce using rule 1 (formula -> formula IMPLIES formula .)
    RPAREN          reduce using rule 1 (formula -> formula IMPLIES formula .)
    IMPLIES         shift and go to state 6
    WITH            shift and go to state 7
    PLUS            shift and go to state 8

  ! IMPLIES         [ reduce using rule 1 (formula -> formula IMPLIES formula .) ]
  ! WITH            [ reduce using rule 1 (formula -> formula IMPLIES formula .) ]
  ! PLUS            [ reduce using rule 1 (formula -> formula IMPLIES formula .) ]


state 13

    (2) formula -> formula WITH formula .
    (1) formula -> formula . IMPLIES formula
    (2) formula -> formula . WITH formula
    (3) formula -> formula . PLUS formula

    IMPLIES         reduce using rule 2 (formula -> formula WITH formula .)
    WITH            reduce using rule 2 (formula -> formula WITH formula .)
    PLUS            reduce using rule 2 (formula -> formula WITH formula .)
    $end            reduce using rule 2 (formula -> formula WITH formula .)
    RPAREN          reduce using rule 2 (formula -> formula WITH formula .)

  ! IMPLIES         [ shift and go to state 6 ]
  ! WITH            [ shift and go to state 7 ]
  ! PLUS            [ shift and go to state 8 ]


state 14

    (3) formula -> formula PLUS formula .
    (1) formula -> formula . IMPLIES formula
    (2) formula -> formula . WITH formula
    (3) formula -> formula . PLUS formula

    IMPLIES         reduce using rule 3 (formula -> formula PLUS formula .)
    PLUS            reduce using rule 3 (formula -> formula PLUS formula .)
    $end            reduce using rule 3 (formula -> formula PLUS formula .)
    RPAREN          reduce using rule 3 (formula -> formula PLUS formula .)
    WITH            shift and go to state 7

  ! WITH            [ reduce using rule 3 (formula -> formula PLUS formula .) ]
  ! IMPLIES         [ shift and go to state 6 ]
  ! PLUS            [ shift and go to state 8 ]


state 15

    (6) formula -> LPAREN formula RPAREN .

    IMPLIES         reduce using rule 6 (formula -> LPAREN formula RPAREN .)
    WITH            reduce using rule 6 (formula -> LPAREN formula RPAREN .)
    PLUS            reduce using rule 6 (formula -> LPAREN formula RPAREN .)
    $end            reduce using rule 6 (formula -> LPAREN formula RPAREN .)
    RPAREN          reduce using rule 6 (formula -> LPAREN formula RPAREN .)
