import unittest
import os
import json
import shutil
from tooling.protocol_compiler import compile_single_module, load_schema
import jsonschema

class TestProtocolCompiler(unittest.TestCase):

    def setUp(self):
        self.test_dir = "test_protocol_compiler_dir"
        self.source_dir = os.path.join(self.test_dir, "protocols")
        self.output_dir = os.path.join(self.test_dir, "output")
        os.makedirs(self.source_dir, exist_ok=True)
        os.makedirs(self.output_dir, exist_ok=True)

        self.schema_path = os.path.join(self.source_dir, "protocol.schema.json")
        with open(self.schema_path, "w") as f:
            json.dump({
                "type": "object",
                "properties": {
                    "protocol_id": {"type": "string"},
                    "description": {"type": "string"},
                    "rules": {"type": "array"}
                },
                "required": ["protocol_id", "description", "rules"]
            }, f)

    def tearDown(self):
        shutil.rmtree(self.test_dir)

    def test_successful_compilation(self):
        """Tests that valid protocols are compiled correctly."""
        with open(os.path.join(self.source_dir, "p1.protocol.json"), "w") as f:
            json.dump({"protocol_id": "TEST-001", "description": "First test protocol.", "rules": []}, f)
        with open(os.path.join(self.source_dir, "p1.protocol.md"), "w") as f:
            f.write("# Protocol 1\nThis is the first protocol.")

        target_file = os.path.join(self.output_dir, "AGENTS.md")
        compile_single_module(
            source_dir=self.source_dir,
            target_file=target_file,
            schema_file=self.schema_path,
        )

        self.assertTrue(os.path.exists(target_file))
        with open(target_file, "r") as f:
            content = f.read()
        self.assertIn("DO NOT EDIT THIS FILE DIRECTLY", content)
        self.assertIn("# Protocol 1", content)
        self.assertIn("TEST-001", content)

    def test_validation_error(self):
        """Tests that the compiler raises a validation error for invalid JSON."""
        with open(os.path.join(self.source_dir, "invalid.protocol.json"), "w") as f:
            json.dump({"protocol_id": "INVALID-001"}, f)

        target_file = os.path.join(self.output_dir, "AGENTS.md")
        with self.assertRaises(jsonschema.ValidationError):
            compile_single_module(
                source_dir=self.source_dir,
                target_file=target_file,
                schema_file=self.schema_path
            )

if __name__ == "__main__":
    unittest.main()