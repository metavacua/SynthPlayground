"""
A command-line tool to analyze the complexity of formal language recognition.

This tool takes a grammar file and an input string, determines the grammar type,
and then uses the appropriate recognition algorithm from the `language_theory.recognizer`
module to determine if the string can be generated by the grammar.

It prints a report containing the recognition result and complexity metrics,
which serve as a practical implementation of a Blum-axiomatic complexity measure.
"""
import argparse
import sys
import json
from language_theory.recognizer import parse_grammar, recognize_right_linear, recognize_earley, reverse_grammar

def main():
    """Main function to run the complexity analyzer."""
    parser = argparse.ArgumentParser(
        description="Analyze the time and space complexity of recognizing a string with a given grammar."
    )
    parser.add_argument("grammar_file", help="Path to the grammar file.")
    parser.add_argument("input_string", help="The string to recognize.")
    parser.add_argument("--start-symbol", default="S", help="The start symbol of the grammar (default: S).")
    parser.add_argument("--json", action="store_true", help="Output results in JSON format.")
    args = parser.parse_args()

    try:
        grammar = parse_grammar(args.grammar_file)

        # Heuristics to determine grammar type
        raw_grammar_text = open(args.grammar_file).read()
        is_indexed = '[' in raw_grammar_text and ']' in raw_grammar_text
        is_csg = any(' ' in non_terminal for non_terminal in grammar.keys())
        is_right_reg = all(len(r) <= 2 and (len(r) < 2 or r[1].isupper()) for rules in grammar.values() for r in rules) and not is_csg
        is_left_reg = all(len(r) <= 2 and (len(r) < 2 or r[0].isupper()) for rules in grammar.values() for r in rules) and not is_csg

        result = {}
        grammar_type = "Unknown"
        recognized = False
        metrics = {}

        if is_indexed:
            grammar_type = "Intermediate"
            print("Recognition of intermediate grammars is not implemented.", file=sys.stderr)
        elif is_csg:
            grammar_type = "Context-Sensitive"
            print("Recognition of context-sensitive languages is not implemented.", file=sys.stderr)
        elif is_right_reg and not is_left_reg:
            grammar_type = "Right-Linear"
            recognized, metrics = recognize_right_linear(grammar, args.start_symbol, args.input_string, verbose=False)
        elif is_left_reg and not is_right_reg:
            grammar_type = "Left-Linear"
            reversed_grammar = reverse_grammar(grammar)
            reversed_string = args.input_string[::-1]
            recognized, metrics = recognize_right_linear(reversed_grammar, args.start_symbol, reversed_string, verbose=False)
        else:
            grammar_type = "Context-Free"
            recognized, metrics = recognize_earley(grammar, args.start_symbol, args.input_string, verbose=False)

        result = {
            "grammar_file": args.grammar_file,
            "input_string": args.input_string,
            "grammar_type": grammar_type,
            "recognized": recognized,
            "metrics": metrics,
        }

        if args.json:
            print(json.dumps(result, indent=2))
        else:
            print(f"--- Complexity Analysis Report ---")
            print(f"Grammar:      {result['grammar_file']}")
            print(f"Input String: '{result['input_string']}'")
            print(f"Grammar Type: {result['grammar_type']}")
            print(f"Recognized:   {result['recognized']}")
            if result['metrics']:
                print(f"Time Complexity (ops): {result['metrics']['time_complexity']}")
                print(f"Space Complexity (units): {result['metrics']['space_complexity']}")
            print(f"------------------------------------")


    except FileNotFoundError:
        print(f"Error: Grammar file not found at {args.grammar_file}", file=sys.stderr)
        sys.exit(1)
    except ValueError as e:
        print(f"Error parsing grammar file: {e}", file=sys.stderr)
        sys.exit(1)

if __name__ == "__main__":
    main()