{
  "symbols": [
    {
      "_type": "tag",
      "name": "TestTypeChecker",
      "path": "./test_type_checker.py",
      "language": "Python",
      "line": 29,
      "kind": "class",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "test_literals",
      "path": "./test_type_checker.py",
      "language": "Python",
      "line": 30,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "test_var_unrestricted",
      "path": "./test_type_checker.py",
      "language": "Python",
      "line": 36,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "test_var_linear",
      "path": "./test_type_checker.py",
      "language": "Python",
      "line": 40,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "test_var_not_found",
      "path": "./test_type_checker.py",
      "language": "Python",
      "line": 44,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "test_fun",
      "path": "./test_type_checker.py",
      "language": "Python",
      "line": 48,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "test_fun_unrestricted",
      "path": "./test_type_checker.py",
      "language": "Python",
      "line": 53,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "test_app",
      "path": "./test_type_checker.py",
      "language": "Python",
      "line": 58,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "test_app_type_mismatch",
      "path": "./test_type_checker.py",
      "language": "Python",
      "line": 64,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "test_pair",
      "path": "./test_type_checker.py",
      "language": "Python",
      "line": 71,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "test_let_pair",
      "path": "./test_type_checker.py",
      "language": "Python",
      "line": 75,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "test_inl_inr",
      "path": "./test_type_checker.py",
      "language": "Python",
      "line": 80,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "test_case",
      "path": "./test_type_checker.py",
      "language": "Python",
      "line": 84,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "test_case_type_mismatch",
      "path": "./test_type_checker.py",
      "language": "Python",
      "line": 88,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "test_promote",
      "path": "./test_type_checker.py",
      "language": "Python",
      "line": 93,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "test_promote_linear_error",
      "path": "./test_type_checker.py",
      "language": "Python",
      "line": 96,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "test_let_bang",
      "path": "./test_type_checker.py",
      "language": "Python",
      "line": 100,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "test_unused_linear_variable",
      "path": "./test_type_checker.py",
      "language": "Python",
      "line": 104,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "InterpError",
      "path": "./interpreter.py",
      "language": "Python",
      "line": 32,
      "kind": "class",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "Closure",
      "path": "./interpreter.py",
      "language": "Python",
      "line": 36,
      "kind": "class",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "_appl_to_python",
      "path": "./interpreter.py",
      "language": "Python",
      "line": 42,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "_appl_list_to_python_list",
      "path": "./interpreter.py",
      "language": "Python",
      "line": 54,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "_python_list_to_appl_list",
      "path": "./interpreter.py",
      "language": "Python",
      "line": 61,
      "kind": "function",
      "docstring": "Converts a Python list of strings to an APPL list of strings."
    },
    {
      "_type": "tag",
      "name": "Primitive",
      "path": "./interpreter.py",
      "language": "Python",
      "line": 69,
      "kind": "class",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "Interpreter",
      "path": "./interpreter.py",
      "language": "Python",
      "line": 85,
      "kind": "class",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "_unparse",
      "path": "./interpreter.py",
      "language": "Python",
      "line": 179,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "interpret",
      "path": "./interpreter.py",
      "language": "Python",
      "line": 184,
      "kind": "function",
      "docstring": "Interprets the given term in the provided environment."
    },
    {
      "_type": "tag",
      "name": "__init__",
      "path": "./interpreter.py",
      "language": "Python",
      "line": 37,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "__init__",
      "path": "./interpreter.py",
      "language": "Python",
      "line": 70,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "apply",
      "path": "./interpreter.py",
      "language": "Python",
      "line": 75,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "__init__",
      "path": "./interpreter.py",
      "language": "Python",
      "line": 86,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "interpret",
      "path": "./interpreter.py",
      "language": "Python",
      "line": 89,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "TInt",
      "path": "./appl_ast.py",
      "language": "Python",
      "line": 3,
      "kind": "class",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "TString",
      "path": "./appl_ast.py",
      "language": "Python",
      "line": 9,
      "kind": "class",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "TBool",
      "path": "./appl_ast.py",
      "language": "Python",
      "line": 15,
      "kind": "class",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "TState",
      "path": "./appl_ast.py",
      "language": "Python",
      "line": 21,
      "kind": "class",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "TAction",
      "path": "./appl_ast.py",
      "language": "Python",
      "line": 27,
      "kind": "class",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "TGoal",
      "path": "./appl_ast.py",
      "language": "Python",
      "line": 33,
      "kind": "class",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "TUnit",
      "path": "./appl_ast.py",
      "language": "Python",
      "line": 39,
      "kind": "class",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "TList",
      "path": "./appl_ast.py",
      "language": "Python",
      "line": 45,
      "kind": "class",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "TTerm",
      "path": "./appl_ast.py",
      "language": "Python",
      "line": 53,
      "kind": "class",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "TProd",
      "path": "./appl_ast.py",
      "language": "Python",
      "line": 59,
      "kind": "class",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "TSum",
      "path": "./appl_ast.py",
      "language": "Python",
      "line": 68,
      "kind": "class",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "TFun",
      "path": "./appl_ast.py",
      "language": "Python",
      "line": 77,
      "kind": "class",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "TExponential",
      "path": "./appl_ast.py",
      "language": "Python",
      "line": 86,
      "kind": "class",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "Var",
      "path": "./appl_ast.py",
      "language": "Python",
      "line": 96,
      "kind": "class",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "Int",
      "path": "./appl_ast.py",
      "language": "Python",
      "line": 104,
      "kind": "class",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "String",
      "path": "./appl_ast.py",
      "language": "Python",
      "line": 112,
      "kind": "class",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "Bool",
      "path": "./appl_ast.py",
      "language": "Python",
      "line": 120,
      "kind": "class",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "App",
      "path": "./appl_ast.py",
      "language": "Python",
      "line": 128,
      "kind": "class",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "Fun",
      "path": "./appl_ast.py",
      "language": "Python",
      "line": 137,
      "kind": "class",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "Pair",
      "path": "./appl_ast.py",
      "language": "Python",
      "line": 147,
      "kind": "class",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "Let",
      "path": "./appl_ast.py",
      "language": "Python",
      "line": 156,
      "kind": "class",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "LetPair",
      "path": "./appl_ast.py",
      "language": "Python",
      "line": 166,
      "kind": "class",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "Inl",
      "path": "./appl_ast.py",
      "language": "Python",
      "line": 177,
      "kind": "class",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "Inr",
      "path": "./appl_ast.py",
      "language": "Python",
      "line": 186,
      "kind": "class",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "Case",
      "path": "./appl_ast.py",
      "language": "Python",
      "line": 195,
      "kind": "class",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "Promote",
      "path": "./appl_ast.py",
      "language": "Python",
      "line": 207,
      "kind": "class",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "LetBang",
      "path": "./appl_ast.py",
      "language": "Python",
      "line": 215,
      "kind": "class",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "Unit",
      "path": "./appl_ast.py",
      "language": "Python",
      "line": 225,
      "kind": "class",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "Nil",
      "path": "./appl_ast.py",
      "language": "Python",
      "line": 231,
      "kind": "class",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "Cons",
      "path": "./appl_ast.py",
      "language": "Python",
      "line": 239,
      "kind": "class",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "AST",
      "path": "./appl_ast.py",
      "language": "Python",
      "line": 248,
      "kind": "class",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "__repr__",
      "path": "./appl_ast.py",
      "language": "Python",
      "line": 4,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "__eq__",
      "path": "./appl_ast.py",
      "language": "Python",
      "line": 6,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "__repr__",
      "path": "./appl_ast.py",
      "language": "Python",
      "line": 10,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "__eq__",
      "path": "./appl_ast.py",
      "language": "Python",
      "line": 12,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "__repr__",
      "path": "./appl_ast.py",
      "language": "Python",
      "line": 16,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "__eq__",
      "path": "./appl_ast.py",
      "language": "Python",
      "line": 18,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "__repr__",
      "path": "./appl_ast.py",
      "language": "Python",
      "line": 22,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "__eq__",
      "path": "./appl_ast.py",
      "language": "Python",
      "line": 24,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "__repr__",
      "path": "./appl_ast.py",
      "language": "Python",
      "line": 28,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "__eq__",
      "path": "./appl_ast.py",
      "language": "Python",
      "line": 30,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "__repr__",
      "path": "./appl_ast.py",
      "language": "Python",
      "line": 34,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "__eq__",
      "path": "./appl_ast.py",
      "language": "Python",
      "line": 36,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "__repr__",
      "path": "./appl_ast.py",
      "language": "Python",
      "line": 40,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "__eq__",
      "path": "./appl_ast.py",
      "language": "Python",
      "line": 42,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "__init__",
      "path": "./appl_ast.py",
      "language": "Python",
      "line": 46,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "__repr__",
      "path": "./appl_ast.py",
      "language": "Python",
      "line": 48,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "__eq__",
      "path": "./appl_ast.py",
      "language": "Python",
      "line": 50,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "__repr__",
      "path": "./appl_ast.py",
      "language": "Python",
      "line": 54,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "__eq__",
      "path": "./appl_ast.py",
      "language": "Python",
      "line": 56,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "__init__",
      "path": "./appl_ast.py",
      "language": "Python",
      "line": 60,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "__repr__",
      "path": "./appl_ast.py",
      "language": "Python",
      "line": 63,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "__eq__",
      "path": "./appl_ast.py",
      "language": "Python",
      "line": 65,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "__init__",
      "path": "./appl_ast.py",
      "language": "Python",
      "line": 69,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "__repr__",
      "path": "./appl_ast.py",
      "language": "Python",
      "line": 72,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "__eq__",
      "path": "./appl_ast.py",
      "language": "Python",
      "line": 74,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "__init__",
      "path": "./appl_ast.py",
      "language": "Python",
      "line": 78,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "__repr__",
      "path": "./appl_ast.py",
      "language": "Python",
      "line": 81,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "__eq__",
      "path": "./appl_ast.py",
      "language": "Python",
      "line": 83,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "__init__",
      "path": "./appl_ast.py",
      "language": "Python",
      "line": 87,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "__repr__",
      "path": "./appl_ast.py",
      "language": "Python",
      "line": 89,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "__eq__",
      "path": "./appl_ast.py",
      "language": "Python",
      "line": 91,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "__init__",
      "path": "./appl_ast.py",
      "language": "Python",
      "line": 97,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "__repr__",
      "path": "./appl_ast.py",
      "language": "Python",
      "line": 99,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "__eq__",
      "path": "./appl_ast.py",
      "language": "Python",
      "line": 101,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "__init__",
      "path": "./appl_ast.py",
      "language": "Python",
      "line": 105,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "__repr__",
      "path": "./appl_ast.py",
      "language": "Python",
      "line": 107,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "__eq__",
      "path": "./appl_ast.py",
      "language": "Python",
      "line": 109,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "__init__",
      "path": "./appl_ast.py",
      "language": "Python",
      "line": 113,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "__repr__",
      "path": "./appl_ast.py",
      "language": "Python",
      "line": 115,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "__eq__",
      "path": "./appl_ast.py",
      "language": "Python",
      "line": 117,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "__init__",
      "path": "./appl_ast.py",
      "language": "Python",
      "line": 121,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "__repr__",
      "path": "./appl_ast.py",
      "language": "Python",
      "line": 123,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "__eq__",
      "path": "./appl_ast.py",
      "language": "Python",
      "line": 125,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "__init__",
      "path": "./appl_ast.py",
      "language": "Python",
      "line": 129,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "__repr__",
      "path": "./appl_ast.py",
      "language": "Python",
      "line": 132,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "__eq__",
      "path": "./appl_ast.py",
      "language": "Python",
      "line": 134,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "__init__",
      "path": "./appl_ast.py",
      "language": "Python",
      "line": 138,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "__repr__",
      "path": "./appl_ast.py",
      "language": "Python",
      "line": 142,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "__eq__",
      "path": "./appl_ast.py",
      "language": "Python",
      "line": 144,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "__init__",
      "path": "./appl_ast.py",
      "language": "Python",
      "line": 148,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "__repr__",
      "path": "./appl_ast.py",
      "language": "Python",
      "line": 151,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "__eq__",
      "path": "./appl_ast.py",
      "language": "Python",
      "line": 153,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "__init__",
      "path": "./appl_ast.py",
      "language": "Python",
      "line": 157,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "__repr__",
      "path": "./appl_ast.py",
      "language": "Python",
      "line": 161,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "__eq__",
      "path": "./appl_ast.py",
      "language": "Python",
      "line": 163,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "__init__",
      "path": "./appl_ast.py",
      "language": "Python",
      "line": 167,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "__repr__",
      "path": "./appl_ast.py",
      "language": "Python",
      "line": 172,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "__eq__",
      "path": "./appl_ast.py",
      "language": "Python",
      "line": 174,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "__init__",
      "path": "./appl_ast.py",
      "language": "Python",
      "line": 178,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "__repr__",
      "path": "./appl_ast.py",
      "language": "Python",
      "line": 181,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "__eq__",
      "path": "./appl_ast.py",
      "language": "Python",
      "line": 183,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "__init__",
      "path": "./appl_ast.py",
      "language": "Python",
      "line": 187,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "__repr__",
      "path": "./appl_ast.py",
      "language": "Python",
      "line": 190,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "__eq__",
      "path": "./appl_ast.py",
      "language": "Python",
      "line": 192,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "__init__",
      "path": "./appl_ast.py",
      "language": "Python",
      "line": 196,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "__repr__",
      "path": "./appl_ast.py",
      "language": "Python",
      "line": 202,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "__eq__",
      "path": "./appl_ast.py",
      "language": "Python",
      "line": 204,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "__init__",
      "path": "./appl_ast.py",
      "language": "Python",
      "line": 208,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "__repr__",
      "path": "./appl_ast.py",
      "language": "Python",
      "line": 210,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "__eq__",
      "path": "./appl_ast.py",
      "language": "Python",
      "line": 212,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "__init__",
      "path": "./appl_ast.py",
      "language": "Python",
      "line": 216,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "__repr__",
      "path": "./appl_ast.py",
      "language": "Python",
      "line": 220,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "__eq__",
      "path": "./appl_ast.py",
      "language": "Python",
      "line": 222,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "__repr__",
      "path": "./appl_ast.py",
      "language": "Python",
      "line": 226,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "__eq__",
      "path": "./appl_ast.py",
      "language": "Python",
      "line": 228,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "__init__",
      "path": "./appl_ast.py",
      "language": "Python",
      "line": 232,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "__repr__",
      "path": "./appl_ast.py",
      "language": "Python",
      "line": 234,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "__eq__",
      "path": "./appl_ast.py",
      "language": "Python",
      "line": 236,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "__init__",
      "path": "./appl_ast.py",
      "language": "Python",
      "line": 240,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "__repr__",
      "path": "./appl_ast.py",
      "language": "Python",
      "line": 243,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "__eq__",
      "path": "./appl_ast.py",
      "language": "Python",
      "line": 245,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "__init__",
      "path": "./appl_ast.py",
      "language": "Python",
      "line": 249,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "__repr__",
      "path": "./appl_ast.py",
      "language": "Python",
      "line": 251,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "__eq__",
      "path": "./appl_ast.py",
      "language": "Python",
      "line": 253,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "main",
      "path": "./demonstrate_lfi_halting.py",
      "language": "Python",
      "line": 4,
      "kind": "function",
      "docstring": "Runs the Paraconsistent Halting Decider on a UDC plan and reports\nthe findings in a human-readable format."
    },
    {
      "_type": "tag",
      "name": "TestParser",
      "path": "./test_parser.py",
      "language": "Python",
      "line": 25,
      "kind": "class",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "test_literals",
      "path": "./test_parser.py",
      "language": "Python",
      "line": 27,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "test_var",
      "path": "./test_parser.py",
      "language": "Python",
      "line": 32,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "test_fun",
      "path": "./test_parser.py",
      "language": "Python",
      "line": 35,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "test_app",
      "path": "./test_parser.py",
      "language": "Python",
      "line": 38,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "test_pair",
      "path": "./test_parser.py",
      "language": "Python",
      "line": 43,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "test_let_pair",
      "path": "./test_parser.py",
      "language": "Python",
      "line": 46,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "test_inl_inr",
      "path": "./test_parser.py",
      "language": "Python",
      "line": 49,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "test_case",
      "path": "./test_parser.py",
      "language": "Python",
      "line": 53,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "test_promote",
      "path": "./test_parser.py",
      "language": "Python",
      "line": 56,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "test_let_bang",
      "path": "./test_parser.py",
      "language": "Python",
      "line": 59,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "test_complex_expression",
      "path": "./test_parser.py",
      "language": "Python",
      "line": 62,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "test_parse_error",
      "path": "./test_parser.py",
      "language": "Python",
      "line": 82,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "test_unit",
      "path": "./test_parser.py",
      "language": "Python",
      "line": 86,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "test_nil",
      "path": "./test_parser.py",
      "language": "Python",
      "line": 89,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "test_cons",
      "path": "./test_parser.py",
      "language": "Python",
      "line": 92,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "PlanningError",
      "path": "./planning.py",
      "language": "Python",
      "line": 15,
      "kind": "class",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "load_domain",
      "path": "./planning.py",
      "language": "Python",
      "line": 18,
      "kind": "function",
      "docstring": "Loads an AAL domain from a file."
    },
    {
      "_type": "tag",
      "name": "create_state",
      "path": "./planning.py",
      "language": "Python",
      "line": 30,
      "kind": "function",
      "docstring": "Initializes the current world state from a list of fluent names."
    },
    {
      "_type": "tag",
      "name": "apply_action",
      "path": "./planning.py",
      "language": "Python",
      "line": 45,
      "kind": "function",
      "docstring": "Applies an action to the current state using the AAL interpreter\nand updates the current state."
    },
    {
      "_type": "tag",
      "name": "is_goal",
      "path": "./planning.py",
      "language": "Python",
      "line": 66,
      "kind": "function",
      "docstring": "Checks if the current state satisfies a set of goal conditions."
    },
    {
      "_type": "tag",
      "name": "get_current_state",
      "path": "./planning.py",
      "language": "Python",
      "line": 74,
      "kind": "function",
      "docstring": "Returns the names of the fluents in the current state."
    },
    {
      "_type": "tag",
      "name": "main",
      "path": "./aura.py",
      "language": "Python",
      "line": 7,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "Parser",
      "path": "./parser.py",
      "language": "Python",
      "line": 4,
      "kind": "class",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "parse",
      "path": "./parser.py",
      "language": "Python",
      "line": 223,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "__init__",
      "path": "./parser.py",
      "language": "Python",
      "line": 5,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "peek",
      "path": "./parser.py",
      "language": "Python",
      "line": 9,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "consume",
      "path": "./parser.py",
      "language": "Python",
      "line": 14,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "parse_atom",
      "path": "./parser.py",
      "language": "Python",
      "line": 25,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "parse_app",
      "path": "./parser.py",
      "language": "Python",
      "line": 73,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "parse_expr",
      "path": "./parser.py",
      "language": "Python",
      "line": 84,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "parse_cons",
      "path": "./parser.py",
      "language": "Python",
      "line": 172,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "parse_type",
      "path": "./parser.py",
      "language": "Python",
      "line": 180,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "TestInterpreter",
      "path": "./test_interpreter.py",
      "language": "Python",
      "line": 28,
      "kind": "class",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "setUp",
      "path": "./test_interpreter.py",
      "language": "Python",
      "line": 29,
      "kind": "function",
      "docstring": "Create a dummy AAL file for testing."
    },
    {
      "_type": "tag",
      "name": "tearDown",
      "path": "./test_interpreter.py",
      "language": "Python",
      "line": 38,
      "kind": "function",
      "docstring": "Clean up the dummy AAL file."
    },
    {
      "_type": "tag",
      "name": "test_literals",
      "path": "./test_interpreter.py",
      "language": "Python",
      "line": 43,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "test_var",
      "path": "./test_interpreter.py",
      "language": "Python",
      "line": 49,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "test_var_not_found",
      "path": "./test_interpreter.py",
      "language": "Python",
      "line": 53,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "test_fun",
      "path": "./test_interpreter.py",
      "language": "Python",
      "line": 57,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "test_app",
      "path": "./test_interpreter.py",
      "language": "Python",
      "line": 62,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "test_app_non_function",
      "path": "./test_interpreter.py",
      "language": "Python",
      "line": 68,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "test_pair",
      "path": "./test_interpreter.py",
      "language": "Python",
      "line": 74,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "test_let_pair",
      "path": "./test_interpreter.py",
      "language": "Python",
      "line": 78,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "test_inl_inr",
      "path": "./test_interpreter.py",
      "language": "Python",
      "line": 82,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "test_case",
      "path": "./test_interpreter.py",
      "language": "Python",
      "line": 86,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "test_promote",
      "path": "./test_interpreter.py",
      "language": "Python",
      "line": 90,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "test_let_bang",
      "path": "./test_interpreter.py",
      "language": "Python",
      "line": 93,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "test_list",
      "path": "./test_interpreter.py",
      "language": "Python",
      "line": 97,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "test_aal_integration",
      "path": "./test_interpreter.py",
      "language": "Python",
      "line": 101,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "test_homoiconicity",
      "path": "./test_interpreter.py",
      "language": "Python",
      "line": 116,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "TypeCheckError",
      "path": "./type_checker.py",
      "language": "Python",
      "line": 4,
      "kind": "class",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "TypeChecker",
      "path": "./type_checker.py",
      "language": "Python",
      "line": 7,
      "kind": "class",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "type_check",
      "path": "./type_checker.py",
      "language": "Python",
      "line": 124,
      "kind": "function",
      "docstring": "Type-checks the given term in the provided contexts."
    },
    {
      "_type": "tag",
      "name": "__init__",
      "path": "./type_checker.py",
      "language": "Python",
      "line": 8,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "type_check",
      "path": "./type_checker.py",
      "language": "Python",
      "line": 14,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "TestAuraExecutor",
      "path": "./tests/test_aura_executor.py",
      "language": "Python",
      "line": 6,
      "kind": "class",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "test_integration_demo_end_to_end_subprocess",
      "path": "./tests/test_aura_executor.py",
      "language": "Python",
      "line": 8,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "TestAuraInterpreter",
      "path": "./tests/test_aura_interpreter.py",
      "language": "Python",
      "line": 4,
      "kind": "class",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "_eval",
      "path": "./tests/test_aura_interpreter.py",
      "language": "Python",
      "line": 6,
      "kind": "function",
      "docstring": "Helper function to parse and evaluate Aura code."
    },
    {
      "_type": "tag",
      "name": "test_integer_literals",
      "path": "./tests/test_aura_interpreter.py",
      "language": "Python",
      "line": 15,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "test_string_literals",
      "path": "./tests/test_aura_interpreter.py",
      "language": "Python",
      "line": 20,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "test_let_statements",
      "path": "./tests/test_aura_interpreter.py",
      "language": "Python",
      "line": 25,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "test_infix_expressions",
      "path": "./tests/test_aura_interpreter.py",
      "language": "Python",
      "line": 30,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "test_if_statements",
      "path": "./tests/test_aura_interpreter.py",
      "language": "Python",
      "line": 45,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "test_function_definition_and_call",
      "path": "./tests/test_aura_interpreter.py",
      "language": "Python",
      "line": 53,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "test_len_builtin",
      "path": "./tests/test_aura_interpreter.py",
      "language": "Python",
      "line": 81,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "TestProtocolEnforcement",
      "path": "./tests/test_protocol_enforcement.py",
      "language": "Python",
      "line": 14,
      "kind": "class",
      "docstring": "Tests the enforcement of critical, system-wide protocols."
    },
    {
      "_type": "tag",
      "name": "setUp",
      "path": "./tests/test_protocol_enforcement.py",
      "language": "Python",
      "line": 19,
      "kind": "function",
      "docstring": "Set up common objects for the tests."
    },
    {
      "_type": "tag",
      "name": "test_reset_all_prohibition_protocol",
      "path": "./tests/test_protocol_enforcement.py",
      "language": "Python",
      "line": 26,
      "kind": "function",
      "docstring": "Verify that the 'reset-all-prohibition-001' protocol is enforced.\n\nThis test checks that the MasterControl orchestrator's planning phase\nwill identify a call to the forbidden `reset_all` tool within a plan\nand will refuse to validate it. This is a direct test of a critical,\nhard-coded safety protocol."
    },
    {
      "_type": "tag",
      "name": "TestFilesystemLister",
      "path": "./tests/test_filesystem_lister.py",
      "language": "Python",
      "line": 11,
      "kind": "class",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "setUp",
      "path": "./tests/test_filesystem_lister.py",
      "language": "Python",
      "line": 13,
      "kind": "function",
      "docstring": "Set up a temporary directory structure for testing."
    },
    {
      "_type": "tag",
      "name": "tearDown",
      "path": "./tests/test_filesystem_lister.py",
      "language": "Python",
      "line": 23,
      "kind": "function",
      "docstring": "Clean up the temporary directory."
    },
    {
      "_type": "tag",
      "name": "test_lists_all_items",
      "path": "./tests/test_filesystem_lister.py",
      "language": "Python",
      "line": 28,
      "kind": "function",
      "docstring": "Verify that all files and directories are listed correctly."
    },
    {
      "_type": "tag",
      "name": "TestHdlProver",
      "path": "./tests/test_hdl_prover.py",
      "language": "Python",
      "line": 11,
      "kind": "class",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "test_provable_axiom",
      "path": "./tests/test_hdl_prover.py",
      "language": "Python",
      "line": 14,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "test_provable_modus_ponens",
      "path": "./tests/test_hdl_prover.py",
      "language": "Python",
      "line": 18,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "test_unprovable",
      "path": "./tests/test_hdl_prover.py",
      "language": "Python",
      "line": 22,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "run_tests",
      "path": "./tests/protocols/test_runner.py",
      "language": "Python",
      "line": 4,
      "kind": "function",
      "docstring": "Discovers and runs all protocol tests."
    },
    {
      "_type": "tag",
      "name": "TestSelfImprovementProtocol",
      "path": "./tests/protocols/test_self_improvement_protocol_001.py",
      "language": "Python",
      "line": 5,
      "kind": "class",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "setUp",
      "path": "./tests/protocols/test_self_improvement_protocol_001.py",
      "language": "Python",
      "line": 7,
      "kind": "function",
      "docstring": "Load the self-improvement protocol from the JSON file."
    },
    {
      "_type": "tag",
      "name": "test_protocol_id",
      "path": "./tests/protocols/test_self_improvement_protocol_001.py",
      "language": "Python",
      "line": 15,
      "kind": "function",
      "docstring": "Test that the protocol has the correct ID."
    },
    {
      "_type": "tag",
      "name": "test_rules_exist",
      "path": "./tests/protocols/test_self_improvement_protocol_001.py",
      "language": "Python",
      "line": 21,
      "kind": "function",
      "docstring": "Test that the protocol has the expected number of rules."
    },
    {
      "_type": "tag",
      "name": "test_associated_tool_exists",
      "path": "./tests/protocols/test_self_improvement_protocol_001.py",
      "language": "Python",
      "line": 27,
      "kind": "function",
      "docstring": "Test that the associated tool exists in the tooling directory."
    },
    {
      "_type": "tag",
      "name": "Logger",
      "path": "./utils/logger.py",
      "language": "Python",
      "line": 36,
      "kind": "class",
      "docstring": "A class to handle structured logging to a JSONL file, validated against a schema."
    },
    {
      "_type": "tag",
      "name": "__init__",
      "path": "./utils/logger.py",
      "language": "Python",
      "line": 41,
      "kind": "function",
      "docstring": "Initializes the Logger, loading the schema and setting up the session.\n\nArgs:\n    schema_path (str): The path to the Markdown file containing the logging schema.\n    log_path (str): The path to the log file to be written."
    },
    {
      "_type": "tag",
      "name": "_load_schema",
      "path": "./utils/logger.py",
      "language": "Python",
      "line": 57,
      "kind": "function",
      "docstring": "Loads the JSON schema from the specified Markdown file.\n\nIt assumes the schema is in a JSON code block.\n\nArgs:\n    schema_path (str): The path to the Markdown file containing the schema.\n\nReturns:\n    dict: The loaded JSON schema."
    },
    {
      "_type": "tag",
      "name": "log",
      "path": "./utils/logger.py",
      "language": "Python",
      "line": 83,
      "kind": "function",
      "docstring": "Constructs, validates, and writes a log entry.\n\nArgs:\n    phase (str): The current protocol phase (e.g., \"Phase 7\").\n    task_id (str): The ID of the current task.\n    plan_step (int): The current plan step number.\n    action_type (str): The type of action (e.g., \"TOOL_EXEC\").\n    action_details (dict): Details specific to the action.\n    outcome_status (str): The outcome of the action (\"SUCCESS\", \"FAILURE\").\n    outcome_message (str, optional): A message describing the outcome. Defaults to \"\".\n    error_details (dict, optional): Structured error info if the outcome is a failure. Defaults to None.\n    evidence (str, optional): Citation for the action. Defaults to \"\".\n    context (dict, optional): The agent's internal context. Defaults to None.\n\nRaises:\n    ValidationError: If the generated log entry does not conform to the schema."
    },
    {
      "_type": "tag",
      "name": "get_logs",
      "path": "./utils/logger.py",
      "language": "Python",
      "line": 140,
      "kind": "function",
      "docstring": "Retrieves all log entries for the current session.\n\nReturns:\n    list: A list of log entries for the current session."
    },
    {
      "_type": "tag",
      "name": "TestFileSystemUtils",
      "path": "./utils/test_file_system_utils.py",
      "language": "Python",
      "line": 13,
      "kind": "class",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "setUp",
      "path": "./utils/test_file_system_utils.py",
      "language": "Python",
      "line": 15,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "tearDown",
      "path": "./utils/test_file_system_utils.py",
      "language": "Python",
      "line": 36,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "test_find_files",
      "path": "./utils/test_file_system_utils.py",
      "language": "Python",
      "line": 40,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "TestLogger",
      "path": "./utils/test_logger.py",
      "language": "Python",
      "line": 28,
      "kind": "class",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "setUp",
      "path": "./utils/test_logger.py",
      "language": "Python",
      "line": 30,
      "kind": "function",
      "docstring": "Set up a temporary environment for each test."
    },
    {
      "_type": "tag",
      "name": "tearDown",
      "path": "./utils/test_logger.py",
      "language": "Python",
      "line": 92,
      "kind": "function",
      "docstring": "Clean up the temporary environment after each test."
    },
    {
      "_type": "tag",
      "name": "test_log_success_with_correct_schema",
      "path": "./utils/test_logger.py",
      "language": "Python",
      "line": 97,
      "kind": "function",
      "docstring": "Test that a valid log entry is written successfully with the correct schema."
    },
    {
      "_type": "tag",
      "name": "test_log_failure_with_incorrect_schema_data",
      "path": "./utils/test_logger.py",
      "language": "Python",
      "line": 114,
      "kind": "function",
      "docstring": "Test that logging fails when data violates the v1.1 schema."
    },
    {
      "_type": "tag",
      "name": "get_ignore_patterns",
      "path": "./utils/file_system_utils.py",
      "language": "Python",
      "line": 27,
      "kind": "function",
      "docstring": "Loads ignore patterns from the .julesignore file in the specified base directory.\nReturns two sets of patterns: one for directories and one for files."
    },
    {
      "_type": "tag",
      "name": "find_files",
      "path": "./utils/file_system_utils.py",
      "language": "Python",
      "line": 52,
      "kind": "function",
      "docstring": "Finds all files matching a given pattern, respecting the .julesignore file.\nCan perform both recursive and non-recursive searches."
    },
    {
      "_type": "tag",
      "name": "find_protocol_dirs",
      "path": "./utils/file_system_utils.py",
      "language": "Python",
      "line": 86,
      "kind": "function",
      "docstring": "Finds all directories within the root_dir that contain at least one\n`.protocol.json` or `.protocol.md` file, indicating they are protocol modules."
    },
    {
      "_type": "tag",
      "name": "get_protocol_dir_name",
      "path": "./utils/file_system_utils.py",
      "language": "Python",
      "line": 100,
      "kind": "function",
      "docstring": "Returns a human-readable name for a protocol directory.\nIf it's the root protocols directory, it returns 'root'.\nOtherwise, it returns the directory's base name."
    },
    {
      "_type": "tag",
      "name": "GeminiApiClient",
      "path": "./utils/gemini_api/client.py",
      "language": "Python",
      "line": 4,
      "kind": "class",
      "docstring": "A client for interacting with the Gemini API."
    },
    {
      "_type": "tag",
      "name": "__init__",
      "path": "./utils/gemini_api/client.py",
      "language": "Python",
      "line": 7,
      "kind": "function",
      "docstring": "Initializes the Gemini API client.\nArgs:\n    api_key: The API key for the Gemini API. If not provided, it will be\n        read from the GEMINI_API_KEY environment variable."
    },
    {
      "_type": "tag",
      "name": "generate_text",
      "path": "./utils/gemini_api/client.py",
      "language": "Python",
      "line": 20,
      "kind": "function",
      "docstring": "Generates text using the Gemini API.\nArgs:\n    prompt: The prompt to use for text generation.\nReturns:\n    The generated text."
    },
    {
      "_type": "tag",
      "name": "process_document",
      "path": "./utils/gemini_api/client.py",
      "language": "Python",
      "line": 30,
      "kind": "function",
      "docstring": "Processes a document using the Gemini API.\nArgs:\n    document_path: The path to the document to process.\n    prompt: The prompt to use for document processing.\nReturns:\n    The processed document content."
    },
    {
      "_type": "tag",
      "name": "main",
      "path": "./tooling/message_user.py",
      "language": "Python",
      "line": 17,
      "kind": "function",
      "docstring": "Prints the first command-line argument to simulate a user message."
    },
    {
      "_type": "tag",
      "name": "TestLogFailure",
      "path": "./tooling/test_log_failure.py",
      "language": "Python",
      "line": 9,
      "kind": "class",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "setUp",
      "path": "./tooling/test_log_failure.py",
      "language": "Python",
      "line": 11,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "tearDown",
      "path": "./tooling/test_log_failure.py",
      "language": "Python",
      "line": 26,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "test_log_catastrophic_failure",
      "path": "./tooling/test_log_failure.py",
      "language": "Python",
      "line": 30,
      "kind": "function",
      "docstring": "Tests that the catastrophic failure is logged correctly."
    },
    {
      "_type": "tag",
      "name": "mock_init",
      "path": "./tooling/test_log_failure.py",
      "language": "Python",
      "line": 17,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "scan_documents",
      "path": "./tooling/document_scanner.py",
      "language": "Python",
      "line": 30,
      "kind": "function",
      "docstring": "Scans a directory for PDF, Markdown, and text files and extracts their content."
    },
    {
      "_type": "tag",
      "name": "plan_deep_research",
      "path": "./tooling/research_planner.py",
      "language": "Python",
      "line": 10,
      "kind": "function",
      "docstring": "Generates a multi-step, FSM-compliant plan for conducting deep research\nusing the official project templates.\n\nArgs:\n    topic (str): The research topic.\n    research_id (str): A unique ID for this research task.\n\nReturns:\n    str: A string containing the executable plan."
    },
    {
      "_type": "tag",
      "name": "find_files",
      "path": "./tooling/build_utils.py",
      "language": "Python",
      "line": 8,
      "kind": "function",
      "docstring": "Finds files matching a pattern in a directory."
    },
    {
      "_type": "tag",
      "name": "load_schema",
      "path": "./tooling/build_utils.py",
      "language": "Python",
      "line": 25,
      "kind": "function",
      "docstring": "Loads the JSON schema from a file."
    },
    {
      "_type": "tag",
      "name": "sanitize_markdown",
      "path": "./tooling/build_utils.py",
      "language": "Python",
      "line": 41,
      "kind": "function",
      "docstring": "Removes potentially unsafe constructs from Markdown."
    },
    {
      "_type": "tag",
      "name": "execute_code",
      "path": "./tooling/build_utils.py",
      "language": "Python",
      "line": 56,
      "kind": "function",
      "docstring": "Executes a block of Python code in a controlled environment."
    },
    {
      "_type": "tag",
      "name": "TestContextAwarenessScanner",
      "path": "./tooling/test_context_awareness_scanner.py",
      "language": "Python",
      "line": 14,
      "kind": "class",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "setUp",
      "path": "./tooling/test_context_awareness_scanner.py",
      "language": "Python",
      "line": 16,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "tearDown",
      "path": "./tooling/test_context_awareness_scanner.py",
      "language": "Python",
      "line": 30,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "test_get_defined_symbols",
      "path": "./tooling/test_context_awareness_scanner.py",
      "language": "Python",
      "line": 36,
      "kind": "function",
      "docstring": "Tests the extraction of defined functions and classes."
    },
    {
      "_type": "tag",
      "name": "test_get_imported_symbols",
      "path": "./tooling/test_context_awareness_scanner.py",
      "language": "Python",
      "line": 43,
      "kind": "function",
      "docstring": "Tests the extraction of imported symbols."
    },
    {
      "_type": "tag",
      "name": "test_find_references",
      "path": "./tooling/test_context_awareness_scanner.py",
      "language": "Python",
      "line": 50,
      "kind": "function",
      "docstring": "Tests finding references to a symbol."
    },
    {
      "_type": "tag",
      "name": "test_main_report_generation",
      "path": "./tooling/test_context_awareness_scanner.py",
      "language": "Python",
      "line": 66,
      "kind": "function",
      "docstring": "Tests that the main function generates a correct JSON report."
    },
    {
      "_type": "tag",
      "name": "Instruction",
      "path": "./tooling/halting_heuristic_analyzer.py",
      "language": "Python",
      "line": 28,
      "kind": "class",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "Loop",
      "path": "./tooling/halting_heuristic_analyzer.py",
      "language": "Python",
      "line": 37,
      "kind": "class",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "HaltingHeuristicAnalyzer",
      "path": "./tooling/halting_heuristic_analyzer.py",
      "language": "Python",
      "line": 45,
      "kind": "class",
      "docstring": "Performs static analysis on a UDC plan to provide a heuristic-based\nestimate of its likelihood to terminate."
    },
    {
      "_type": "tag",
      "name": "main",
      "path": "./tooling/halting_heuristic_analyzer.py",
      "language": "Python",
      "line": 255,
      "kind": "function",
      "docstring": "Main entry point for the command-line tool."
    },
    {
      "_type": "tag",
      "name": "__init__",
      "path": "./tooling/halting_heuristic_analyzer.py",
      "language": "Python",
      "line": 51,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "analyze",
      "path": "./tooling/halting_heuristic_analyzer.py",
      "language": "Python",
      "line": 56,
      "kind": "function",
      "docstring": "Runs the full analysis pipeline and returns a report."
    },
    {
      "_type": "tag",
      "name": "_parse_plan",
      "path": "./tooling/halting_heuristic_analyzer.py",
      "language": "Python",
      "line": 94,
      "kind": "function",
      "docstring": "Parses the .udc file into instructions and builds a label map.\nLabels point to the index of the *next* instruction in the list."
    },
    {
      "_type": "tag",
      "name": "_detect_loops",
      "path": "./tooling/halting_heuristic_analyzer.py",
      "language": "Python",
      "line": 124,
      "kind": "function",
      "docstring": "Detects loops by finding backward jumps."
    },
    {
      "_type": "tag",
      "name": "_analyze_loop",
      "path": "./tooling/halting_heuristic_analyzer.py",
      "language": "Python",
      "line": 152,
      "kind": "function",
      "docstring": "Analyzes a single loop to determine its termination risk.\nThis is the heuristic core of the analyzer."
    },
    {
      "_type": "tag",
      "name": "_generate_report",
      "path": "./tooling/halting_heuristic_analyzer.py",
      "language": "Python",
      "line": 236,
      "kind": "function",
      "docstring": "Formats the analysis results into a JSON-compatible dictionary."
    },
    {
      "_type": "tag",
      "name": "create_protocol",
      "path": "./tooling/protocol_manager.py",
      "language": "Python",
      "line": 14,
      "kind": "function",
      "docstring": "Creates a new protocol from a template."
    },
    {
      "_type": "tag",
      "name": "run_tests",
      "path": "./tooling/protocol_manager.py",
      "language": "Python",
      "line": 40,
      "kind": "function",
      "docstring": "Runs the protocol tests."
    },
    {
      "_type": "tag",
      "name": "main",
      "path": "./tooling/protocol_manager.py",
      "language": "Python",
      "line": 47,
      "kind": "function",
      "docstring": "Main function for the protocol manager."
    },
    {
      "_type": "tag",
      "name": "update_version",
      "path": "./tooling/protocol_manager.py",
      "language": "Python",
      "line": 81,
      "kind": "function",
      "docstring": "Updates the version of a protocol."
    },
    {
      "_type": "tag",
      "name": "TestNewResearchPlanner",
      "path": "./tooling/test_research_planner.py",
      "language": "Python",
      "line": 7,
      "kind": "class",
      "docstring": "Tests for the refactored, FSM-compliant research planner that uses templates."
    },
    {
      "_type": "tag",
      "name": "setUp",
      "path": "./tooling/test_research_planner.py",
      "language": "Python",
      "line": 12,
      "kind": "function",
      "docstring": "Create dummy template files for testing."
    },
    {
      "_type": "tag",
      "name": "tearDown",
      "path": "./tooling/test_research_planner.py",
      "language": "Python",
      "line": 27,
      "kind": "function",
      "docstring": "Remove dummy template files."
    },
    {
      "_type": "tag",
      "name": "test_plan_deep_research_uses_templates_correctly",
      "path": "./tooling/test_research_planner.py",
      "language": "Python",
      "line": 37,
      "kind": "function",
      "docstring": "Verify that plan_deep_research generates a plan that correctly\npopulates and creates files from the templates."
    },
    {
      "_type": "tag",
      "name": "TestPlllUInterpreter",
      "path": "./tooling/test_plllu_interpreter.py",
      "language": "Python",
      "line": 16,
      "kind": "class",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "setUp",
      "path": "./tooling/test_plllu_interpreter.py",
      "language": "Python",
      "line": 18,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "test_atom_consumption",
      "path": "./tooling/test_plllu_interpreter.py",
      "language": "Python",
      "line": 21,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "test_unary_operators",
      "path": "./tooling/test_plllu_interpreter.py",
      "language": "Python",
      "line": 28,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "test_additive_conjunction_shared_resource",
      "path": "./tooling/test_plllu_interpreter.py",
      "language": "Python",
      "line": 39,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "test_additive_conjunction_different_resources",
      "path": "./tooling/test_plllu_interpreter.py",
      "language": "Python",
      "line": 51,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "test_paraconsistency_with_shared_resource",
      "path": "./tooling/test_plllu_interpreter.py",
      "language": "Python",
      "line": 65,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "test_implication_precondition",
      "path": "./tooling/test_plllu_interpreter.py",
      "language": "Python",
      "line": 77,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "test_modalities_are_transparent_and_linear",
      "path": "./tooling/test_plllu_interpreter.py",
      "language": "Python",
      "line": 100,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "TestAuraExecutor",
      "path": "./tooling/test_aura_executor.py",
      "language": "Python",
      "line": 8,
      "kind": "class",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "setUp",
      "path": "./tooling/test_aura_executor.py",
      "language": "Python",
      "line": 10,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "tearDown",
      "path": "./tooling/test_aura_executor.py",
      "language": "Python",
      "line": 20,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "test_successful_execution",
      "path": "./tooling/test_aura_executor.py",
      "language": "Python",
      "line": 33,
      "kind": "function",
      "docstring": "Tests that a valid Aura script executes successfully."
    },
    {
      "_type": "tag",
      "name": "test_file_not_found",
      "path": "./tooling/test_aura_executor.py",
      "language": "Python",
      "line": 53,
      "kind": "function",
      "docstring": "Tests that the executor exits gracefully if the file is not found."
    },
    {
      "_type": "tag",
      "name": "test_parser_error",
      "path": "./tooling/test_aura_executor.py",
      "language": "Python",
      "line": 61,
      "kind": "function",
      "docstring": "Tests that the executor exits on a parser error."
    },
    {
      "_type": "tag",
      "name": "TestBuilder",
      "path": "./tooling/test_builder.py",
      "language": "Python",
      "line": 9,
      "kind": "class",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "setUp",
      "path": "./tooling/test_builder.py",
      "language": "Python",
      "line": 11,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "tearDown",
      "path": "./tooling/test_builder.py",
      "language": "Python",
      "line": 43,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "test_execute_compiler_target",
      "path": "./tooling/test_builder.py",
      "language": "Python",
      "line": 47,
      "kind": "function",
      "docstring": "Tests execution of a compiler target."
    },
    {
      "_type": "tag",
      "name": "test_execute_command_target",
      "path": "./tooling/test_builder.py",
      "language": "Python",
      "line": 63,
      "kind": "function",
      "docstring": "Tests execution of a command target."
    },
    {
      "_type": "tag",
      "name": "test_build_group_execution",
      "path": "./tooling/test_builder.py",
      "language": "Python",
      "line": 76,
      "kind": "function",
      "docstring": "Tests that a build group executes its targets in order."
    },
    {
      "_type": "tag",
      "name": "test_invalid_target",
      "path": "./tooling/test_builder.py",
      "language": "Python",
      "line": 84,
      "kind": "function",
      "docstring": "Tests that the builder exits on an invalid target name."
    },
    {
      "_type": "tag",
      "name": "generate_suggestion_plan",
      "path": "./tooling/code_suggester.py",
      "language": "Python",
      "line": 26,
      "kind": "function",
      "docstring": "Generates a temporary, single-step plan file to apply a code change.\n\nArgs:\n    filepath: The path to the file that needs to be modified.\n    diff_content: The git-style merge diff block to be applied.\n\nReturns:\n    The path to the generated temporary plan file."
    },
    {
      "_type": "tag",
      "name": "main",
      "path": "./tooling/code_suggester.py",
      "language": "Python",
      "line": 50,
      "kind": "function",
      "docstring": "Main entry point for the code suggester tool.\nParses arguments, generates a plan, and prints the plan's path to stdout."
    },
    {
      "_type": "tag",
      "name": "perform_research",
      "path": "./tooling/background_researcher.py",
      "language": "Python",
      "line": 12,
      "kind": "function",
      "docstring": "Simulates a research task and writes the result to a file."
    },
    {
      "_type": "tag",
      "name": "probe_filesystem",
      "path": "./tooling/environmental_probe.py",
      "language": "Python",
      "line": 29,
      "kind": "function",
      "docstring": "Tests file system write/read/delete capabilities and measures latency."
    },
    {
      "_type": "tag",
      "name": "probe_network",
      "path": "./tooling/environmental_probe.py",
      "language": "Python",
      "line": 65,
      "kind": "function",
      "docstring": "Tests network connectivity and measures latency to a reliable external endpoint."
    },
    {
      "_type": "tag",
      "name": "probe_environment_variables",
      "path": "./tooling/environmental_probe.py",
      "language": "Python",
      "line": 100,
      "kind": "function",
      "docstring": "Checks for the presence of a common environment variable."
    },
    {
      "_type": "tag",
      "name": "main",
      "path": "./tooling/environmental_probe.py",
      "language": "Python",
      "line": 111,
      "kind": "function",
      "docstring": "Runs all environmental probes and prints a summary report."
    },
    {
      "_type": "tag",
      "name": "TestBackgroundResearcher",
      "path": "./tooling/test_background_researcher.py",
      "language": "Python",
      "line": 8,
      "kind": "class",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "setUp",
      "path": "./tooling/test_background_researcher.py",
      "language": "Python",
      "line": 10,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "tearDown",
      "path": "./tooling/test_background_researcher.py",
      "language": "Python",
      "line": 16,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "test_perform_research",
      "path": "./tooling/test_background_researcher.py",
      "language": "Python",
      "line": 22,
      "kind": "function",
      "docstring": "Tests that the research script writes the correct result file."
    },
    {
      "_type": "tag",
      "name": "TestDocumentScanner",
      "path": "./tooling/test_document_scanner.py",
      "language": "Python",
      "line": 8,
      "kind": "class",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "setUp",
      "path": "./tooling/test_document_scanner.py",
      "language": "Python",
      "line": 10,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "tearDown",
      "path": "./tooling/test_document_scanner.py",
      "language": "Python",
      "line": 25,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "test_scan_md_and_txt_files",
      "path": "./tooling/test_document_scanner.py",
      "language": "Python",
      "line": 29,
      "kind": "function",
      "docstring": "Tests that the scanner correctly reads .md and .txt files."
    },
    {
      "_type": "tag",
      "name": "test_scan_pdf_file",
      "path": "./tooling/test_document_scanner.py",
      "language": "Python",
      "line": 38,
      "kind": "function",
      "docstring": "Tests that the scanner correctly reads .pdf files."
    },
    {
      "_type": "tag",
      "name": "test_read_error_handling",
      "path": "./tooling/test_document_scanner.py",
      "language": "Python",
      "line": 52,
      "kind": "function",
      "docstring": "Tests that the scanner handles file read errors gracefully."
    },
    {
      "_type": "tag",
      "name": "create_proposal",
      "path": "./tooling/self_improvement_cli.py",
      "language": "Python",
      "line": 54,
      "kind": "function",
      "docstring": "Creates a new, structured proposal for self-improvement."
    },
    {
      "_type": "tag",
      "name": "main",
      "path": "./tooling/self_improvement_cli.py",
      "language": "Python",
      "line": 76,
      "kind": "function",
      "docstring": "Main function to run the self-improvement proposal generator."
    },
    {
      "_type": "tag",
      "name": "get_defined_symbols",
      "path": "./tooling/context_awareness_scanner.py",
      "language": "Python",
      "line": 36,
      "kind": "function",
      "docstring": "Parses a Python file to find all defined functions and classes."
    },
    {
      "_type": "tag",
      "name": "get_imported_symbols",
      "path": "./tooling/context_awareness_scanner.py",
      "language": "Python",
      "line": 53,
      "kind": "function",
      "docstring": "Parses a Python file to find all imported modules and symbols."
    },
    {
      "_type": "tag",
      "name": "find_references",
      "path": "./tooling/context_awareness_scanner.py",
      "language": "Python",
      "line": 79,
      "kind": "function",
      "docstring": "Finds all files in a directory that reference a given symbol."
    },
    {
      "_type": "tag",
      "name": "main",
      "path": "./tooling/context_awareness_scanner.py",
      "language": "Python",
      "line": 94,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "Command",
      "path": "./tooling/plan_parser.py",
      "language": "Python",
      "line": 15,
      "kind": "class",
      "docstring": "Represents a single, parsed command from a plan.\nThis structure correctly handles multi-line arguments for tools."
    },
    {
      "_type": "tag",
      "name": "parse_plan",
      "path": "./tooling/plan_parser.py",
      "language": "Python",
      "line": 25,
      "kind": "function",
      "docstring": "Parses the raw text of a plan into a list of Command objects.\nThis parser correctly handles multi-line arguments, comments, and the '---' separator."
    },
    {
      "_type": "tag",
      "name": "execute_research_protocol",
      "path": "./tooling/research.py",
      "language": "Python",
      "line": 18,
      "kind": "function",
      "docstring": "Executes a research task based on a provided constraints dictionary.\n\nArgs:\n    constraints (dict): A dictionary specifying the research target,\n                        scope, and other parameters.\n\nReturns:\n    str: The result of the research action, or an error message."
    },
    {
      "_type": "tag",
      "name": "TestCsdcCli",
      "path": "./tooling/test_csdc_cli.py",
      "language": "Python",
      "line": 8,
      "kind": "class",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "setUp",
      "path": "./tooling/test_csdc_cli.py",
      "language": "Python",
      "line": 10,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "tearDown",
      "path": "./tooling/test_csdc_cli.py",
      "language": "Python",
      "line": 17,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "test_successful_validation",
      "path": "./tooling/test_csdc_cli.py",
      "language": "Python",
      "line": 22,
      "kind": "function",
      "docstring": "Tests successful validation for a compliant plan."
    },
    {
      "_type": "tag",
      "name": "test_complexity_mismatch",
      "path": "./tooling/test_csdc_cli.py",
      "language": "Python",
      "line": 44,
      "kind": "function",
      "docstring": "Tests that the CLI exits on a complexity mismatch."
    },
    {
      "_type": "tag",
      "name": "test_model_validation_failure",
      "path": "./tooling/test_csdc_cli.py",
      "language": "Python",
      "line": 65,
      "kind": "function",
      "docstring": "Tests that the CLI exits on a model validation failure."
    },
    {
      "_type": "tag",
      "name": "test_file_not_found",
      "path": "./tooling/test_csdc_cli.py",
      "language": "Python",
      "line": 81,
      "kind": "function",
      "docstring": "Tests that the CLI exits if the plan file is not found."
    },
    {
      "_type": "tag",
      "name": "TestUnifiedAuditor",
      "path": "./tooling/test_auditor.py",
      "language": "Python",
      "line": 8,
      "kind": "class",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "setUp",
      "path": "./tooling/test_auditor.py",
      "language": "Python",
      "line": 10,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "tearDown",
      "path": "./tooling/test_auditor.py",
      "language": "Python",
      "line": 28,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "test_protocol_audit",
      "path": "./tooling/test_auditor.py",
      "language": "Python",
      "line": 40,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "test_plan_registry_audit",
      "path": "./tooling/test_auditor.py",
      "language": "Python",
      "line": 63,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "test_doc_audit",
      "path": "./tooling/test_auditor.py",
      "language": "Python",
      "line": 80,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "run_in_bash_session",
      "path": "./tooling/bash_runner.py",
      "language": "Python",
      "line": 4,
      "kind": "function",
      "docstring": "Runs the given bash command in the sandbox."
    },
    {
      "_type": "tag",
      "name": "TestFdcCli",
      "path": "./tooling/test_fdc_cli.py",
      "language": "Python",
      "line": 9,
      "kind": "class",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "setUp",
      "path": "./tooling/test_fdc_cli.py",
      "language": "Python",
      "line": 11,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "tearDown",
      "path": "./tooling/test_fdc_cli.py",
      "language": "Python",
      "line": 31,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "test_start_command",
      "path": "./tooling/test_fdc_cli.py",
      "language": "Python",
      "line": 35,
      "kind": "function",
      "docstring": "Tests the 'start' command."
    },
    {
      "_type": "tag",
      "name": "test_close_command",
      "path": "./tooling/test_fdc_cli.py",
      "language": "Python",
      "line": 44,
      "kind": "function",
      "docstring": "Tests the 'close' command."
    },
    {
      "_type": "tag",
      "name": "test_validate_command",
      "path": "./tooling/test_fdc_cli.py",
      "language": "Python",
      "line": 53,
      "kind": "function",
      "docstring": "Tests the 'validate' command."
    },
    {
      "_type": "tag",
      "name": "test_analyze_command",
      "path": "./tooling/test_fdc_cli.py",
      "language": "Python",
      "line": 60,
      "kind": "function",
      "docstring": "Tests the 'analyze' command."
    },
    {
      "_type": "tag",
      "name": "test_missing_args",
      "path": "./tooling/test_fdc_cli.py",
      "language": "Python",
      "line": 66,
      "kind": "function",
      "docstring": "Tests that the CLI exits when required args are missing."
    },
    {
      "_type": "tag",
      "name": "TestPreSubmitCheck",
      "path": "./tooling/test_pre_submit_check.py",
      "language": "Python",
      "line": 7,
      "kind": "class",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "test_main_runs_lint",
      "path": "./tooling/test_pre_submit_check.py",
      "language": "Python",
      "line": 10,
      "kind": "function",
      "docstring": "Tests that the main function runs the lint command."
    },
    {
      "_type": "tag",
      "name": "test_run_command_failure",
      "path": "./tooling/test_pre_submit_check.py",
      "language": "Python",
      "line": 21,
      "kind": "function",
      "docstring": "Tests that run_command exits on a failed command."
    },
    {
      "_type": "tag",
      "name": "PlanContext",
      "path": "./tooling/state.py",
      "language": "Python",
      "line": 27,
      "kind": "class",
      "docstring": "Represents the execution context of a single plan file within the plan stack.\n\nThis class holds the state of a specific plan being executed, including its\nfile path, its content (as a list of parsed Command objects), and a pointer\nto the current step being executed."
    },
    {
      "_type": "tag",
      "name": "AgentState",
      "path": "./tooling/state.py",
      "language": "Python",
      "line": 43,
      "kind": "class",
      "docstring": "Represents the complete, serializable state of the agent's workflow.\n\nThis dataclass acts as a central container for all information related to the\nagent's current task. It is designed to be passed between the different states\nof the `MasterControlGraph` FSM, ensuring that context is maintained\nthroughout the lifecycle of a task.\n\nAttributes:\n    task: A string describing the overall objective.\n    plan_path: The file path to the root plan for the current task.\n    plan_stack: A list of `PlanContext` objects, forming the execution\n        stack for the CFDC. The plan at the top of the stack is the one\n        currently being executed.\n    messages: A history of messages, typically for interaction with an LLM.\n    orientation_complete: A flag indicating if the initial orientation\n        phase has been successfully completed.\n    vm_capability_report: A string summarizing the results of the\n        environmental probe.\n    research_findings: A dictionary to store the results of research tasks.\n    draft_postmortem_path: The file path to the draft post-mortem report\n        generated during the AWAITING_ANALYSIS state.\n    final_report: A string containing a summary of the final, completed\n        post-mortem report.\n    error: An optional string that holds an error message if the FSM\n        enters an error state, providing a clear reason for the failure."
    },
    {
      "_type": "tag",
      "name": "to_json",
      "path": "./tooling/state.py",
      "language": "Python",
      "line": 94,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "ExternalApiClient",
      "path": "./tooling/external_api_client.py",
      "language": "Python",
      "line": 10,
      "kind": "class",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "__init__",
      "path": "./tooling/external_api_client.py",
      "language": "Python",
      "line": 11,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "_get_base_url",
      "path": "./tooling/external_api_client.py",
      "language": "Python",
      "line": 16,
      "kind": "function",
      "docstring": "Retrieves the base URL for the API from the external API registry."
    },
    {
      "_type": "tag",
      "name": "post",
      "path": "./tooling/external_api_client.py",
      "language": "Python",
      "line": 30,
      "kind": "function",
      "docstring": "Sends a POST request to the specified endpoint."
    },
    {
      "_type": "tag",
      "name": "get",
      "path": "./tooling/external_api_client.py",
      "language": "Python",
      "line": 40,
      "kind": "function",
      "docstring": "Sends a GET request to the specified endpoint."
    },
    {
      "_type": "tag",
      "name": "extract_lessons_from_postmortem",
      "path": "./tooling/knowledge_compiler.py",
      "language": "Python",
      "line": 30,
      "kind": "function",
      "docstring": "Parses a post-mortem report to extract lessons learned.\nHandles multiple possible section headers and formats."
    },
    {
      "_type": "tag",
      "name": "extract_metadata_from_postmortem",
      "path": "./tooling/knowledge_compiler.py",
      "language": "Python",
      "line": 85,
      "kind": "function",
      "docstring": "Parses a post-mortem report to extract metadata like Task ID and Date."
    },
    {
      "_type": "tag",
      "name": "parse_action_to_command",
      "path": "./tooling/knowledge_compiler.py",
      "language": "Python",
      "line": 97,
      "kind": "function",
      "docstring": "Parses a natural language action string into a machine-executable command.\n\nThis is the core of translating insights into automated actions. It uses\npattern matching to identify specific, supported commands."
    },
    {
      "_type": "tag",
      "name": "format_lesson_entry",
      "path": "./tooling/knowledge_compiler.py",
      "language": "Python",
      "line": 162,
      "kind": "function",
      "docstring": "Formats an extracted lesson into a structured JSON object."
    },
    {
      "_type": "tag",
      "name": "process_postmortem_file",
      "path": "./tooling/knowledge_compiler.py",
      "language": "Python",
      "line": 178,
      "kind": "function",
      "docstring": "Reads a single post-mortem file and returns its lessons."
    },
    {
      "_type": "tag",
      "name": "main",
      "path": "./tooling/knowledge_compiler.py",
      "language": "Python",
      "line": 199,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "execute_plan",
      "path": "./tooling/plan_executor.py",
      "language": "Python",
      "line": 15,
      "kind": "function",
      "docstring": "Executes a plan file, simulating the agent's execution loop.\n\nArgs:\n    filepath: The path to the plan file."
    },
    {
      "_type": "tag",
      "name": "main",
      "path": "./tooling/plan_executor.py",
      "language": "Python",
      "line": 61,
      "kind": "function",
      "docstring": "Main function to run the plan executor from the command line."
    },
    {
      "_type": "tag",
      "name": "run_appl_file",
      "path": "./tooling/appl_runner.py",
      "language": "Python",
      "line": 13,
      "kind": "function",
      "docstring": "Executes an APPL file using the run.py interpreter.\n\nArgs:\n    filepath: The path to the .appl file to execute.\n\nReturns:\n    The output from the APPL interpreter."
    },
    {
      "_type": "tag",
      "name": "main",
      "path": "./tooling/appl_runner.py",
      "language": "Python",
      "line": 45,
      "kind": "function",
      "docstring": "Main function to run the APPL runner from the command line."
    },
    {
      "_type": "tag",
      "name": "has_ctags",
      "path": "./tooling/symbol_map_generator.py",
      "language": "Python",
      "line": 37,
      "kind": "function",
      "docstring": "Check if Universal Ctags is installed and available in the PATH."
    },
    {
      "_type": "tag",
      "name": "generate_symbols_with_ctags",
      "path": "./tooling/symbol_map_generator.py",
      "language": "Python",
      "line": 46,
      "kind": "function",
      "docstring": "Generates a symbol map using Universal Ctags."
    },
    {
      "_type": "tag",
      "name": "generate_symbols_with_ast",
      "path": "./tooling/symbol_map_generator.py",
      "language": "Python",
      "line": 88,
      "kind": "function",
      "docstring": "Fallback to generate a symbol map for Python files using the AST module."
    },
    {
      "_type": "tag",
      "name": "main",
      "path": "./tooling/symbol_map_generator.py",
      "language": "Python",
      "line": 122,
      "kind": "function",
      "docstring": "Main function to generate and save the symbol map."
    },
    {
      "_type": "tag",
      "name": "TestKnowledgeCompiler",
      "path": "./tooling/test_knowledge_compiler.py",
      "language": "Python",
      "line": 18,
      "kind": "class",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "TestKnowledgeCompilerAdvanced",
      "path": "./tooling/test_knowledge_compiler.py",
      "language": "Python",
      "line": 110,
      "kind": "class",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "setUp",
      "path": "./tooling/test_knowledge_compiler.py",
      "language": "Python",
      "line": 20,
      "kind": "function",
      "docstring": "Set up a temporary directory with mock files."
    },
    {
      "_type": "tag",
      "name": "tearDown",
      "path": "./tooling/test_knowledge_compiler.py",
      "language": "Python",
      "line": 58,
      "kind": "function",
      "docstring": "Clean up the temporary directory and restore original state."
    },
    {
      "_type": "tag",
      "name": "test_knowledge_compiler_end_to_end",
      "path": "./tooling/test_knowledge_compiler.py",
      "language": "Python",
      "line": 68,
      "kind": "function",
      "docstring": "Verify that the compiler correctly parses a post-mortem and\ngenerates a structured lessons.jsonl file with both machine-readable\nand placeholder commands."
    },
    {
      "_type": "tag",
      "name": "setUp",
      "path": "./tooling/test_knowledge_compiler.py",
      "language": "Python",
      "line": 112,
      "kind": "function",
      "docstring": "Set up a temporary directory for advanced parsing tests."
    },
    {
      "_type": "tag",
      "name": "tearDown",
      "path": "./tooling/test_knowledge_compiler.py",
      "language": "Python",
      "line": 149,
      "kind": "function",
      "docstring": "Clean up the temporary directory and restore original state."
    },
    {
      "_type": "tag",
      "name": "test_advanced_parsing_and_deprecate_command",
      "path": "./tooling/test_knowledge_compiler.py",
      "language": "Python",
      "line": 159,
      "kind": "function",
      "docstring": "Verify the compiler can handle different section headers and parse\nthe 'deprecate-tool' command."
    },
    {
      "_type": "tag",
      "name": "find_all_agents_md_files",
      "path": "./tooling/auditor.py",
      "language": "Python",
      "line": 49,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "get_used_tools_from_log",
      "path": "./tooling/auditor.py",
      "language": "Python",
      "line": 53,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "get_protocol_tools_from_agents_md",
      "path": "./tooling/auditor.py",
      "language": "Python",
      "line": 83,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "run_protocol_audit",
      "path": "./tooling/auditor.py",
      "language": "Python",
      "line": 103,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "run_plan_registry_audit",
      "path": "./tooling/auditor.py",
      "language": "Python",
      "line": 178,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "run_doc_audit",
      "path": "./tooling/auditor.py",
      "language": "Python",
      "line": 212,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "main",
      "path": "./tooling/auditor.py",
      "language": "Python",
      "line": 245,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "find_symbol_definition",
      "path": "./tooling/refactor.py",
      "language": "Python",
      "line": 34,
      "kind": "function",
      "docstring": "Finds the definition of a symbol in a Python file."
    },
    {
      "_type": "tag",
      "name": "find_references",
      "path": "./tooling/refactor.py",
      "language": "Python",
      "line": 48,
      "kind": "function",
      "docstring": "Finds all files in a directory that reference a given symbol."
    },
    {
      "_type": "tag",
      "name": "main",
      "path": "./tooling/refactor.py",
      "language": "Python",
      "line": 66,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "TestKnowledgeIntegrator",
      "path": "./tooling/test_knowledge_integrator.py",
      "language": "Python",
      "line": 10,
      "kind": "class",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "setUp",
      "path": "./tooling/test_knowledge_integrator.py",
      "language": "Python",
      "line": 12,
      "kind": "function",
      "docstring": "Set up a temporary directory and files for testing."
    },
    {
      "_type": "tag",
      "name": "tearDown",
      "path": "./tooling/test_knowledge_integrator.py",
      "language": "Python",
      "line": 29,
      "kind": "function",
      "docstring": "Clean up the temporary directory."
    },
    {
      "_type": "tag",
      "name": "test_load_local_graph_success",
      "path": "./tooling/test_knowledge_integrator.py",
      "language": "Python",
      "line": 33,
      "kind": "function",
      "docstring": "Test that the local graph loads successfully."
    },
    {
      "_type": "tag",
      "name": "test_load_local_graph_not_found",
      "path": "./tooling/test_knowledge_integrator.py",
      "language": "Python",
      "line": 40,
      "kind": "function",
      "docstring": "Test that loading a non-existent graph returns None."
    },
    {
      "_type": "tag",
      "name": "test_extract_concepts",
      "path": "./tooling/test_knowledge_integrator.py",
      "language": "Python",
      "line": 46,
      "kind": "function",
      "docstring": "Test that concepts are extracted and cleaned correctly."
    },
    {
      "_type": "tag",
      "name": "test_query_dbpedia_success",
      "path": "./tooling/test_knowledge_integrator.py",
      "language": "Python",
      "line": 54,
      "kind": "function",
      "docstring": "Test a successful query to DBPedia, mocking the HTTP request."
    },
    {
      "_type": "tag",
      "name": "test_query_dbpedia_http_error",
      "path": "./tooling/test_knowledge_integrator.py",
      "language": "Python",
      "line": 77,
      "kind": "function",
      "docstring": "Test that a DBPedia query handles HTTP errors gracefully."
    },
    {
      "_type": "tag",
      "name": "test_run_knowledge_integration",
      "path": "./tooling/test_knowledge_integrator.py",
      "language": "Python",
      "line": 87,
      "kind": "function",
      "docstring": "Test the main run_knowledge_integration function."
    },
    {
      "_type": "tag",
      "name": "TestGeminiComputerUse",
      "path": "./tooling/test_gemini_computer_use.py",
      "language": "Python",
      "line": 6,
      "kind": "class",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "test_main",
      "path": "./tooling/test_gemini_computer_use.py",
      "language": "Python",
      "line": 11,
      "kind": "function",
      "docstring": "Tests the main function of the gemini_computer_use tool."
    },
    {
      "_type": "tag",
      "name": "main",
      "path": "./tooling/master_control_cli.py",
      "language": "Python",
      "line": 18,
      "kind": "function",
      "docstring": "The main entry point for the agent.\n\nThis script parses the task description and invokes the agent shell."
    },
    {
      "_type": "tag",
      "name": "AuraToLfiIllCompiler",
      "path": "./tooling/aura_to_lfi_ill.py",
      "language": "Python",
      "line": 51,
      "kind": "class",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "main",
      "path": "./tooling/aura_to_lfi_ill.py",
      "language": "Python",
      "line": 134,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "__init__",
      "path": "./tooling/aura_to_lfi_ill.py",
      "language": "Python",
      "line": 52,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "compile",
      "path": "./tooling/aura_to_lfi_ill.py",
      "language": "Python",
      "line": 55,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "generic_compiler",
      "path": "./tooling/aura_to_lfi_ill.py",
      "language": "Python",
      "line": 60,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "compile_Program",
      "path": "./tooling/aura_to_lfi_ill.py",
      "language": "Python",
      "line": 63,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "compile_LetStatement",
      "path": "./tooling/aura_to_lfi_ill.py",
      "language": "Python",
      "line": 70,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "compile_ExpressionStatement",
      "path": "./tooling/aura_to_lfi_ill.py",
      "language": "Python",
      "line": 78,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "compile_IntegerLiteral",
      "path": "./tooling/aura_to_lfi_ill.py",
      "language": "Python",
      "line": 81,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "compile_StringLiteral",
      "path": "./tooling/aura_to_lfi_ill.py",
      "language": "Python",
      "line": 84,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "compile_Identifier",
      "path": "./tooling/aura_to_lfi_ill.py",
      "language": "Python",
      "line": 87,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "compile_InfixExpression",
      "path": "./tooling/aura_to_lfi_ill.py",
      "language": "Python",
      "line": 90,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "compile_CallExpression",
      "path": "./tooling/aura_to_lfi_ill.py",
      "language": "Python",
      "line": 95,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "compile_PrintStatement",
      "path": "./tooling/aura_to_lfi_ill.py",
      "language": "Python",
      "line": 103,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "compile_IfStatement",
      "path": "./tooling/aura_to_lfi_ill.py",
      "language": "Python",
      "line": 107,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "compile_BlockStatement",
      "path": "./tooling/aura_to_lfi_ill.py",
      "language": "Python",
      "line": 113,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "compile_ForStatement",
      "path": "./tooling/aura_to_lfi_ill.py",
      "language": "Python",
      "line": 120,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "compile_ReturnStatement",
      "path": "./tooling/aura_to_lfi_ill.py",
      "language": "Python",
      "line": 125,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "compile_FunctionDefinition",
      "path": "./tooling/aura_to_lfi_ill.py",
      "language": "Python",
      "line": 128,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "load_config",
      "path": "./tooling/builder.py",
      "language": "Python",
      "line": 38,
      "kind": "function",
      "docstring": "Loads the build configuration file."
    },
    {
      "_type": "tag",
      "name": "execute_compiler_target",
      "path": "./tooling/builder.py",
      "language": "Python",
      "line": 46,
      "kind": "function",
      "docstring": "Executes a 'compiler' type build target."
    },
    {
      "_type": "tag",
      "name": "execute_command_target",
      "path": "./tooling/builder.py",
      "language": "Python",
      "line": 77,
      "kind": "function",
      "docstring": "Executes a 'command' type build target."
    },
    {
      "_type": "tag",
      "name": "execute_build",
      "path": "./tooling/builder.py",
      "language": "Python",
      "line": 83,
      "kind": "function",
      "docstring": "Executes the build process for a specific target."
    },
    {
      "_type": "tag",
      "name": "main",
      "path": "./tooling/builder.py",
      "language": "Python",
      "line": 142,
      "kind": "function",
      "docstring": "Main function to parse arguments and drive the build process."
    },
    {
      "_type": "tag",
      "name": "_load_plan_registry",
      "path": "./tooling/master_control.py",
      "language": "Python",
      "line": 52,
      "kind": "function",
      "docstring": "Loads the plan registry, returning an empty dict if it doesn't exist or is invalid."
    },
    {
      "_type": "tag",
      "name": "_get_log_context",
      "path": "./tooling/master_control.py",
      "language": "Python",
      "line": 63,
      "kind": "function",
      "docstring": "Creates a context dictionary for logging from the agent's state."
    },
    {
      "_type": "tag",
      "name": "MasterControlGraph",
      "path": "./tooling/master_control.py",
      "language": "Python",
      "line": 77,
      "kind": "class",
      "docstring": "A Finite State Machine (FSM) that enforces the agent's protocol.\nThis graph reads a state definition and orchestrates the agent's workflow,\nensuring that all protocol steps are followed in the correct order."
    },
    {
      "_type": "tag",
      "name": "__init__",
      "path": "./tooling/master_control.py",
      "language": "Python",
      "line": 84,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "get_trigger",
      "path": "./tooling/master_control.py",
      "language": "Python",
      "line": 89,
      "kind": "function",
      "docstring": "Finds a trigger in the FSM definition for a transition from a source\nto a destination state. This is a helper to avoid hardcoding trigger\nstrings in the state handlers."
    },
    {
      "_type": "tag",
      "name": "do_orientation",
      "path": "./tooling/master_control.py",
      "language": "Python",
      "line": 105,
      "kind": "function",
      "docstring": "Executes orientation, including analyzing the last post-mortem and scanning the filesystem."
    },
    {
      "_type": "tag",
      "name": "do_planning",
      "path": "./tooling/master_control.py",
      "language": "Python",
      "line": 212,
      "kind": "function",
      "docstring": "Validates a given plan, parses it, and initializes the plan stack."
    },
    {
      "_type": "tag",
      "name": "_validate_plan_with_cli",
      "path": "./tooling/master_control.py",
      "language": "Python",
      "line": 281,
      "kind": "function",
      "docstring": "Validates a plan by writing it to a temporary file and using the fdc_cli.py script."
    },
    {
      "_type": "tag",
      "name": "validate_plan_for_model",
      "path": "./tooling/master_control.py",
      "language": "Python",
      "line": 362,
      "kind": "function",
      "docstring": "Validates a plan against a specific CSDC model using the LBAValidator."
    },
    {
      "_type": "tag",
      "name": "do_researching",
      "path": "./tooling/master_control.py",
      "language": "Python",
      "line": 379,
      "kind": "function",
      "docstring": "Launches the background research process."
    },
    {
      "_type": "tag",
      "name": "do_awaiting_result",
      "path": "./tooling/master_control.py",
      "language": "Python",
      "line": 433,
      "kind": "function",
      "docstring": "Checks for the result of the background research process."
    },
    {
      "_type": "tag",
      "name": "get_current_step",
      "path": "./tooling/master_control.py",
      "language": "Python",
      "line": 500,
      "kind": "function",
      "docstring": "Returns the current command to be executed by the agent, or None if execution is complete."
    },
    {
      "_type": "tag",
      "name": "do_execution",
      "path": "./tooling/master_control.py",
      "language": "Python",
      "line": 511,
      "kind": "function",
      "docstring": "Processes the result of a step and advances the execution state."
    },
    {
      "_type": "tag",
      "name": "do_generating_code",
      "path": "./tooling/master_control.py",
      "language": "Python",
      "line": 565,
      "kind": "function",
      "docstring": "Handles the code generation state."
    },
    {
      "_type": "tag",
      "name": "do_running_tests",
      "path": "./tooling/master_control.py",
      "language": "Python",
      "line": 580,
      "kind": "function",
      "docstring": "Handles the test execution state."
    },
    {
      "_type": "tag",
      "name": "do_debugging",
      "path": "./tooling/master_control.py",
      "language": "Python",
      "line": 596,
      "kind": "function",
      "docstring": "Handles the debugging state."
    },
    {
      "_type": "tag",
      "name": "do_finalizing",
      "path": "./tooling/master_control.py",
      "language": "Python",
      "line": 611,
      "kind": "function",
      "docstring": "Handles the finalization of the task, guiding the agent through\nthe structured post-mortem process."
    },
    {
      "_type": "tag",
      "name": "TestCapabilityVerifier",
      "path": "./tooling/test_capability_verifier.py",
      "language": "Python",
      "line": 8,
      "kind": "class",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "setUp",
      "path": "./tooling/test_capability_verifier.py",
      "language": "Python",
      "line": 10,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "tearDown",
      "path": "./tooling/test_capability_verifier.py",
      "language": "Python",
      "line": 28,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "test_successful_verification",
      "path": "./tooling/test_capability_verifier.py",
      "language": "Python",
      "line": 32,
      "kind": "function",
      "docstring": "Tests the full successful workflow of the capability verifier."
    },
    {
      "_type": "tag",
      "name": "test_unexpected_initial_pass",
      "path": "./tooling/test_capability_verifier.py",
      "language": "Python",
      "line": 45,
      "kind": "function",
      "docstring": "Tests that the verifier exits if the initial test passes."
    },
    {
      "_type": "tag",
      "name": "test_orchestrator_failure",
      "path": "./tooling/test_capability_verifier.py",
      "language": "Python",
      "line": 53,
      "kind": "function",
      "docstring": "Tests that the verifier exits if the orchestrator fails."
    },
    {
      "_type": "tag",
      "name": "test_final_test_failure",
      "path": "./tooling/test_capability_verifier.py",
      "language": "Python",
      "line": 63,
      "kind": "function",
      "docstring": "Tests that the verifier exits if the final test still fails."
    },
    {
      "_type": "tag",
      "name": "test_regression_failure",
      "path": "./tooling/test_capability_verifier.py",
      "language": "Python",
      "line": 74,
      "kind": "function",
      "docstring": "Tests that the verifier exits if regression tests fail."
    },
    {
      "_type": "tag",
      "name": "dynamic_agent_call_tool",
      "path": "./tooling/aura_executor.py",
      "language": "Python",
      "line": 32,
      "kind": "function",
      "docstring": "Dynamically imports and calls a tool from the 'tooling' directory and wraps the result.\n\nThis function provides the bridge between the Aura scripting environment and the\nPython-based agent tools. It takes the tool's module name and arguments,\nruns the tool in a subprocess, and wraps the captured output in an Aura `Object`.\n\nArgs:\n    tool_name_obj: An Aura Object containing the tool's module name (e.g., 'hdl_prover').\n    *args: A variable number of Aura Objects to be passed as string arguments to the tool.\n\nReturns:\n    An Aura `Object` containing the tool's stdout as a string, or an error message."
    },
    {
      "_type": "tag",
      "name": "main",
      "path": "./tooling/aura_executor.py",
      "language": "Python",
      "line": 90,
      "kind": "function",
      "docstring": "Main entry point for the Aura script executor."
    },
    {
      "_type": "tag",
      "name": "builtin_print",
      "path": "./tooling/aura_executor.py",
      "language": "Python",
      "line": 116,
      "kind": "function",
      "docstring": "A wrapper for the built-in print function that handles Aura objects."
    },
    {
      "_type": "tag",
      "name": "Instruction",
      "path": "./tooling/udc_orchestrator.py",
      "language": "Python",
      "line": 22,
      "kind": "class",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "UDCOrchestrator",
      "path": "./tooling/udc_orchestrator.py",
      "language": "Python",
      "line": 31,
      "kind": "class",
      "docstring": "Executes an Unrestricted Development Cycle (UDC) plan within a sandboxed\nTuring Machine-like environment with strict resource limits."
    },
    {
      "_type": "tag",
      "name": "main",
      "path": "./tooling/udc_orchestrator.py",
      "language": "Python",
      "line": 213,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "__init__",
      "path": "./tooling/udc_orchestrator.py",
      "language": "Python",
      "line": 23,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "__repr__",
      "path": "./tooling/udc_orchestrator.py",
      "language": "Python",
      "line": 27,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "__init__",
      "path": "./tooling/udc_orchestrator.py",
      "language": "Python",
      "line": 37,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "run",
      "path": "./tooling/udc_orchestrator.py",
      "language": "Python",
      "line": 66,
      "kind": "function",
      "docstring": "Parses and runs the UDC plan until it halts or a limit is exceeded."
    },
    {
      "_type": "tag",
      "name": "_parse_plan",
      "path": "./tooling/udc_orchestrator.py",
      "language": "Python",
      "line": 125,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "_get_value",
      "path": "./tooling/udc_orchestrator.py",
      "language": "Python",
      "line": 144,
      "kind": "function",
      "docstring": "Resolves an argument to an integer value, either from a register or a literal."
    },
    {
      "_type": "tag",
      "name": "_execute_instruction",
      "path": "./tooling/udc_orchestrator.py",
      "language": "Python",
      "line": 153,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "TestState",
      "path": "./tooling/test_state.py",
      "language": "Python",
      "line": 6,
      "kind": "class",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "test_agent_state_initialization",
      "path": "./tooling/test_state.py",
      "language": "Python",
      "line": 8,
      "kind": "function",
      "docstring": "Tests the initialization of an AgentState object."
    },
    {
      "_type": "tag",
      "name": "test_plan_context_initialization",
      "path": "./tooling/test_state.py",
      "language": "Python",
      "line": 15,
      "kind": "function",
      "docstring": "Tests the initialization of a PlanContext object."
    },
    {
      "_type": "tag",
      "name": "test_agent_state_to_json",
      "path": "./tooling/test_state.py",
      "language": "Python",
      "line": 23,
      "kind": "function",
      "docstring": "Tests the to_json method of AgentState."
    },
    {
      "_type": "tag",
      "name": "TestDependencyGraphGenerator",
      "path": "./tooling/test_dependency_graph_generator.py",
      "language": "Python",
      "line": 28,
      "kind": "class",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "setUp",
      "path": "./tooling/test_dependency_graph_generator.py",
      "language": "Python",
      "line": 30,
      "kind": "function",
      "docstring": "Set up a temporary directory structure for testing."
    },
    {
      "_type": "tag",
      "name": "tearDown",
      "path": "./tooling/test_dependency_graph_generator.py",
      "language": "Python",
      "line": 63,
      "kind": "function",
      "docstring": "Clean up the temporary directory."
    },
    {
      "_type": "tag",
      "name": "test_find_files",
      "path": "./tooling/test_dependency_graph_generator.py",
      "language": "Python",
      "line": 68,
      "kind": "function",
      "docstring": "Test finding both package.json and requirements.txt files."
    },
    {
      "_type": "tag",
      "name": "test_parse_package_json",
      "path": "./tooling/test_dependency_graph_generator.py",
      "language": "Python",
      "line": 78,
      "kind": "function",
      "docstring": "Test parsing a single package.json file."
    },
    {
      "_type": "tag",
      "name": "test_parse_requirements_txt",
      "path": "./tooling/test_dependency_graph_generator.py",
      "language": "Python",
      "line": 87,
      "kind": "function",
      "docstring": "Test parsing a single requirements.txt file."
    },
    {
      "_type": "tag",
      "name": "test_generate_dependency_graph",
      "path": "./tooling/test_dependency_graph_generator.py",
      "language": "Python",
      "line": 101,
      "kind": "function",
      "docstring": "Test the full graph generation logic with mixed project types."
    },
    {
      "_type": "tag",
      "name": "TestReorientationManager",
      "path": "./tooling/test_reorientation_manager.py",
      "language": "Python",
      "line": 8,
      "kind": "class",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "setUp",
      "path": "./tooling/test_reorientation_manager.py",
      "language": "Python",
      "line": 10,
      "kind": "function",
      "docstring": "Set up test files and cleanup afterwards."
    },
    {
      "_type": "tag",
      "name": "tearDown",
      "path": "./tooling/test_reorientation_manager.py",
      "language": "Python",
      "line": 20,
      "kind": "function",
      "docstring": "Clean up created files after tests."
    },
    {
      "_type": "tag",
      "name": "cleanup_files",
      "path": "./tooling/test_reorientation_manager.py",
      "language": "Python",
      "line": 24,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "test_temporal_orientation_triggered",
      "path": "./tooling/test_reorientation_manager.py",
      "language": "Python",
      "line": 43,
      "kind": "function",
      "docstring": "Test that temporal orientation is triggered for new concepts."
    },
    {
      "_type": "tag",
      "name": "test_deep_research_triggered",
      "path": "./tooling/test_reorientation_manager.py",
      "language": "Python",
      "line": 81,
      "kind": "function",
      "docstring": "Test that deep research is triggered for significant new concepts."
    },
    {
      "_type": "tag",
      "name": "test_no_changes_detected",
      "path": "./tooling/test_reorientation_manager.py",
      "language": "Python",
      "line": 119,
      "kind": "function",
      "docstring": "Test that no action is taken when there are no new concepts."
    },
    {
      "_type": "tag",
      "name": "TestResearchExecutor",
      "path": "./tooling/test_research.py",
      "language": "Python",
      "line": 6,
      "kind": "class",
      "docstring": "Tests for the research executor tool, mocking the native tools that are\nglobally injected by the execution environment."
    },
    {
      "_type": "tag",
      "name": "test_local_filesystem_file_scope",
      "path": "./tooling/test_research.py",
      "language": "Python",
      "line": 13,
      "kind": "function",
      "docstring": "Verify it calls read_file for local file scope."
    },
    {
      "_type": "tag",
      "name": "test_local_filesystem_directory_scope",
      "path": "./tooling/test_research.py",
      "language": "Python",
      "line": 25,
      "kind": "function",
      "docstring": "Verify it calls list_files for local directory scope."
    },
    {
      "_type": "tag",
      "name": "test_external_web_narrow_scope",
      "path": "./tooling/test_research.py",
      "language": "Python",
      "line": 37,
      "kind": "function",
      "docstring": "Verify it calls google_search for external narrow scope."
    },
    {
      "_type": "tag",
      "name": "test_external_web_broad_scope",
      "path": "./tooling/test_research.py",
      "language": "Python",
      "line": 49,
      "kind": "function",
      "docstring": "Verify it calls view_text_website for external broad scope."
    },
    {
      "_type": "tag",
      "name": "test_external_repository_scope",
      "path": "./tooling/test_research.py",
      "language": "Python",
      "line": 61,
      "kind": "function",
      "docstring": "Verify it calls view_text_website for external repository scope."
    },
    {
      "_type": "tag",
      "name": "test_invalid_target",
      "path": "./tooling/test_research.py",
      "language": "Python",
      "line": 71,
      "kind": "function",
      "docstring": "Verify it returns an error for an invalid target."
    },
    {
      "_type": "tag",
      "name": "test_missing_parameters",
      "path": "./tooling/test_research.py",
      "language": "Python",
      "line": 80,
      "kind": "function",
      "docstring": "Verify it returns an error if required parameters are missing."
    },
    {
      "_type": "tag",
      "name": "parse_formula",
      "path": "./tooling/hdl_prover.py",
      "language": "Python",
      "line": 36,
      "kind": "function",
      "docstring": "A very basic parser for formulas."
    },
    {
      "_type": "tag",
      "name": "parse_sequent",
      "path": "./tooling/hdl_prover.py",
      "language": "Python",
      "line": 48,
      "kind": "function",
      "docstring": "A very basic parser for sequents."
    },
    {
      "_type": "tag",
      "name": "prove_sequent",
      "path": "./tooling/hdl_prover.py",
      "language": "Python",
      "line": 56,
      "kind": "function",
      "docstring": "A very simple proof search algorithm.\nThis is a placeholder for a more sophisticated prover."
    },
    {
      "_type": "tag",
      "name": "main",
      "path": "./tooling/hdl_prover.py",
      "language": "Python",
      "line": 79,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "log_catastrophic_failure",
      "path": "./tooling/log_failure.py",
      "language": "Python",
      "line": 29,
      "kind": "function",
      "docstring": "Logs the catastrophic failure event."
    },
    {
      "_type": "tag",
      "name": "TestMessageUser",
      "path": "./tooling/test_message_user.py",
      "language": "Python",
      "line": 6,
      "kind": "class",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "test_main_prints_message",
      "path": "./tooling/test_message_user.py",
      "language": "Python",
      "line": 10,
      "kind": "function",
      "docstring": "Tests that the main function prints the message."
    },
    {
      "_type": "tag",
      "name": "find_protocol_file",
      "path": "./tooling/protocol_updater.py",
      "language": "Python",
      "line": 22,
      "kind": "function",
      "docstring": "Recursively finds the protocol file path corresponding to a given protocol_id."
    },
    {
      "_type": "tag",
      "name": "add_tool_to_protocol",
      "path": "./tooling/protocol_updater.py",
      "language": "Python",
      "line": 39,
      "kind": "function",
      "docstring": "Adds a tool to the 'associated_tools' list of a specified protocol."
    },
    {
      "_type": "tag",
      "name": "update_rule_in_protocol",
      "path": "./tooling/protocol_updater.py",
      "language": "Python",
      "line": 78,
      "kind": "function",
      "docstring": "Updates the description of a specific rule within a protocol."
    },
    {
      "_type": "tag",
      "name": "main",
      "path": "./tooling/protocol_updater.py",
      "language": "Python",
      "line": 126,
      "kind": "function",
      "docstring": "Main function to parse arguments and call the appropriate handler."
    },
    {
      "_type": "tag",
      "name": "LfiIllHaltingDecider",
      "path": "./tooling/lfi_ill_halting_decider.py",
      "language": "Python",
      "line": 19,
      "kind": "class",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "main",
      "path": "./tooling/lfi_ill_halting_decider.py",
      "language": "Python",
      "line": 61,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "__init__",
      "path": "./tooling/lfi_ill_halting_decider.py",
      "language": "Python",
      "line": 20,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "analyze",
      "path": "./tooling/lfi_ill_halting_decider.py",
      "language": "Python",
      "line": 23,
      "kind": "function",
      "docstring": "Analyzes the LFI ILL program for termination."
    },
    {
      "_type": "tag",
      "name": "AtomNode",
      "path": "./tooling/pda_parser.py",
      "language": "Python",
      "line": 23,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "UnaryOpNode",
      "path": "./tooling/pda_parser.py",
      "language": "Python",
      "line": 27,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "BinaryOpNode",
      "path": "./tooling/pda_parser.py",
      "language": "Python",
      "line": 31,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "t_ATOM",
      "path": "./tooling/pda_parser.py",
      "language": "Python",
      "line": 64,
      "kind": "function",
      "docstring": "[A-Z][A-Z0-9]*"
    },
    {
      "_type": "tag",
      "name": "t_newline",
      "path": "./tooling/pda_parser.py",
      "language": "Python",
      "line": 73,
      "kind": "function",
      "docstring": "\\n+"
    },
    {
      "_type": "tag",
      "name": "t_error",
      "path": "./tooling/pda_parser.py",
      "language": "Python",
      "line": 78,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "p_formula_binary",
      "path": "./tooling/pda_parser.py",
      "language": "Python",
      "line": 97,
      "kind": "function",
      "docstring": "formula : formula IMPLIES formula\n        | formula WITH formula\n        | formula PLUS formula"
    },
    {
      "_type": "tag",
      "name": "p_formula_unary",
      "path": "./tooling/pda_parser.py",
      "language": "Python",
      "line": 106,
      "kind": "function",
      "docstring": "formula : NOT formula\n        | BANG formula\n        | CONSISTENCY formula\n        | SECTION formula\n        | WHYNOT formula"
    },
    {
      "_type": "tag",
      "name": "p_formula_group",
      "path": "./tooling/pda_parser.py",
      "language": "Python",
      "line": 117,
      "kind": "function",
      "docstring": "formula : LPAREN formula RPAREN"
    },
    {
      "_type": "tag",
      "name": "p_formula_atom",
      "path": "./tooling/pda_parser.py",
      "language": "Python",
      "line": 124,
      "kind": "function",
      "docstring": "formula : ATOM"
    },
    {
      "_type": "tag",
      "name": "p_error",
      "path": "./tooling/pda_parser.py",
      "language": "Python",
      "line": 131,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "parse_formula",
      "path": "./tooling/pda_parser.py",
      "language": "Python",
      "line": 144,
      "kind": "function",
      "docstring": "Parses a pLLLU formula string into an AST."
    },
    {
      "_type": "tag",
      "name": "load_tools_from_manifest",
      "path": "./tooling/agent_shell.py",
      "language": "Python",
      "line": 28,
      "kind": "function",
      "docstring": "Loads tools from the tool manifest."
    },
    {
      "_type": "tag",
      "name": "find_fsm_transition",
      "path": "./tooling/agent_shell.py",
      "language": "Python",
      "line": 64,
      "kind": "function",
      "docstring": "Finds the destination state for a given source and trigger."
    },
    {
      "_type": "tag",
      "name": "run_agent_loop",
      "path": "./tooling/agent_shell.py",
      "language": "Python",
      "line": 75,
      "kind": "function",
      "docstring": "The main loop that drives the agent's lifecycle via the FSM."
    },
    {
      "_type": "tag",
      "name": "main",
      "path": "./tooling/agent_shell.py",
      "language": "Python",
      "line": 224,
      "kind": "function",
      "docstring": "Main entry point for the agent shell."
    },
    {
      "_type": "tag",
      "name": "TestMasterControlRedesigned",
      "path": "./tooling/test_master_control.py",
      "language": "Python",
      "line": 25,
      "kind": "class",
      "docstring": "Validates the FSM workflow in a single-threaded, deterministic manner."
    },
    {
      "_type": "tag",
      "name": "setUp",
      "path": "./tooling/test_master_control.py",
      "language": "Python",
      "line": 30,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "tearDown",
      "path": "./tooling/test_master_control.py",
      "language": "Python",
      "line": 134,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "test_do_orientation",
      "path": "./tooling/test_master_control.py",
      "language": "Python",
      "line": 143,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "test_do_planning",
      "path": "./tooling/test_master_control.py",
      "language": "Python",
      "line": 162,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "test_do_execution",
      "path": "./tooling/test_master_control.py",
      "language": "Python",
      "line": 172,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "test_do_execution_to_generate_code",
      "path": "./tooling/test_master_control.py",
      "language": "Python",
      "line": 187,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "test_validate_plan_with_invalid_transition",
      "path": "./tooling/test_master_control.py",
      "language": "Python",
      "line": 201,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "test_do_finalizing",
      "path": "./tooling/test_master_control.py",
      "language": "Python",
      "line": 209,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "reliable_ls",
      "path": "./tooling/reliable_ls.py",
      "language": "Python",
      "line": 13,
      "kind": "function",
      "docstring": "Recursively lists all directories and files under the start_path.\n\nArgs:\n    start_path: The directory to start the traversal from."
    },
    {
      "_type": "tag",
      "name": "main",
      "path": "./tooling/reliable_ls.py",
      "language": "Python",
      "line": 51,
      "kind": "function",
      "docstring": "Main function to run the reliable_ls tool from the command line."
    },
    {
      "_type": "tag",
      "name": "get_registry",
      "path": "./tooling/plan_manager.py",
      "language": "Python",
      "line": 35,
      "kind": "function",
      "docstring": "Loads the plan registry from its JSON file."
    },
    {
      "_type": "tag",
      "name": "save_registry",
      "path": "./tooling/plan_manager.py",
      "language": "Python",
      "line": 50,
      "kind": "function",
      "docstring": "Saves the given data to the plan registry JSON file."
    },
    {
      "_type": "tag",
      "name": "register_plan",
      "path": "./tooling/plan_manager.py",
      "language": "Python",
      "line": 61,
      "kind": "function",
      "docstring": "Registers a new plan by mapping a logical name to a file path."
    },
    {
      "_type": "tag",
      "name": "deregister_plan",
      "path": "./tooling/plan_manager.py",
      "language": "Python",
      "line": 85,
      "kind": "function",
      "docstring": "Removes a plan from the registry by its logical name."
    },
    {
      "_type": "tag",
      "name": "list_plans",
      "path": "./tooling/plan_manager.py",
      "language": "Python",
      "line": 99,
      "kind": "function",
      "docstring": "Lists all currently registered plans."
    },
    {
      "_type": "tag",
      "name": "main",
      "path": "./tooling/plan_manager.py",
      "language": "Python",
      "line": 113,
      "kind": "function",
      "docstring": "Main function to run the plan management CLI."
    },
    {
      "_type": "tag",
      "name": "TestProtocolUpdater",
      "path": "./tooling/test_protocol_updater.py",
      "language": "Python",
      "line": 18,
      "kind": "class",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "setUp",
      "path": "./tooling/test_protocol_updater.py",
      "language": "Python",
      "line": 20,
      "kind": "function",
      "docstring": "Set up a temporary directory with a mock protocols structure."
    },
    {
      "_type": "tag",
      "name": "tearDown",
      "path": "./tooling/test_protocol_updater.py",
      "language": "Python",
      "line": 47,
      "kind": "function",
      "docstring": "Clean up the temporary directory and restore original config."
    },
    {
      "_type": "tag",
      "name": "test_find_protocol_file_success",
      "path": "./tooling/test_protocol_updater.py",
      "language": "Python",
      "line": 54,
      "kind": "function",
      "docstring": "Verify that a protocol file can be found by its ID."
    },
    {
      "_type": "tag",
      "name": "test_find_protocol_file_not_found",
      "path": "./tooling/test_protocol_updater.py",
      "language": "Python",
      "line": 59,
      "kind": "function",
      "docstring": "Verify that None is returned for a non-existent protocol ID."
    },
    {
      "_type": "tag",
      "name": "test_add_tool_to_protocol_success",
      "path": "./tooling/test_protocol_updater.py",
      "language": "Python",
      "line": 64,
      "kind": "function",
      "docstring": "Verify that a new tool can be successfully added to a protocol."
    },
    {
      "_type": "tag",
      "name": "test_add_duplicate_tool",
      "path": "./tooling/test_protocol_updater.py",
      "language": "Python",
      "line": 77,
      "kind": "function",
      "docstring": "Verify that adding an existing tool does not create a duplicate."
    },
    {
      "_type": "tag",
      "name": "TestSymbolMapGenerator",
      "path": "./tooling/test_symbol_map_generator.py",
      "language": "Python",
      "line": 33,
      "kind": "class",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "setUp",
      "path": "./tooling/test_symbol_map_generator.py",
      "language": "Python",
      "line": 35,
      "kind": "function",
      "docstring": "Set up a temporary directory structure for testing."
    },
    {
      "_type": "tag",
      "name": "tearDown",
      "path": "./tooling/test_symbol_map_generator.py",
      "language": "Python",
      "line": 50,
      "kind": "function",
      "docstring": "Clean up the temporary directory."
    },
    {
      "_type": "tag",
      "name": "test_generate_with_ctags_success",
      "path": "./tooling/test_symbol_map_generator.py",
      "language": "Python",
      "line": 56,
      "kind": "function",
      "docstring": "Test successful symbol generation using a mocked ctags call."
    },
    {
      "_type": "tag",
      "name": "test_generate_with_ast_fallback",
      "path": "./tooling/test_symbol_map_generator.py",
      "language": "Python",
      "line": 89,
      "kind": "function",
      "docstring": "Test the AST-based fallback for Python files."
    },
    {
      "_type": "tag",
      "name": "test_main_with_ast_fallback",
      "path": "./tooling/test_symbol_map_generator.py",
      "language": "Python",
      "line": 116,
      "kind": "function",
      "docstring": "Test that main function uses the AST fallback when ctags is not present."
    },
    {
      "_type": "tag",
      "name": "side_effect",
      "path": "./tooling/test_symbol_map_generator.py",
      "language": "Python",
      "line": 60,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "main",
      "path": "./tooling/csdc_cli.py",
      "language": "Python",
      "line": 32,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "TestAgentShell",
      "path": "./tooling/test_agent_shell.py",
      "language": "Python",
      "line": 6,
      "kind": "class",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "test_main_with_model_a",
      "path": "./tooling/test_agent_shell.py",
      "language": "Python",
      "line": 9,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "test_main_with_model_b",
      "path": "./tooling/test_agent_shell.py",
      "language": "Python",
      "line": 17,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "test_main_with_no_model",
      "path": "./tooling/test_agent_shell.py",
      "language": "Python",
      "line": 25,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "TestNewSelfImprovementCLI",
      "path": "./tooling/test_new_self_improvement_cli.py",
      "language": "Python",
      "line": 11,
      "kind": "class",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "setUp",
      "path": "./tooling/test_new_self_improvement_cli.py",
      "language": "Python",
      "line": 13,
      "kind": "function",
      "docstring": "Set up a clean proposals directory for each test."
    },
    {
      "_type": "tag",
      "name": "tearDown",
      "path": "./tooling/test_new_self_improvement_cli.py",
      "language": "Python",
      "line": 20,
      "kind": "function",
      "docstring": "Clean up the proposals directory after each test."
    },
    {
      "_type": "tag",
      "name": "test_create_proposal_creates_directory_and_file",
      "path": "./tooling/test_new_self_improvement_cli.py",
      "language": "Python",
      "line": 25,
      "kind": "function",
      "docstring": "Tests that `create_proposal` successfully creates a directory and a\nproposal.md file inside it."
    },
    {
      "_type": "tag",
      "name": "test_create_proposal_file_contains_template",
      "path": "./tooling/test_new_self_improvement_cli.py",
      "language": "Python",
      "line": 45,
      "kind": "function",
      "docstring": "Tests that the generated proposal.md file contains the correct\ntemplate content."
    },
    {
      "_type": "tag",
      "name": "test_create_proposal_is_idempotent",
      "path": "./tooling/test_new_self_improvement_cli.py",
      "language": "Python",
      "line": 60,
      "kind": "function",
      "docstring": "Tests that calling create_proposal multiple times results in multiple,\nunique proposal directories."
    },
    {
      "_type": "tag",
      "name": "read_file",
      "path": "./tooling/file_reader.py",
      "language": "Python",
      "line": 1,
      "kind": "function",
      "docstring": "Reads the content of the specified file."
    },
    {
      "_type": "tag",
      "name": "TestDocBuilder",
      "path": "./tooling/test_doc_builder.py",
      "language": "Python",
      "line": 8,
      "kind": "class",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "setUp",
      "path": "./tooling/test_doc_builder.py",
      "language": "Python",
      "line": 10,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "tearDown",
      "path": "./tooling/test_doc_builder.py",
      "language": "Python",
      "line": 35,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "test_generate_system_docs",
      "path": "./tooling/test_doc_builder.py",
      "language": "Python",
      "line": 38,
      "kind": "function",
      "docstring": "Tests the generation of system documentation from Python files."
    },
    {
      "_type": "tag",
      "name": "test_generate_readme",
      "path": "./tooling/test_doc_builder.py",
      "language": "Python",
      "line": 55,
      "kind": "function",
      "docstring": "Tests the generation of a README.md from an AGENTS.md file."
    },
    {
      "_type": "tag",
      "name": "test_generate_pages",
      "path": "./tooling/test_doc_builder.py",
      "language": "Python",
      "line": 71,
      "kind": "function",
      "docstring": "Tests the generation of a GitHub Pages index.html file."
    },
    {
      "_type": "tag",
      "name": "test_generate_readme_missing_agents_md",
      "path": "./tooling/test_doc_builder.py",
      "language": "Python",
      "line": 90,
      "kind": "function",
      "docstring": "Tests that README generation handles a missing AGENTS.md file."
    },
    {
      "_type": "tag",
      "name": "test_system_docs_no_docstring",
      "path": "./tooling/test_doc_builder.py",
      "language": "Python",
      "line": 103,
      "kind": "function",
      "docstring": "Tests that system docs correctly report missing docstrings."
    },
    {
      "_type": "tag",
      "name": "migrate_protocols",
      "path": "./tooling/migrate_protocols.py",
      "language": "Python",
      "line": 6,
      "kind": "function",
      "docstring": "Parses an old AGENTS.md file and migrates its content to .protocol.json\nand .protocol.md files."
    },
    {
      "_type": "tag",
      "name": "TestMasterControlCli",
      "path": "./tooling/test_master_control_cli.py",
      "language": "Python",
      "line": 7,
      "kind": "class",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "test_main_calls_run_agent_loop",
      "path": "./tooling/test_master_control_cli.py",
      "language": "Python",
      "line": 11,
      "kind": "function",
      "docstring": "Tests that the main function calls the agent shell's run_agent_loop."
    },
    {
      "_type": "tag",
      "name": "LogicValue",
      "path": "./tooling/plllu_interpreter.py",
      "language": "Python",
      "line": 26,
      "kind": "class",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "InterpretationError",
      "path": "./tooling/plllu_interpreter.py",
      "language": "Python",
      "line": 33,
      "kind": "class",
      "docstring": "Custom exception for errors during interpretation."
    },
    {
      "_type": "tag",
      "name": "FourValuedInterpreter",
      "path": "./tooling/plllu_interpreter.py",
      "language": "Python",
      "line": 39,
      "kind": "class",
      "docstring": "Interprets a pLLLU AST using a four-valued logic and a resource-passing model."
    },
    {
      "_type": "tag",
      "name": "create_context_from_string",
      "path": "./tooling/plllu_interpreter.py",
      "language": "Python",
      "line": 206,
      "kind": "function",
      "docstring": "Helper to create a context from a string like 'A:T, B:B'.\nThe interpreter now expects the context to be a dictionary mapping\nthe unique atom tuple (name, id) to its LogicValue."
    },
    {
      "_type": "tag",
      "name": "patch_atom_values",
      "path": "./tooling/plllu_interpreter.py",
      "language": "Python",
      "line": 237,
      "kind": "function",
      "docstring": "Recursively patches the AST to replace atom names with (value, id) tuples.\nThis is a hack for testing, as the parser doesn't know about logic values."
    },
    {
      "_type": "tag",
      "name": "interpret",
      "path": "./tooling/plllu_interpreter.py",
      "language": "Python",
      "line": 44,
      "kind": "function",
      "docstring": "Main entry point for interpreting an AST.\nThe initial context is a Counter of atoms available."
    },
    {
      "_type": "tag",
      "name": "_evaluate",
      "path": "./tooling/plllu_interpreter.py",
      "language": "Python",
      "line": 59,
      "kind": "function",
      "docstring": "Dispatcher that evaluates a node against a given context.\nReturns a tuple: (LogicValue, remaining_context_as_Counter)."
    },
    {
      "_type": "tag",
      "name": "_eval_atom",
      "path": "./tooling/plllu_interpreter.py",
      "language": "Python",
      "line": 74,
      "kind": "function",
      "docstring": "Evaluates an atom by consuming it from the context."
    },
    {
      "_type": "tag",
      "name": "_eval_unary_op",
      "path": "./tooling/plllu_interpreter.py",
      "language": "Python",
      "line": 93,
      "kind": "function",
      "docstring": "Evaluates a unary op by evaluating its child and transforming the value.\nThe context is passed through the operation."
    },
    {
      "_type": "tag",
      "name": "_eval_binary_op",
      "path": "./tooling/plllu_interpreter.py",
      "language": "Python",
      "line": 135,
      "kind": "function",
      "docstring": "Evaluates a binary op. Additives use a shared context, multiplicatives split it."
    },
    {
      "_type": "tag",
      "name": "TestRefactor",
      "path": "./tooling/test_refactor.py",
      "language": "Python",
      "line": 12,
      "kind": "class",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "setUp",
      "path": "./tooling/test_refactor.py",
      "language": "Python",
      "line": 14,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "tearDown",
      "path": "./tooling/test_refactor.py",
      "language": "Python",
      "line": 26,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "test_find_symbol_definition",
      "path": "./tooling/test_refactor.py",
      "language": "Python",
      "line": 29,
      "kind": "function",
      "docstring": "Tests finding a symbol's definition."
    },
    {
      "_type": "tag",
      "name": "test_find_references",
      "path": "./tooling/test_refactor.py",
      "language": "Python",
      "line": 35,
      "kind": "function",
      "docstring": "Tests finding references to a symbol."
    },
    {
      "_type": "tag",
      "name": "test_main_plan_generation",
      "path": "./tooling/test_refactor.py",
      "language": "Python",
      "line": 57,
      "kind": "function",
      "docstring": "Tests that the main function generates a correct refactoring plan."
    },
    {
      "_type": "tag",
      "name": "test_symbol_not_found",
      "path": "./tooling/test_refactor.py",
      "language": "Python",
      "line": 74,
      "kind": "function",
      "docstring": "Tests that the tool exits if the symbol is not found."
    },
    {
      "_type": "tag",
      "name": "load_local_graph",
      "path": "./tooling/knowledge_integrator.py",
      "language": "Python",
      "line": 18,
      "kind": "function",
      "docstring": "Loads the local RDF graph from a file."
    },
    {
      "_type": "tag",
      "name": "extract_concepts",
      "path": "./tooling/knowledge_integrator.py",
      "language": "Python",
      "line": 27,
      "kind": "function",
      "docstring": "Extracts key concepts (e.g., tools) from the local graph to query externally.\nThis version dynamically extracts tool names from the graph."
    },
    {
      "_type": "tag",
      "name": "query_dbpedia",
      "path": "./tooling/knowledge_integrator.py",
      "language": "Python",
      "line": 71,
      "kind": "function",
      "docstring": "Queries DBPedia for a given concept and returns a graph of results."
    },
    {
      "_type": "tag",
      "name": "run_knowledge_integration",
      "path": "./tooling/knowledge_integrator.py",
      "language": "Python",
      "line": 103,
      "kind": "function",
      "docstring": "The main library function to run the knowledge integration process.\nIt loads a graph, extracts concepts, queries DBPedia, and saves the\nenriched graph."
    },
    {
      "_type": "tag",
      "name": "TestPlanManager",
      "path": "./tooling/test_plan_manager.py",
      "language": "Python",
      "line": 15,
      "kind": "class",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "setUp",
      "path": "./tooling/test_plan_manager.py",
      "language": "Python",
      "line": 17,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "tearDown",
      "path": "./tooling/test_plan_manager.py",
      "language": "Python",
      "line": 30,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "test_get_and_save_registry",
      "path": "./tooling/test_plan_manager.py",
      "language": "Python",
      "line": 33,
      "kind": "function",
      "docstring": "Tests that the registry can be read from and saved to a file."
    },
    {
      "_type": "tag",
      "name": "test_register_plan",
      "path": "./tooling/test_plan_manager.py",
      "language": "Python",
      "line": 42,
      "kind": "function",
      "docstring": "Tests registering a new plan."
    },
    {
      "_type": "tag",
      "name": "test_register_duplicate_plan_fails",
      "path": "./tooling/test_plan_manager.py",
      "language": "Python",
      "line": 52,
      "kind": "function",
      "docstring": "Tests that registering a duplicate plan name fails."
    },
    {
      "_type": "tag",
      "name": "test_register_non_existent_plan_fails",
      "path": "./tooling/test_plan_manager.py",
      "language": "Python",
      "line": 59,
      "kind": "function",
      "docstring": "Tests that registering a non-existent plan file fails."
    },
    {
      "_type": "tag",
      "name": "test_deregister_plan",
      "path": "./tooling/test_plan_manager.py",
      "language": "Python",
      "line": 64,
      "kind": "function",
      "docstring": "Tests deregistering an existing plan."
    },
    {
      "_type": "tag",
      "name": "test_deregister_non_existent_plan_fails",
      "path": "./tooling/test_plan_manager.py",
      "language": "Python",
      "line": 75,
      "kind": "function",
      "docstring": "Tests that deregistering a non-existent plan name fails."
    },
    {
      "_type": "tag",
      "name": "test_list_plans",
      "path": "./tooling/test_plan_manager.py",
      "language": "Python",
      "line": 81,
      "kind": "function",
      "docstring": "Tests that listing plans prints the correct information."
    },
    {
      "_type": "tag",
      "name": "ApplToLfiIllCompiler",
      "path": "./tooling/appl_to_lfi_ill.py",
      "language": "Python",
      "line": 19,
      "kind": "class",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "main",
      "path": "./tooling/appl_to_lfi_ill.py",
      "language": "Python",
      "line": 103,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "__init__",
      "path": "./tooling/appl_to_lfi_ill.py",
      "language": "Python",
      "line": 20,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "compile",
      "path": "./tooling/appl_to_lfi_ill.py",
      "language": "Python",
      "line": 23,
      "kind": "function",
      "docstring": "Recursively walks the APPL AST and translates it to an LFI ILL AST."
    },
    {
      "_type": "tag",
      "name": "compile_type",
      "path": "./tooling/appl_to_lfi_ill.py",
      "language": "Python",
      "line": 96,
      "kind": "function",
      "docstring": "Translates APPL types to LFI ILL types."
    },
    {
      "_type": "tag",
      "name": "_get_gitignore_patterns",
      "path": "./tooling/filesystem_lister.py",
      "language": "Python",
      "line": 9,
      "kind": "function",
      "docstring": "Reads and parses the .gitignore file."
    },
    {
      "_type": "tag",
      "name": "list_all_files_and_dirs",
      "path": "./tooling/filesystem_lister.py",
      "language": "Python",
      "line": 19,
      "kind": "function",
      "docstring": "Walks through a directory and its subdirectories and returns a sorted list of all\nfiles and directories.\n\nArgs:\n    root_dir (str): The root directory to start the walk from.\n    use_gitignore (bool): If True, respects the patterns in the .gitignore file."
    },
    {
      "_type": "tag",
      "name": "main",
      "path": "./tooling/plllu_runner.py",
      "language": "Python",
      "line": 21,
      "kind": "function",
      "docstring": "This tool provides a command-line interface for running .plllu files.\nIt integrates the pLLLU lexer, parser, and interpreter to execute\nthe logic defined in a given pLLLU source file."
    },
    {
      "_type": "tag",
      "name": "get_module_docstring",
      "path": "./tooling/doc_builder.py",
      "language": "Python",
      "line": 25,
      "kind": "function",
      "docstring": "Parses a Python file and extracts its module-level docstring."
    },
    {
      "_type": "tag",
      "name": "get_protocol_summary",
      "path": "./tooling/doc_builder.py",
      "language": "Python",
      "line": 37,
      "kind": "function",
      "docstring": "Parses an AGENTS.md file and extracts a list of protocol summaries."
    },
    {
      "_type": "tag",
      "name": "FunctionDoc",
      "path": "./tooling/doc_builder.py",
      "language": "Python",
      "line": 64,
      "kind": "class",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "ClassDoc",
      "path": "./tooling/doc_builder.py",
      "language": "Python",
      "line": 71,
      "kind": "class",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "ModuleDoc",
      "path": "./tooling/doc_builder.py",
      "language": "Python",
      "line": 78,
      "kind": "class",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "_format_default_value",
      "path": "./tooling/doc_builder.py",
      "language": "Python",
      "line": 92,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "format_args",
      "path": "./tooling/doc_builder.py",
      "language": "Python",
      "line": 100,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "DocVisitor",
      "path": "./tooling/doc_builder.py",
      "language": "Python",
      "line": 133,
      "kind": "class",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "parse_file_for_docs",
      "path": "./tooling/doc_builder.py",
      "language": "Python",
      "line": 165,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "generate_documentation_for_module",
      "path": "./tooling/doc_builder.py",
      "language": "Python",
      "line": 184,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "find_python_files",
      "path": "./tooling/doc_builder.py",
      "language": "Python",
      "line": 214,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "generate_system_docs",
      "path": "./tooling/doc_builder.py",
      "language": "Python",
      "line": 224,
      "kind": "function",
      "docstring": "Generates the detailed SYSTEM_DOCUMENTATION.md."
    },
    {
      "_type": "tag",
      "name": "generate_readme",
      "path": "./tooling/doc_builder.py",
      "language": "Python",
      "line": 250,
      "kind": "function",
      "docstring": "Generates the high-level README.md for a module."
    },
    {
      "_type": "tag",
      "name": "generate_pages",
      "path": "./tooling/doc_builder.py",
      "language": "Python",
      "line": 287,
      "kind": "function",
      "docstring": "Generates the index.html for GitHub Pages."
    },
    {
      "_type": "tag",
      "name": "generate_tool_readme",
      "path": "./tooling/doc_builder.py",
      "language": "Python",
      "line": 321,
      "kind": "function",
      "docstring": "Generates a README.md for a single tool from its docstring."
    },
    {
      "_type": "tag",
      "name": "generate_tooling_readme",
      "path": "./tooling/doc_builder.py",
      "language": "Python",
      "line": 341,
      "kind": "function",
      "docstring": "Generates a single README.md for the tooling directory."
    },
    {
      "_type": "tag",
      "name": "main",
      "path": "./tooling/doc_builder.py",
      "language": "Python",
      "line": 359,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "__init__",
      "path": "./tooling/doc_builder.py",
      "language": "Python",
      "line": 65,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "__init__",
      "path": "./tooling/doc_builder.py",
      "language": "Python",
      "line": 72,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "__init__",
      "path": "./tooling/doc_builder.py",
      "language": "Python",
      "line": 79,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "__init__",
      "path": "./tooling/doc_builder.py",
      "language": "Python",
      "line": 134,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "visit_FunctionDef",
      "path": "./tooling/doc_builder.py",
      "language": "Python",
      "line": 139,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "visit_ClassDef",
      "path": "./tooling/doc_builder.py",
      "language": "Python",
      "line": 151,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "parse_concepts_from_agents_md",
      "path": "./tooling/reorientation_manager.py",
      "language": "Python",
      "line": 41,
      "kind": "function",
      "docstring": "Parses an AGENTS.md file to extract a set of key concepts.\nThis version uses a simple regex to find protocol IDs and tool names."
    },
    {
      "_type": "tag",
      "name": "run_temporal_orientation",
      "path": "./tooling/reorientation_manager.py",
      "language": "Python",
      "line": 53,
      "kind": "function",
      "docstring": "Runs the temporal_orienter.py tool for a given concept."
    },
    {
      "_type": "tag",
      "name": "update_temporal_orientations",
      "path": "./tooling/reorientation_manager.py",
      "language": "Python",
      "line": 79,
      "kind": "function",
      "docstring": "Updates the temporal orientations knowledge base."
    },
    {
      "_type": "tag",
      "name": "check_for_deep_research_trigger",
      "path": "./tooling/reorientation_manager.py",
      "language": "Python",
      "line": 109,
      "kind": "function",
      "docstring": "Checks if any of the new concepts should trigger a deep research cycle."
    },
    {
      "_type": "tag",
      "name": "main",
      "path": "./tooling/reorientation_manager.py",
      "language": "Python",
      "line": 123,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "denormalize_x",
      "path": "./tooling/gemini_computer_use.py",
      "language": "Python",
      "line": 22,
      "kind": "function",
      "docstring": "Convert normalized x coordinate (0-1000) to actual pixel coordinate."
    },
    {
      "_type": "tag",
      "name": "denormalize_y",
      "path": "./tooling/gemini_computer_use.py",
      "language": "Python",
      "line": 27,
      "kind": "function",
      "docstring": "Convert normalized y coordinate (0-1000) to actual pixel coordinate."
    },
    {
      "_type": "tag",
      "name": "execute_function_calls",
      "path": "./tooling/gemini_computer_use.py",
      "language": "Python",
      "line": 32,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "get_function_responses",
      "path": "./tooling/gemini_computer_use.py",
      "language": "Python",
      "line": 81,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "main",
      "path": "./tooling/gemini_computer_use.py",
      "language": "Python",
      "line": 104,
      "kind": "function",
      "docstring": "The main entry point for the GeminiComputerUse tool."
    },
    {
      "_type": "tag",
      "name": "generate_executable_agents_md",
      "path": "./tooling/generate_agents_md.py",
      "language": "Python",
      "line": 4,
      "kind": "function",
      "docstring": "Generates a self-executing AGENTS.md file by embedding the markdown\ncontent into a Python script's docstring."
    },
    {
      "_type": "tag",
      "name": "main",
      "path": "./tooling/generate_agents_md.py",
      "language": "Python",
      "line": 66,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "main",
      "path": "./tooling/capability_verifier.py",
      "language": "Python",
      "line": 31,
      "kind": "function",
      "docstring": "A tool to verify that the agent can monotonically improve its capabilities.\n\nThis tool works by:\n1. Running a target test file that is known to fail, confirming the agent lacks a capability.\n2. Invoking the agent's self-correction mechanism to learn the new capability.\n3. Running the target test again to confirm it now passes.\n4. Running the full test suite to ensure no existing capabilities were lost."
    },
    {
      "_type": "tag",
      "name": "TestEnvironmentalProbe",
      "path": "./tooling/test_environmental_probe.py",
      "language": "Python",
      "line": 12,
      "kind": "class",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "setUp",
      "path": "./tooling/test_environmental_probe.py",
      "language": "Python",
      "line": 14,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "tearDown",
      "path": "./tooling/test_environmental_probe.py",
      "language": "Python",
      "line": 19,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "test_probe_filesystem",
      "path": "./tooling/test_environmental_probe.py",
      "language": "Python",
      "line": 23,
      "kind": "function",
      "docstring": "Tests the filesystem probe."
    },
    {
      "_type": "tag",
      "name": "test_probe_network_success",
      "path": "./tooling/test_environmental_probe.py",
      "language": "Python",
      "line": 30,
      "kind": "function",
      "docstring": "Tests the network probe with a successful connection."
    },
    {
      "_type": "tag",
      "name": "test_probe_network_timeout",
      "path": "./tooling/test_environmental_probe.py",
      "language": "Python",
      "line": 41,
      "kind": "function",
      "docstring": "Tests the network probe with a timeout."
    },
    {
      "_type": "tag",
      "name": "test_probe_environment_variables",
      "path": "./tooling/test_environmental_probe.py",
      "language": "Python",
      "line": 47,
      "kind": "function",
      "docstring": "Tests the environment variable probe."
    },
    {
      "_type": "tag",
      "name": "test_probe_environment_variables_missing",
      "path": "./tooling/test_environmental_probe.py",
      "language": "Python",
      "line": 55,
      "kind": "function",
      "docstring": "Tests the environment variable probe when PATH is missing."
    },
    {
      "_type": "tag",
      "name": "load_lessons",
      "path": "./tooling/self_correction_orchestrator.py",
      "language": "Python",
      "line": 18,
      "kind": "function",
      "docstring": "Loads all lessons from the JSONL file."
    },
    {
      "_type": "tag",
      "name": "save_lessons",
      "path": "./tooling/self_correction_orchestrator.py",
      "language": "Python",
      "line": 27,
      "kind": "function",
      "docstring": "Saves a list of lessons back to the JSONL file, overwriting it."
    },
    {
      "_type": "tag",
      "name": "run_command",
      "path": "./tooling/self_correction_orchestrator.py",
      "language": "Python",
      "line": 34,
      "kind": "function",
      "docstring": "Runs a command and returns True on success, False on failure."
    },
    {
      "_type": "tag",
      "name": "process_lessons",
      "path": "./tooling/self_correction_orchestrator.py",
      "language": "Python",
      "line": 46,
      "kind": "function",
      "docstring": "Processes all pending lessons, applies them, and updates their status.\nReturns True if any changes were made, False otherwise."
    },
    {
      "_type": "tag",
      "name": "main",
      "path": "./tooling/self_correction_orchestrator.py",
      "language": "Python",
      "line": 159,
      "kind": "function",
      "docstring": "Main function to run the self-correction workflow."
    },
    {
      "_type": "tag",
      "name": "get_applicable_protocols",
      "path": "./tooling/protocol_oracle.py",
      "language": "Python",
      "line": 18,
      "kind": "function",
      "docstring": "Queries the graph to find protocols that are applicable to the given context.\nThis function dynamically loads and executes the `is_applicable` function\nfrom the Python protocol files."
    },
    {
      "_type": "tag",
      "name": "get_rules_for_protocols",
      "path": "./tooling/protocol_oracle.py",
      "language": "Python",
      "line": 82,
      "kind": "function",
      "docstring": "Retrieves all rules associated with the given list of protocol URIs."
    },
    {
      "_type": "tag",
      "name": "main",
      "path": "./tooling/protocol_oracle.py",
      "language": "Python",
      "line": 119,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "TestHdlProver",
      "path": "./tooling/test_hdl_prover.py",
      "language": "Python",
      "line": 14,
      "kind": "class",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "test_parse_formula",
      "path": "./tooling/test_hdl_prover.py",
      "language": "Python",
      "line": 16,
      "kind": "function",
      "docstring": "Tests the formula parser."
    },
    {
      "_type": "tag",
      "name": "test_parse_sequent",
      "path": "./tooling/test_hdl_prover.py",
      "language": "Python",
      "line": 26,
      "kind": "function",
      "docstring": "Tests the sequent parser."
    },
    {
      "_type": "tag",
      "name": "test_prove_provable_sequent",
      "path": "./tooling/test_hdl_prover.py",
      "language": "Python",
      "line": 35,
      "kind": "function",
      "docstring": "Tests a known provable sequent."
    },
    {
      "_type": "tag",
      "name": "test_prove_unprovable_sequent",
      "path": "./tooling/test_hdl_prover.py",
      "language": "Python",
      "line": 40,
      "kind": "function",
      "docstring": "Tests a known unprovable sequent."
    },
    {
      "_type": "tag",
      "name": "test_main_provable",
      "path": "./tooling/test_hdl_prover.py",
      "language": "Python",
      "line": 46,
      "kind": "function",
      "docstring": "Tests the main function with a provable sequent."
    },
    {
      "_type": "tag",
      "name": "test_main_unprovable",
      "path": "./tooling/test_hdl_prover.py",
      "language": "Python",
      "line": 51,
      "kind": "function",
      "docstring": "Tests the main function with an unprovable sequent."
    },
    {
      "_type": "tag",
      "name": "test_main_invalid_sequent",
      "path": "./tooling/test_hdl_prover.py",
      "language": "Python",
      "line": 56,
      "kind": "function",
      "docstring": "Tests that the main function exits on a parsing error."
    },
    {
      "_type": "tag",
      "name": "_log_event",
      "path": "./tooling/fdc_cli.py",
      "language": "Python",
      "line": 61,
      "kind": "function",
      "docstring": "Appends a new log entry to the activity log, ensuring it's on a new line."
    },
    {
      "_type": "tag",
      "name": "_create_log_entry",
      "path": "./tooling/fdc_cli.py",
      "language": "Python",
      "line": 75,
      "kind": "function",
      "docstring": "Creates a structured log entry dictionary."
    },
    {
      "_type": "tag",
      "name": "close_task",
      "path": "./tooling/fdc_cli.py",
      "language": "Python",
      "line": 91,
      "kind": "function",
      "docstring": "Automates the closing of a Finite Development Cycle."
    },
    {
      "_type": "tag",
      "name": "_validate_action",
      "path": "./tooling/fdc_cli.py",
      "language": "Python",
      "line": 125,
      "kind": "function",
      "docstring": "Validates a single, non-loop action."
    },
    {
      "_type": "tag",
      "name": "_validate_plan_recursive",
      "path": "./tooling/fdc_cli.py",
      "language": "Python",
      "line": 182,
      "kind": "function",
      "docstring": "Recursively validates a block of a plan."
    },
    {
      "_type": "tag",
      "name": "validate_plan",
      "path": "./tooling/fdc_cli.py",
      "language": "Python",
      "line": 243,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "analyze_plan",
      "path": "./tooling/fdc_cli.py",
      "language": "Python",
      "line": 271,
      "kind": "function",
      "docstring": "Analyzes a plan file to determine its complexity class and modality."
    },
    {
      "_type": "tag",
      "name": "start_task",
      "path": "./tooling/fdc_cli.py",
      "language": "Python",
      "line": 318,
      "kind": "function",
      "docstring": "Initiates the AORP cascade for a new task."
    },
    {
      "_type": "tag",
      "name": "main",
      "path": "./tooling/fdc_cli.py",
      "language": "Python",
      "line": 385,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "LBAValidator",
      "path": "./tooling/lba_validator.py",
      "language": "Python",
      "line": 19,
      "kind": "class",
      "docstring": "A validator that uses LBA principles to enforce CSDC rules."
    },
    {
      "_type": "tag",
      "name": "validate",
      "path": "./tooling/lba_validator.py",
      "language": "Python",
      "line": 24,
      "kind": "function",
      "docstring": "Validates a plan against a given CSDC model.\n\nArgs:\n    plan_content: The string content of the plan.\n    model: The CSDC model to validate against ('A' or 'B').\n\nReturns:\n    A tuple containing a boolean indicating validity and a string with an error message."
    },
    {
      "_type": "tag",
      "name": "run_command",
      "path": "./tooling/pre_submit_check.py",
      "language": "Python",
      "line": 5,
      "kind": "function",
      "docstring": "Runs a command and exits if it fails."
    },
    {
      "_type": "tag",
      "name": "main",
      "path": "./tooling/pre_submit_check.py",
      "language": "Python",
      "line": 18,
      "kind": "function",
      "docstring": "Main function to run pre-submission checks."
    },
    {
      "_type": "tag",
      "name": "TestPlanParser",
      "path": "./tooling/test_plan_parser.py",
      "language": "Python",
      "line": 5,
      "kind": "class",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "test_parse_single_command",
      "path": "./tooling/test_plan_parser.py",
      "language": "Python",
      "line": 7,
      "kind": "function",
      "docstring": "Tests parsing a single command."
    },
    {
      "_type": "tag",
      "name": "test_parse_multiple_commands",
      "path": "./tooling/test_plan_parser.py",
      "language": "Python",
      "line": 14,
      "kind": "function",
      "docstring": "Tests parsing multiple commands separated by '---'."
    },
    {
      "_type": "tag",
      "name": "test_parse_multiline_args",
      "path": "./tooling/test_plan_parser.py",
      "language": "Python",
      "line": 22,
      "kind": "function",
      "docstring": "Tests parsing a command with multi-line arguments."
    },
    {
      "_type": "tag",
      "name": "test_ignore_comments_and_empty_lines",
      "path": "./tooling/test_plan_parser.py",
      "language": "Python",
      "line": 31,
      "kind": "function",
      "docstring": "Tests that the parser ignores comments and empty lines."
    },
    {
      "_type": "tag",
      "name": "TestSelfCorrectionOrchestrator",
      "path": "./tooling/test_self_correction_orchestrator.py",
      "language": "Python",
      "line": 14,
      "kind": "class",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "setUp",
      "path": "./tooling/test_self_correction_orchestrator.py",
      "language": "Python",
      "line": 16,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "tearDown",
      "path": "./tooling/test_self_correction_orchestrator.py",
      "language": "Python",
      "line": 34,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "test_load_and_save_lessons",
      "path": "./tooling/test_self_correction_orchestrator.py",
      "language": "Python",
      "line": 37,
      "kind": "function",
      "docstring": "Tests that lessons can be loaded from and saved to the JSONL file."
    },
    {
      "_type": "tag",
      "name": "test_process_update_protocol_lesson",
      "path": "./tooling/test_self_correction_orchestrator.py",
      "language": "Python",
      "line": 58,
      "kind": "function",
      "docstring": "Tests processing a lesson that updates a protocol."
    },
    {
      "_type": "tag",
      "name": "test_process_code_change_lesson",
      "path": "./tooling/test_self_correction_orchestrator.py",
      "language": "Python",
      "line": 93,
      "kind": "function",
      "docstring": "Tests processing a lesson that proposes a code change."
    },
    {
      "_type": "tag",
      "name": "test_failed_command",
      "path": "./tooling/test_self_correction_orchestrator.py",
      "language": "Python",
      "line": 123,
      "kind": "function",
      "docstring": "Tests that lesson status is set to 'failed' when a command fails."
    },
    {
      "_type": "tag",
      "name": "test_main_flow_rebuilds_agents_md",
      "path": "./tooling/test_self_correction_orchestrator.py",
      "language": "Python",
      "line": 143,
      "kind": "function",
      "docstring": "Tests that the main function calls to rebuild AGENTS.md after changes."
    },
    {
      "_type": "tag",
      "name": "test_no_pending_lessons",
      "path": "./tooling/test_self_correction_orchestrator.py",
      "language": "Python",
      "line": 156,
      "kind": "function",
      "docstring": "Tests that the orchestrator does nothing if there are no pending lessons."
    },
    {
      "_type": "tag",
      "name": "test_malformed_lesson",
      "path": "./tooling/test_self_correction_orchestrator.py",
      "language": "Python",
      "line": 169,
      "kind": "function",
      "docstring": "Tests that malformed lessons are skipped and status is not changed."
    },
    {
      "_type": "tag",
      "name": "test_unknown_action_type",
      "path": "./tooling/test_self_correction_orchestrator.py",
      "language": "Python",
      "line": 178,
      "kind": "function",
      "docstring": "Tests that lessons with unknown action types are skipped."
    },
    {
      "_type": "tag",
      "name": "ParaconsistentTruth",
      "path": "./tooling/lfi_udc_model.py",
      "language": "Python",
      "line": 28,
      "kind": "class",
      "docstring": "Represents the four truth values in a first-degree entailment logic (FDE),\nwhich is a common foundation for Logics of Formal Inconsistency."
    },
    {
      "_type": "tag",
      "name": "ParaconsistentState",
      "path": "./tooling/lfi_udc_model.py",
      "language": "Python",
      "line": 43,
      "kind": "class",
      "docstring": "A variable whose truth value is modeled paraconsistently.\nIt can be true, false, both, or neither."
    },
    {
      "_type": "tag",
      "name": "LFIInstruction",
      "path": "./tooling/lfi_udc_model.py",
      "language": "Python",
      "line": 68,
      "kind": "class",
      "docstring": "A wrapper for UDC instructions to be used in the LFI Executor."
    },
    {
      "_type": "tag",
      "name": "LFIExecutor",
      "path": "./tooling/lfi_udc_model.py",
      "language": "Python",
      "line": 169,
      "kind": "class",
      "docstring": "A paraconsistent interpreter for UDC plans.\n\nIt models the state of the UDC machine not with concrete values, but with\nParaconsistentState objects. This allows it to explore the consequences\nof contradictory assumptions."
    },
    {
      "_type": "tag",
      "name": "ParaconsistentHaltingDecider",
      "path": "./tooling/lfi_udc_model.py",
      "language": "Python",
      "line": 215,
      "kind": "class",
      "docstring": "Analyzes a UDC plan using the LFI Executor to determine its\nparaconsistent halting status."
    },
    {
      "_type": "tag",
      "name": "__str__",
      "path": "./tooling/lfi_udc_model.py",
      "language": "Python",
      "line": 39,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "__init__",
      "path": "./tooling/lfi_udc_model.py",
      "language": "Python",
      "line": 49,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "is_true",
      "path": "./tooling/lfi_udc_model.py",
      "language": "Python",
      "line": 52,
      "kind": "function",
      "docstring": "Classical check: Is True in the value set?"
    },
    {
      "_type": "tag",
      "name": "is_false",
      "path": "./tooling/lfi_udc_model.py",
      "language": "Python",
      "line": 56,
      "kind": "function",
      "docstring": "Classical check: Is False in the value set?"
    },
    {
      "_type": "tag",
      "name": "is_consistent",
      "path": "./tooling/lfi_udc_model.py",
      "language": "Python",
      "line": 60,
      "kind": "function",
      "docstring": "A state is consistent if it's not BOTH."
    },
    {
      "_type": "tag",
      "name": "__repr__",
      "path": "./tooling/lfi_udc_model.py",
      "language": "Python",
      "line": 64,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "__init__",
      "path": "./tooling/lfi_udc_model.py",
      "language": "Python",
      "line": 71,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "execute",
      "path": "./tooling/lfi_udc_model.py",
      "language": "Python",
      "line": 75,
      "kind": "function",
      "docstring": "Executes the instruction on the given LFI executor state."
    },
    {
      "_type": "tag",
      "name": "_exec_unknown",
      "path": "./tooling/lfi_udc_model.py",
      "language": "Python",
      "line": 82,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "_exec_halt",
      "path": "./tooling/lfi_udc_model.py",
      "language": "Python",
      "line": 86,
      "kind": "function",
      "docstring": "The HALT instruction sets the halted state to TRUE."
    },
    {
      "_type": "tag",
      "name": "__repr__",
      "path": "./tooling/lfi_udc_model.py",
      "language": "Python",
      "line": 96,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "_exec_left",
      "path": "./tooling/lfi_udc_model.py",
      "language": "Python",
      "line": 102,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "_exec_right",
      "path": "./tooling/lfi_udc_model.py",
      "language": "Python",
      "line": 105,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "_exec_read",
      "path": "./tooling/lfi_udc_model.py",
      "language": "Python",
      "line": 108,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "_exec_write",
      "path": "./tooling/lfi_udc_model.py",
      "language": "Python",
      "line": 111,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "_exec_mov",
      "path": "./tooling/lfi_udc_model.py",
      "language": "Python",
      "line": 114,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "_exec_add",
      "path": "./tooling/lfi_udc_model.py",
      "language": "Python",
      "line": 117,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "_exec_sub",
      "path": "./tooling/lfi_udc_model.py",
      "language": "Python",
      "line": 120,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "_exec_inc",
      "path": "./tooling/lfi_udc_model.py",
      "language": "Python",
      "line": 123,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "_exec_dec",
      "path": "./tooling/lfi_udc_model.py",
      "language": "Python",
      "line": 126,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "_exec_jmp",
      "path": "./tooling/lfi_udc_model.py",
      "language": "Python",
      "line": 129,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "_exec_cmp",
      "path": "./tooling/lfi_udc_model.py",
      "language": "Python",
      "line": 134,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "_exec_je",
      "path": "./tooling/lfi_udc_model.py",
      "language": "Python",
      "line": 142,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "_exec_jne",
      "path": "./tooling/lfi_udc_model.py",
      "language": "Python",
      "line": 156,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "_exec_jg",
      "path": "./tooling/lfi_udc_model.py",
      "language": "Python",
      "line": 159,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "_exec_jl",
      "path": "./tooling/lfi_udc_model.py",
      "language": "Python",
      "line": 162,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "_exec_call",
      "path": "./tooling/lfi_udc_model.py",
      "language": "Python",
      "line": 165,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "__init__",
      "path": "./tooling/lfi_udc_model.py",
      "language": "Python",
      "line": 178,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "get_register",
      "path": "./tooling/lfi_udc_model.py",
      "language": "Python",
      "line": 191,
      "kind": "function",
      "docstring": "Gets a register's state, initializing if not present."
    },
    {
      "_type": "tag",
      "name": "run_step",
      "path": "./tooling/lfi_udc_model.py",
      "language": "Python",
      "line": 197,
      "kind": "function",
      "docstring": "Executes a single instruction step."
    },
    {
      "_type": "tag",
      "name": "__init__",
      "path": "./tooling/lfi_udc_model.py",
      "language": "Python",
      "line": 221,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "_parse_plan",
      "path": "./tooling/lfi_udc_model.py",
      "language": "Python",
      "line": 228,
      "kind": "function",
      "docstring": "Parses the .udc file into instructions and labels, reusing the logic\nfrom the heuristic analyzer."
    },
    {
      "_type": "tag",
      "name": "analyze",
      "path": "./tooling/lfi_udc_model.py",
      "language": "Python",
      "line": 257,
      "kind": "function",
      "docstring": "Runs the analysis and returns the final paraconsistent halting state."
    },
    {
      "_type": "tag",
      "name": "find_dependency_files",
      "path": "./tooling/dependency_graph_generator.py",
      "language": "Python",
      "line": 32,
      "kind": "function",
      "docstring": "Finds all package.json and requirements.txt files, excluding node_modules."
    },
    {
      "_type": "tag",
      "name": "parse_package_json",
      "path": "./tooling/dependency_graph_generator.py",
      "language": "Python",
      "line": 43,
      "kind": "function",
      "docstring": "Parses a single package.json file to extract its name and dependencies."
    },
    {
      "_type": "tag",
      "name": "parse_requirements_txt",
      "path": "./tooling/dependency_graph_generator.py",
      "language": "Python",
      "line": 66,
      "kind": "function",
      "docstring": "Parses a requirements.txt file to extract its dependencies."
    },
    {
      "_type": "tag",
      "name": "generate_dependency_graph",
      "path": "./tooling/dependency_graph_generator.py",
      "language": "Python",
      "line": 104,
      "kind": "function",
      "docstring": "Generates a dependency graph for all supported dependency files found."
    },
    {
      "_type": "tag",
      "name": "main",
      "path": "./tooling/dependency_graph_generator.py",
      "language": "Python",
      "line": 163,
      "kind": "function",
      "docstring": "Main function to generate and save the dependency graph."
    },
    {
      "_type": "tag",
      "name": "TestCodeSuggester",
      "path": "./tooling/test_code_suggester.py",
      "language": "Python",
      "line": 8,
      "kind": "class",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "setUp",
      "path": "./tooling/test_code_suggester.py",
      "language": "Python",
      "line": 10,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "tearDown",
      "path": "./tooling/test_code_suggester.py",
      "language": "Python",
      "line": 19,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "test_generate_suggestion_plan",
      "path": "./tooling/test_code_suggester.py",
      "language": "Python",
      "line": 22,
      "kind": "function",
      "docstring": "Tests the generation of a suggestion plan file."
    },
    {
      "_type": "tag",
      "name": "test_main_flow",
      "path": "./tooling/test_code_suggester.py",
      "language": "Python",
      "line": 57,
      "kind": "function",
      "docstring": "Tests the main function of the code suggester."
    },
    {
      "_type": "tag",
      "name": "ExecutableCommand",
      "path": "./tooling/jules_agent/plan_runner.py",
      "language": "Python",
      "line": 25,
      "kind": "class",
      "docstring": "Represents a single, parsed command from a self-executing plan."
    },
    {
      "_type": "tag",
      "name": "parse_executable_plan",
      "path": "./tooling/jules_agent/plan_runner.py",
      "language": "Python",
      "line": 37,
      "kind": "function",
      "docstring": "Parses the raw text of a plan into a list of ExecutableCommand objects."
    },
    {
      "_type": "tag",
      "name": "run_in_bash_session",
      "path": "./tooling/jules_agent/plan_runner.py",
      "language": "Python",
      "line": 94,
      "kind": "function",
      "docstring": "Simulates running a command in a bash session."
    },
    {
      "_type": "tag",
      "name": "message_user",
      "path": "./tooling/jules_agent/plan_runner.py",
      "language": "Python",
      "line": 105,
      "kind": "function",
      "docstring": "Simulates sending a message to the user."
    },
    {
      "_type": "tag",
      "name": "execute_command",
      "path": "./tooling/jules_agent/plan_runner.py",
      "language": "Python",
      "line": 119,
      "kind": "function",
      "docstring": "Executes a single command and returns True on success, False on failure."
    },
    {
      "_type": "tag",
      "name": "run_plan",
      "path": "./tooling/jules_agent/plan_runner.py",
      "language": "Python",
      "line": 155,
      "kind": "function",
      "docstring": "Parses and executes a plan."
    },
    {
      "_type": "tag",
      "name": "main",
      "path": "./tooling/jules_agent/plan_runner.py",
      "language": "Python",
      "line": 175,
      "kind": "function",
      "docstring": "Main function to run the plan runner from the command line."
    },
    {
      "_type": "tag",
      "name": "get_agents_md_path",
      "path": "./tooling/jules_agent/action_logger.py",
      "language": "Python",
      "line": 6,
      "kind": "function",
      "docstring": "Finds the AGENTS.md file in the given directory."
    },
    {
      "_type": "tag",
      "name": "log_action",
      "path": "./tooling/jules_agent/action_logger.py",
      "language": "Python",
      "line": 14,
      "kind": "function",
      "docstring": "Logs an action to the AGENTS.md file."
    },
    {
      "_type": "tag",
      "name": "get_agents_md_path",
      "path": "./tooling/jules_agent/plan_manager.py",
      "language": "Python",
      "line": 5,
      "kind": "function",
      "docstring": "Finds the AGENTS.md file in the given directory."
    },
    {
      "_type": "tag",
      "name": "inject_plan",
      "path": "./tooling/jules_agent/plan_manager.py",
      "language": "Python",
      "line": 13,
      "kind": "function",
      "docstring": "Injects or updates the plan in the AGENTS.md file."
    },
    {
      "_type": "tag",
      "name": "get_repo_root",
      "path": "./tooling/agent_smith/generate_and_test.py",
      "language": "Python",
      "line": 14,
      "kind": "function",
      "docstring": "Gets the absolute path of the repository root."
    },
    {
      "_type": "tag",
      "name": "log_step",
      "path": "./tooling/agent_smith/generate_and_test.py",
      "language": "Python",
      "line": 19,
      "kind": "function",
      "docstring": "Prints a formatted step message."
    },
    {
      "_type": "tag",
      "name": "run_command",
      "path": "./tooling/agent_smith/generate_and_test.py",
      "language": "Python",
      "line": 24,
      "kind": "function",
      "docstring": "Runs a command in a subprocess and handles errors."
    },
    {
      "_type": "tag",
      "name": "create_sandbox",
      "path": "./tooling/agent_smith/generate_and_test.py",
      "language": "Python",
      "line": 42,
      "kind": "function",
      "docstring": "Creates a clean sandbox directory."
    },
    {
      "_type": "tag",
      "name": "copy_sources",
      "path": "./tooling/agent_smith/generate_and_test.py",
      "language": "Python",
      "line": 52,
      "kind": "function",
      "docstring": "Copies the necessary source files and compiler into the sandbox."
    },
    {
      "_type": "tag",
      "name": "install_dependencies",
      "path": "./tooling/agent_smith/generate_and_test.py",
      "language": "Python",
      "line": 81,
      "kind": "function",
      "docstring": "Installs dependencies from requirements.txt into the sandbox."
    },
    {
      "_type": "tag",
      "name": "apply_mutation",
      "path": "./tooling/agent_smith/generate_and_test.py",
      "language": "Python",
      "line": 104,
      "kind": "function",
      "docstring": "Applies the specified mutation to the sandboxed sources."
    },
    {
      "_type": "tag",
      "name": "compile_variant",
      "path": "./tooling/agent_smith/generate_and_test.py",
      "language": "Python",
      "line": 122,
      "kind": "function",
      "docstring": "Runs the hierarchical compiler inside the sandbox."
    },
    {
      "_type": "tag",
      "name": "verify_variant",
      "path": "./tooling/agent_smith/generate_and_test.py",
      "language": "Python",
      "line": 165,
      "kind": "function",
      "docstring": "Performs a basic verification to check the variant was created correctly."
    },
    {
      "_type": "tag",
      "name": "cleanup_sandbox",
      "path": "./tooling/agent_smith/generate_and_test.py",
      "language": "Python",
      "line": 187,
      "kind": "function",
      "docstring": "Deletes the sandbox directory."
    },
    {
      "_type": "tag",
      "name": "main",
      "path": "./tooling/agent_smith/generate_and_test.py",
      "language": "Python",
      "line": 197,
      "kind": "function",
      "docstring": "Main function to orchestrate the generation and testing process."
    },
    {
      "_type": "tag",
      "name": "hello_world",
      "path": "./tooling/custom_tools/hello_world.py",
      "language": "Python",
      "line": 1,
      "kind": "function",
      "docstring": "Prints a message to the console."
    },
    {
      "_type": "tag",
      "name": "Interpreter",
      "path": "./tooling/aal/interpreter.py",
      "language": "Python",
      "line": 7,
      "kind": "class",
      "docstring": "The AAL interpreter, responsible for state transitions."
    },
    {
      "_type": "tag",
      "name": "get_next_state",
      "path": "./tooling/aal/interpreter.py",
      "language": "Python",
      "line": 10,
      "kind": "function",
      "docstring": "Calculates the next state based on the current state, an action, and the domain's causal laws.\nA fluent is in the next state if there is a causal law 'a causes f if C' where a is the action\nand C is a subset of the current state."
    },
    {
      "_type": "tag",
      "name": "Fluent",
      "path": "./tooling/aal/domain.py",
      "language": "Python",
      "line": 8,
      "kind": "class",
      "docstring": "Represents a fluent (a proposition) in the domain."
    },
    {
      "_type": "tag",
      "name": "Action",
      "path": "./tooling/aal/domain.py",
      "language": "Python",
      "line": 15,
      "kind": "class",
      "docstring": "Represents an action that can be performed by an agent."
    },
    {
      "_type": "tag",
      "name": "CausalLaw",
      "path": "./tooling/aal/domain.py",
      "language": "Python",
      "line": 22,
      "kind": "class",
      "docstring": "Represents a causal law of the form 'a causes f if p1, ..., pn'."
    },
    {
      "_type": "tag",
      "name": "Domain",
      "path": "./tooling/aal/domain.py",
      "language": "Python",
      "line": 31,
      "kind": "class",
      "docstring": "Represents a complete AAL domain description."
    },
    {
      "_type": "tag",
      "name": "__init__",
      "path": "./tooling/aal/domain.py",
      "language": "Python",
      "line": 38,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "parse_aal",
      "path": "./tooling/aal/parser.py",
      "language": "Python",
      "line": 7,
      "kind": "function",
      "docstring": "Parses an AAL string and returns a Domain object."
    },
    {
      "_type": "tag",
      "name": "TestSelfImprovement",
      "path": "./self_improvement_project/test_main.py",
      "language": "Python",
      "line": 6,
      "kind": "class",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "test_diagonalization",
      "path": "./self_improvement_project/test_main.py",
      "language": "Python",
      "line": 8,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "test_process_a",
      "path": "./self_improvement_project/test_main.py",
      "language": "Python",
      "line": 15,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "test_count_leading_zeros",
      "path": "./self_improvement_project/test_main.py",
      "language": "Python",
      "line": 23,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "test_process_b_beneficial_integration",
      "path": "./self_improvement_project/test_main.py",
      "language": "Python",
      "line": 32,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "test_process_b_non_beneficial_rejection",
      "path": "./self_improvement_project/test_main.py",
      "language": "Python",
      "line": 67,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "ProcessA",
      "path": "./self_improvement_project/main.py",
      "language": "Python",
      "line": 5,
      "kind": "class",
      "docstring": "The Innovator"
    },
    {
      "_type": "tag",
      "name": "ProcessB",
      "path": "./self_improvement_project/main.py",
      "language": "Python",
      "line": 14,
      "kind": "class",
      "docstring": "The Stabilizer"
    },
    {
      "_type": "tag",
      "name": "diagonalization",
      "path": "./self_improvement_project/main.py",
      "language": "Python",
      "line": 58,
      "kind": "function",
      "docstring": "A simple diagonalization function.\nIt creates a new element by hashing the concatenation of all elements in the set."
    },
    {
      "_type": "tag",
      "name": "main",
      "path": "./self_improvement_project/main.py",
      "language": "Python",
      "line": 66,
      "kind": "function",
      "docstring": "The main loop for the self-improvement process."
    },
    {
      "_type": "tag",
      "name": "__init__",
      "path": "./self_improvement_project/main.py",
      "language": "Python",
      "line": 7,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "run",
      "path": "./self_improvement_project/main.py",
      "language": "Python",
      "line": 10,
      "kind": "function",
      "docstring": "Generates a new element using diagonalization."
    },
    {
      "_type": "tag",
      "name": "__init__",
      "path": "./self_improvement_project/main.py",
      "language": "Python",
      "line": 16,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "run",
      "path": "./self_improvement_project/main.py",
      "language": "Python",
      "line": 21,
      "kind": "function",
      "docstring": "Analyzes and integrates the new element."
    },
    {
      "_type": "tag",
      "name": "_count_leading_zeros",
      "path": "./self_improvement_project/main.py",
      "language": "Python",
      "line": 30,
      "kind": "function",
      "docstring": "Counts the number of leading '0' characters in a hex string."
    },
    {
      "_type": "tag",
      "name": "is_beneficial",
      "path": "./self_improvement_project/main.py",
      "language": "Python",
      "line": 40,
      "kind": "function",
      "docstring": "Determines if the new element is beneficial.\nA new element is beneficial if adding it to the system state\nresults in a new state whose hash has more leading zeros than the current best."
    },
    {
      "_type": "tag",
      "name": "Object",
      "path": "./aura_lang/interpreter.py",
      "language": "Python",
      "line": 7,
      "kind": "class",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "Integer",
      "path": "./aura_lang/interpreter.py",
      "language": "Python",
      "line": 13,
      "kind": "class",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "String",
      "path": "./aura_lang/interpreter.py",
      "language": "Python",
      "line": 14,
      "kind": "class",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "ReturnValue",
      "path": "./aura_lang/interpreter.py",
      "language": "Python",
      "line": 15,
      "kind": "class",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "Function",
      "path": "./aura_lang/interpreter.py",
      "language": "Python",
      "line": 17,
      "kind": "class",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "Builtin",
      "path": "./aura_lang/interpreter.py",
      "language": "Python",
      "line": 21,
      "kind": "class",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "Environment",
      "path": "./aura_lang/interpreter.py",
      "language": "Python",
      "line": 25,
      "kind": "class",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "_placeholder_agent_call_tool",
      "path": "./aura_lang/interpreter.py",
      "language": "Python",
      "line": 39,
      "kind": "function",
      "docstring": "Placeholder for calling the agent's real tools.\nThis will be replaced by a real implementation provided by the executor."
    },
    {
      "_type": "tag",
      "name": "evaluate",
      "path": "./aura_lang/interpreter.py",
      "language": "Python",
      "line": 57,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "eval_program",
      "path": "./aura_lang/interpreter.py",
      "language": "Python",
      "line": 91,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "eval_block_statement",
      "path": "./aura_lang/interpreter.py",
      "language": "Python",
      "line": 97,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "eval_if_statement",
      "path": "./aura_lang/interpreter.py",
      "language": "Python",
      "line": 103,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "eval_for_statement",
      "path": "./aura_lang/interpreter.py",
      "language": "Python",
      "line": 124,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "eval_print_statement",
      "path": "./aura_lang/interpreter.py",
      "language": "Python",
      "line": 131,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "eval_infix_expression",
      "path": "./aura_lang/interpreter.py",
      "language": "Python",
      "line": 146,
      "kind": "function",
      "docstring": "Handles infix operations like +, -, ==, etc."
    },
    {
      "_type": "tag",
      "name": "eval_identifier",
      "path": "./aura_lang/interpreter.py",
      "language": "Python",
      "line": 171,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "eval_expressions",
      "path": "./aura_lang/interpreter.py",
      "language": "Python",
      "line": 174,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "apply_function",
      "path": "./aura_lang/interpreter.py",
      "language": "Python",
      "line": 176,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "Agent",
      "path": "./aura_lang/interpreter.py",
      "language": "Python",
      "line": 186,
      "kind": "class",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "len_builtin",
      "path": "./aura_lang/interpreter.py",
      "language": "Python",
      "line": 191,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "__init__",
      "path": "./aura_lang/interpreter.py",
      "language": "Python",
      "line": 8,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "__repr__",
      "path": "./aura_lang/interpreter.py",
      "language": "Python",
      "line": 10,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "__init__",
      "path": "./aura_lang/interpreter.py",
      "language": "Python",
      "line": 18,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "__init__",
      "path": "./aura_lang/interpreter.py",
      "language": "Python",
      "line": 22,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "__init__",
      "path": "./aura_lang/interpreter.py",
      "language": "Python",
      "line": 26,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "get",
      "path": "./aura_lang/interpreter.py",
      "language": "Python",
      "line": 28,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "set",
      "path": "./aura_lang/interpreter.py",
      "language": "Python",
      "line": 31,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "__init__",
      "path": "./aura_lang/interpreter.py",
      "language": "Python",
      "line": 187,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "Token",
      "path": "./aura_lang/lexer.py",
      "language": "Python",
      "line": 3,
      "kind": "class",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "Lexer",
      "path": "./aura_lang/lexer.py",
      "language": "Python",
      "line": 11,
      "kind": "class",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "__init__",
      "path": "./aura_lang/lexer.py",
      "language": "Python",
      "line": 4,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "__repr__",
      "path": "./aura_lang/lexer.py",
      "language": "Python",
      "line": 8,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "__init__",
      "path": "./aura_lang/lexer.py",
      "language": "Python",
      "line": 12,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "advance",
      "path": "./aura_lang/lexer.py",
      "language": "Python",
      "line": 17,
      "kind": "function",
      "docstring": "Advance the 'pos' pointer and set the 'current_char' variable."
    },
    {
      "_type": "tag",
      "name": "skip_whitespace",
      "path": "./aura_lang/lexer.py",
      "language": "Python",
      "line": 25,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "skip_comment",
      "path": "./aura_lang/lexer.py",
      "language": "Python",
      "line": 29,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "peek",
      "path": "./aura_lang/lexer.py",
      "language": "Python",
      "line": 34,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "number",
      "path": "./aura_lang/lexer.py",
      "language": "Python",
      "line": 41,
      "kind": "function",
      "docstring": "Return a (multidigit) integer consumed from the input."
    },
    {
      "_type": "tag",
      "name": "_id",
      "path": "./aura_lang/lexer.py",
      "language": "Python",
      "line": 49,
      "kind": "function",
      "docstring": "Handle identifiers and reserved keywords"
    },
    {
      "_type": "tag",
      "name": "string",
      "path": "./aura_lang/lexer.py",
      "language": "Python",
      "line": 59,
      "kind": "function",
      "docstring": "Handle string literals."
    },
    {
      "_type": "tag",
      "name": "get_next_token",
      "path": "./aura_lang/lexer.py",
      "language": "Python",
      "line": 70,
      "kind": "function",
      "docstring": "Lexical analyzer (also known as scanner or tokenizer)"
    },
    {
      "_type": "tag",
      "name": "error",
      "path": "./aura_lang/lexer.py",
      "language": "Python",
      "line": 117,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "AST",
      "path": "./aura_lang/ast.py",
      "language": "Python",
      "line": 3,
      "kind": "class",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "Program",
      "path": "./aura_lang/ast.py",
      "language": "Python",
      "line": 6,
      "kind": "class",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "Statement",
      "path": "./aura_lang/ast.py",
      "language": "Python",
      "line": 10,
      "kind": "class",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "Expression",
      "path": "./aura_lang/ast.py",
      "language": "Python",
      "line": 13,
      "kind": "class",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "FunctionDefinition",
      "path": "./aura_lang/ast.py",
      "language": "Python",
      "line": 16,
      "kind": "class",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "BlockStatement",
      "path": "./aura_lang/ast.py",
      "language": "Python",
      "line": 22,
      "kind": "class",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "LetStatement",
      "path": "./aura_lang/ast.py",
      "language": "Python",
      "line": 26,
      "kind": "class",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "ReturnStatement",
      "path": "./aura_lang/ast.py",
      "language": "Python",
      "line": 31,
      "kind": "class",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "ExpressionStatement",
      "path": "./aura_lang/ast.py",
      "language": "Python",
      "line": 35,
      "kind": "class",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "IfStatement",
      "path": "./aura_lang/ast.py",
      "language": "Python",
      "line": 39,
      "kind": "class",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "ForStatement",
      "path": "./aura_lang/ast.py",
      "language": "Python",
      "line": 45,
      "kind": "class",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "UseStatement",
      "path": "./aura_lang/ast.py",
      "language": "Python",
      "line": 51,
      "kind": "class",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "PrintStatement",
      "path": "./aura_lang/ast.py",
      "language": "Python",
      "line": 56,
      "kind": "class",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "Identifier",
      "path": "./aura_lang/ast.py",
      "language": "Python",
      "line": 63,
      "kind": "class",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "IntegerLiteral",
      "path": "./aura_lang/ast.py",
      "language": "Python",
      "line": 67,
      "kind": "class",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "StringLiteral",
      "path": "./aura_lang/ast.py",
      "language": "Python",
      "line": 71,
      "kind": "class",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "ListLiteral",
      "path": "./aura_lang/ast.py",
      "language": "Python",
      "line": 75,
      "kind": "class",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "CallExpression",
      "path": "./aura_lang/ast.py",
      "language": "Python",
      "line": 79,
      "kind": "class",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "InfixExpression",
      "path": "./aura_lang/ast.py",
      "language": "Python",
      "line": 84,
      "kind": "class",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "MemberAccess",
      "path": "./aura_lang/ast.py",
      "language": "Python",
      "line": 90,
      "kind": "class",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "__init__",
      "path": "./aura_lang/ast.py",
      "language": "Python",
      "line": 7,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "__init__",
      "path": "./aura_lang/ast.py",
      "language": "Python",
      "line": 17,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "__init__",
      "path": "./aura_lang/ast.py",
      "language": "Python",
      "line": 23,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "__init__",
      "path": "./aura_lang/ast.py",
      "language": "Python",
      "line": 27,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "__init__",
      "path": "./aura_lang/ast.py",
      "language": "Python",
      "line": 32,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "__init__",
      "path": "./aura_lang/ast.py",
      "language": "Python",
      "line": 36,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "__init__",
      "path": "./aura_lang/ast.py",
      "language": "Python",
      "line": 40,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "__init__",
      "path": "./aura_lang/ast.py",
      "language": "Python",
      "line": 46,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "__init__",
      "path": "./aura_lang/ast.py",
      "language": "Python",
      "line": 53,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "__init__",
      "path": "./aura_lang/ast.py",
      "language": "Python",
      "line": 58,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "__init__",
      "path": "./aura_lang/ast.py",
      "language": "Python",
      "line": 64,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "__init__",
      "path": "./aura_lang/ast.py",
      "language": "Python",
      "line": 68,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "__init__",
      "path": "./aura_lang/ast.py",
      "language": "Python",
      "line": 72,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "__init__",
      "path": "./aura_lang/ast.py",
      "language": "Python",
      "line": 76,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "__init__",
      "path": "./aura_lang/ast.py",
      "language": "Python",
      "line": 80,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "__init__",
      "path": "./aura_lang/ast.py",
      "language": "Python",
      "line": 85,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "__init__",
      "path": "./aura_lang/ast.py",
      "language": "Python",
      "line": 91,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "Parser",
      "path": "./aura_lang/parser.py",
      "language": "Python",
      "line": 26,
      "kind": "class",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "__init__",
      "path": "./aura_lang/parser.py",
      "language": "Python",
      "line": 27,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "next_token",
      "path": "./aura_lang/parser.py",
      "language": "Python",
      "line": 49,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "parse_program",
      "path": "./aura_lang/parser.py",
      "language": "Python",
      "line": 53,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "parse_statement",
      "path": "./aura_lang/parser.py",
      "language": "Python",
      "line": 62,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "parse_let_statement",
      "path": "./aura_lang/parser.py",
      "language": "Python",
      "line": 71,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "parse_return_statement",
      "path": "./aura_lang/parser.py",
      "language": "Python",
      "line": 80,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "parse_print_statement",
      "path": "./aura_lang/parser.py",
      "language": "Python",
      "line": 86,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "parse_expression_statement",
      "path": "./aura_lang/parser.py",
      "language": "Python",
      "line": 91,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "parse_expression",
      "path": "./aura_lang/parser.py",
      "language": "Python",
      "line": 96,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "parse_identifier",
      "path": "./aura_lang/parser.py",
      "language": "Python",
      "line": 107,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "parse_integer_literal",
      "path": "./aura_lang/parser.py",
      "language": "Python",
      "line": 108,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "parse_string_literal",
      "path": "./aura_lang/parser.py",
      "language": "Python",
      "line": 109,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "parse_grouped_expression",
      "path": "./aura_lang/parser.py",
      "language": "Python",
      "line": 111,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "parse_block_statement",
      "path": "./aura_lang/parser.py",
      "language": "Python",
      "line": 117,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "parse_function_definition",
      "path": "./aura_lang/parser.py",
      "language": "Python",
      "line": 126,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "parse_function_parameters",
      "path": "./aura_lang/parser.py",
      "language": "Python",
      "line": 138,
      "kind": "function",
      "docstring": "Parses a list of identifiers for a function definition."
    },
    {
      "_type": "tag",
      "name": "parse_if_statement",
      "path": "./aura_lang/parser.py",
      "language": "Python",
      "line": 169,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "parse_for_statement",
      "path": "./aura_lang/parser.py",
      "language": "Python",
      "line": 181,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "parse_list_literal",
      "path": "./aura_lang/parser.py",
      "language": "Python",
      "line": 191,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "parse_call_expression",
      "path": "./aura_lang/parser.py",
      "language": "Python",
      "line": 196,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "parse_expression_list",
      "path": "./aura_lang/parser.py",
      "language": "Python",
      "line": 201,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "parse_infix_expression",
      "path": "./aura_lang/parser.py",
      "language": "Python",
      "line": 212,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "parse_member_access",
      "path": "./aura_lang/parser.py",
      "language": "Python",
      "line": 219,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "expect_peek",
      "path": "./aura_lang/parser.py",
      "language": "Python",
      "line": 225,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "peek_precedence",
      "path": "./aura_lang/parser.py",
      "language": "Python",
      "line": 232,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "current_precedence",
      "path": "./aura_lang/parser.py",
      "language": "Python",
      "line": 233,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "main",
      "path": "./language_theory/toolchain/quantify.py",
      "language": "Python",
      "line": 5,
      "kind": "function",
      "docstring": "Main function to run the grammar quantifier.\nThis tool computes and reports various metrics for a given grammar."
    },
    {
      "_type": "tag",
      "name": "Grammar",
      "path": "./language_theory/toolchain/grammar.py",
      "language": "Python",
      "line": 3,
      "kind": "class",
      "docstring": "A class to represent a formal grammar. It parses a grammar file\nand provides helpers for analyzing its properties."
    },
    {
      "_type": "tag",
      "name": "__init__",
      "path": "./language_theory/toolchain/grammar.py",
      "language": "Python",
      "line": 8,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "_parse_file",
      "path": "./language_theory/toolchain/grammar.py",
      "language": "Python",
      "line": 14,
      "kind": "function",
      "docstring": "Parses the grammar file provided at initialization."
    },
    {
      "_type": "tag",
      "name": "get_productions_dict",
      "path": "./language_theory/toolchain/grammar.py",
      "language": "Python",
      "line": 33,
      "kind": "function",
      "docstring": "Returns productions grouped by LHS, for parser use."
    },
    {
      "_type": "tag",
      "name": "get_non_terminals",
      "path": "./language_theory/toolchain/grammar.py",
      "language": "Python",
      "line": 41,
      "kind": "function",
      "docstring": "Returns the set of all non-terminal symbols."
    },
    {
      "_type": "tag",
      "name": "get_terminals",
      "path": "./language_theory/toolchain/grammar.py",
      "language": "Python",
      "line": 53,
      "kind": "function",
      "docstring": "Returns the set of all terminal symbols."
    },
    {
      "_type": "tag",
      "name": "__str__",
      "path": "./language_theory/toolchain/grammar.py",
      "language": "Python",
      "line": 63,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "recognize_right_linear",
      "path": "./language_theory/toolchain/recognizer.py",
      "language": "Python",
      "line": 6,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "reverse_grammar",
      "path": "./language_theory/toolchain/recognizer.py",
      "language": "Python",
      "line": 27,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "print_path",
      "path": "./language_theory/toolchain/recognizer.py",
      "language": "Python",
      "line": 35,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "EarleyItem",
      "path": "./language_theory/toolchain/recognizer.py",
      "language": "Python",
      "line": 41,
      "kind": "class",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "recognize_earley",
      "path": "./language_theory/toolchain/recognizer.py",
      "language": "Python",
      "line": 54,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "get_parse_count",
      "path": "./language_theory/toolchain/recognizer.py",
      "language": "Python",
      "line": 90,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "count_parses",
      "path": "./language_theory/toolchain/recognizer.py",
      "language": "Python",
      "line": 95,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "main",
      "path": "./language_theory/toolchain/recognizer.py",
      "language": "Python",
      "line": 106,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "_search",
      "path": "./language_theory/toolchain/recognizer.py",
      "language": "Python",
      "line": 8,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "__init__",
      "path": "./language_theory/toolchain/recognizer.py",
      "language": "Python",
      "line": 42,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "__eq__",
      "path": "./language_theory/toolchain/recognizer.py",
      "language": "Python",
      "line": 47,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "__hash__",
      "path": "./language_theory/toolchain/recognizer.py",
      "language": "Python",
      "line": 49,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "__repr__",
      "path": "./language_theory/toolchain/recognizer.py",
      "language": "Python",
      "line": 51,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "ComplexityTracer",
      "path": "./language_theory/toolchain/complexity.py",
      "language": "Python",
      "line": 6,
      "kind": "class",
      "docstring": "A tracer to count Python instructions executed."
    },
    {
      "_type": "tag",
      "name": "main",
      "path": "./language_theory/toolchain/complexity.py",
      "language": "Python",
      "line": 38,
      "kind": "function",
      "docstring": "Main function for the complexity analyzer.\nThis script takes another Python script and its arguments as input,\nruns it, and reports the number of instructions executed."
    },
    {
      "_type": "tag",
      "name": "__init__",
      "path": "./language_theory/toolchain/complexity.py",
      "language": "Python",
      "line": 8,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "trace_dispatch",
      "path": "./language_theory/toolchain/complexity.py",
      "language": "Python",
      "line": 11,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "run_and_trace",
      "path": "./language_theory/toolchain/complexity.py",
      "language": "Python",
      "line": 17,
      "kind": "function",
      "docstring": "Runs a target module with tracing enabled using runpy."
    },
    {
      "_type": "tag",
      "name": "TestTranslations",
      "path": "./logic_system/tests/test_translations.py",
      "language": "Python",
      "line": 10,
      "kind": "class",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "test_lj_to_lk_translation",
      "path": "./logic_system/tests/test_translations.py",
      "language": "Python",
      "line": 12,
      "kind": "function",
      "docstring": "Tests the direct embedding translation from LJ to LK."
    },
    {
      "_type": "tag",
      "name": "test_lj_to_ill_formula_translation",
      "path": "./logic_system/tests/test_translations.py",
      "language": "Python",
      "line": 34,
      "kind": "function",
      "docstring": "Tests the formula translation from LJ to ILL."
    },
    {
      "_type": "tag",
      "name": "test_ill_contraction",
      "path": "./logic_system/tests/test_translations.py",
      "language": "Python",
      "line": 65,
      "kind": "function",
      "docstring": "Tests the contraction rule in Intuitionistic Linear Logic."
    },
    {
      "_type": "tag",
      "name": "test_lj_axiom_to_ill_proof_translation",
      "path": "./logic_system/tests/test_translations.py",
      "language": "Python",
      "line": 87,
      "kind": "function",
      "docstring": "Tests the translation of a simple LJ axiom proof to ILL."
    },
    {
      "_type": "tag",
      "name": "test_lj_implies_left_to_ill",
      "path": "./logic_system/tests/test_translations.py",
      "language": "Python",
      "line": 109,
      "kind": "function",
      "docstring": "Tests the translation of an LJ proof with \u2192-L."
    },
    {
      "_type": "tag",
      "name": "TestSynthesis",
      "path": "./logic_system/tests/test_synthesis.py",
      "language": "Python",
      "line": 8,
      "kind": "class",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "setUp",
      "path": "./logic_system/tests/test_synthesis.py",
      "language": "Python",
      "line": 10,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "test_axiom_synthesis",
      "path": "./logic_system/tests/test_synthesis.py",
      "language": "Python",
      "line": 13,
      "kind": "function",
      "docstring": "Tests that the synthesizer can find a simple axiom proof."
    },
    {
      "_type": "tag",
      "name": "test_lin_implies_right_synthesis",
      "path": "./logic_system/tests/test_synthesis.py",
      "language": "Python",
      "line": 21,
      "kind": "function",
      "docstring": "Tests synthesis of a proof for A \u22a2 B \u22b8 (A \u2297 B)"
    },
    {
      "_type": "tag",
      "name": "test_dereliction_synthesis",
      "path": "./logic_system/tests/test_synthesis.py",
      "language": "Python",
      "line": 32,
      "kind": "function",
      "docstring": "Tests synthesis of a proof involving dereliction."
    },
    {
      "_type": "tag",
      "name": "test_tensor_right_synthesis",
      "path": "./logic_system/tests/test_synthesis.py",
      "language": "Python",
      "line": 40,
      "kind": "function",
      "docstring": "Tests a simple case of tensor right synthesis."
    },
    {
      "_type": "tag",
      "name": "Synthesizer",
      "path": "./logic_system/src/synthesizer.py",
      "language": "Python",
      "line": 8,
      "kind": "class",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "__init__",
      "path": "./logic_system/src/synthesizer.py",
      "language": "Python",
      "line": 9,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "_get_partitions",
      "path": "./logic_system/src/synthesizer.py",
      "language": "Python",
      "line": 12,
      "kind": "function",
      "docstring": "Generator for all 2-partitions of a multiset."
    },
    {
      "_type": "tag",
      "name": "synthesize",
      "path": "./logic_system/src/synthesizer.py",
      "language": "Python",
      "line": 21,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "axiom",
      "path": "./logic_system/src/ll.py",
      "language": "Python",
      "line": 7,
      "kind": "function",
      "docstring": "A \u22a2 A"
    },
    {
      "_type": "tag",
      "name": "tensor_right",
      "path": "./logic_system/src/ll.py",
      "language": "Python",
      "line": 14,
      "kind": "function",
      "docstring": "\u0393 \u22a2 \u0394, A   and   \u0393' \u22a2 \u0394', B\n--------------------------------\n      \u0393, \u0393' \u22a2 \u0394, \u0394', A \u2297 B"
    },
    {
      "_type": "tag",
      "name": "tensor_left",
      "path": "./logic_system/src/ll.py",
      "language": "Python",
      "line": 29,
      "kind": "function",
      "docstring": "\u0393, A, B \u22a2 \u0394\n---------------\n \u0393, A \u2297 B \u22a2 \u0394"
    },
    {
      "_type": "tag",
      "name": "par_right",
      "path": "./logic_system/src/ll.py",
      "language": "Python",
      "line": 40,
      "kind": "function",
      "docstring": "\u0393 \u22a2 \u0394, A, B\n---------------\n \u0393 \u22a2 \u0394, A \u214b B"
    },
    {
      "_type": "tag",
      "name": "par_left",
      "path": "./logic_system/src/ll.py",
      "language": "Python",
      "line": 51,
      "kind": "function",
      "docstring": "\u0393, A \u22a2 \u0394   and   \u0393', B \u22a2 \u0394'\n--------------------------------\n      \u0393, \u0393', A \u214b B \u22a2 \u0394, \u0394'"
    },
    {
      "_type": "tag",
      "name": "cut",
      "path": "./logic_system/src/ll.py",
      "language": "Python",
      "line": 66,
      "kind": "function",
      "docstring": "\u0393 \u22a2 \u0394, A   and   A, \u0393' \u22a2 \u0394'\n--------------------------------\n         \u0393, \u0393' \u22a2 \u0394, \u0394'"
    },
    {
      "_type": "tag",
      "name": "axiom",
      "path": "./logic_system/src/lk.py",
      "language": "Python",
      "line": 7,
      "kind": "function",
      "docstring": "A \u22a2 A"
    },
    {
      "_type": "tag",
      "name": "weak_left",
      "path": "./logic_system/src/lk.py",
      "language": "Python",
      "line": 13,
      "kind": "function",
      "docstring": "\u0393 \u22a2 \u0394  /  \u0393, A \u22a2 \u0394"
    },
    {
      "_type": "tag",
      "name": "weak_right",
      "path": "./logic_system/src/lk.py",
      "language": "Python",
      "line": 18,
      "kind": "function",
      "docstring": "\u0393 \u22a2 \u0394  /  \u0393 \u22a2 \u0394, A"
    },
    {
      "_type": "tag",
      "name": "and_left",
      "path": "./logic_system/src/lk.py",
      "language": "Python",
      "line": 24,
      "kind": "function",
      "docstring": "\u0393, A, B \u22a2 \u0394 / \u0393, A \u2227 B \u22a2 \u0394"
    },
    {
      "_type": "tag",
      "name": "and_right",
      "path": "./logic_system/src/lk.py",
      "language": "Python",
      "line": 30,
      "kind": "function",
      "docstring": "\u0393 \u22a2 \u0394, A   and   \u0393 \u22a2 \u0394, B / \u0393 \u22a2 \u0394, A \u2227 B"
    },
    {
      "_type": "tag",
      "name": "or_left",
      "path": "./logic_system/src/lk.py",
      "language": "Python",
      "line": 42,
      "kind": "function",
      "docstring": "\u0393, A \u22a2 \u0394   and   \u0393, B \u22a2 \u0394 / \u0393, A \u2228 B \u22a2 \u0394"
    },
    {
      "_type": "tag",
      "name": "or_right",
      "path": "./logic_system/src/lk.py",
      "language": "Python",
      "line": 52,
      "kind": "function",
      "docstring": "\u0393 \u22a2 \u0394, A, B / \u0393 \u22a2 \u0394, A \u2228 B"
    },
    {
      "_type": "tag",
      "name": "implies_left",
      "path": "./logic_system/src/lk.py",
      "language": "Python",
      "line": 58,
      "kind": "function",
      "docstring": "\u0393 \u22a2 \u0394, A   and   B, \u0393 \u22a2 \u0394 / A \u2192 B, \u0393 \u22a2 \u0394"
    },
    {
      "_type": "tag",
      "name": "implies_right",
      "path": "./logic_system/src/lk.py",
      "language": "Python",
      "line": 65,
      "kind": "function",
      "docstring": "A, \u0393 \u22a2 \u0394, B / \u0393 \u22a2 \u0394, A \u2192 B"
    },
    {
      "_type": "tag",
      "name": "not_left",
      "path": "./logic_system/src/lk.py",
      "language": "Python",
      "line": 72,
      "kind": "function",
      "docstring": "\u0393 \u22a2 \u0394, A / \u00acA, \u0393 \u22a2 \u0394"
    },
    {
      "_type": "tag",
      "name": "not_right",
      "path": "./logic_system/src/lk.py",
      "language": "Python",
      "line": 79,
      "kind": "function",
      "docstring": "A, \u0393 \u22a2 \u0394 / \u0393 \u22a2 \u0394, \u00acA"
    },
    {
      "_type": "tag",
      "name": "Sequent",
      "path": "./logic_system/src/sequents.py",
      "language": "Python",
      "line": 5,
      "kind": "class",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "__init__",
      "path": "./logic_system/src/sequents.py",
      "language": "Python",
      "line": 6,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "__repr__",
      "path": "./logic_system/src/sequents.py",
      "language": "Python",
      "line": 10,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "__eq__",
      "path": "./logic_system/src/sequents.py",
      "language": "Python",
      "line": 24,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "__hash__",
      "path": "./logic_system/src/sequents.py",
      "language": "Python",
      "line": 27,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "format_multiset",
      "path": "./logic_system/src/sequents.py",
      "language": "Python",
      "line": 11,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "ILLSequent",
      "path": "./logic_system/src/ill.py",
      "language": "Python",
      "line": 20,
      "kind": "class",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "axiom",
      "path": "./logic_system/src/ill.py",
      "language": "Python",
      "line": 37,
      "kind": "function",
      "docstring": "A \u22a2 A"
    },
    {
      "_type": "tag",
      "name": "cut",
      "path": "./logic_system/src/ill.py",
      "language": "Python",
      "line": 43,
      "kind": "function",
      "docstring": "\u0393 \u22a2 A   and   \u0394, A \u22a2 C\n--------------------------\n     \u0393, \u0394 \u22a2 C"
    },
    {
      "_type": "tag",
      "name": "tensor_right",
      "path": "./logic_system/src/ill.py",
      "language": "Python",
      "line": 58,
      "kind": "function",
      "docstring": "\u0393 \u22a2 A   and   \u0394 \u22a2 B\n-----------------------\n     \u0393, \u0394 \u22a2 A \u2297 B"
    },
    {
      "_type": "tag",
      "name": "tensor_left",
      "path": "./logic_system/src/ill.py",
      "language": "Python",
      "line": 68,
      "kind": "function",
      "docstring": "\u0393, A, B \u22a2 C\n---------------\n \u0393, A \u2297 B \u22a2 C"
    },
    {
      "_type": "tag",
      "name": "lin_implies_right",
      "path": "./logic_system/src/ill.py",
      "language": "Python",
      "line": 79,
      "kind": "function",
      "docstring": "\u0393, A \u22a2 B\n------------\n\u0393 \u22a2 A \u22b8 B"
    },
    {
      "_type": "tag",
      "name": "lin_implies_left",
      "path": "./logic_system/src/ill.py",
      "language": "Python",
      "line": 90,
      "kind": "function",
      "docstring": "\u0393 \u22a2 A   and   \u0394, B \u22a2 C\n--------------------------\n   \u0393, \u0394, A \u22b8 B \u22a2 C"
    },
    {
      "_type": "tag",
      "name": "with_right",
      "path": "./logic_system/src/ill.py",
      "language": "Python",
      "line": 103,
      "kind": "function",
      "docstring": "\u0393 \u22a2 A   and   \u0393 \u22a2 B\n-----------------------\n      \u0393 \u22a2 A & B"
    },
    {
      "_type": "tag",
      "name": "with_left_1",
      "path": "./logic_system/src/ill.py",
      "language": "Python",
      "line": 114,
      "kind": "function",
      "docstring": "\u0393, A \u22a2 C\n------------\n\u0393, A & B \u22a2 C"
    },
    {
      "_type": "tag",
      "name": "with_left_2",
      "path": "./logic_system/src/ill.py",
      "language": "Python",
      "line": 126,
      "kind": "function",
      "docstring": "\u0393, B \u22a2 C\n------------\n\u0393, A & B \u22a2 C"
    },
    {
      "_type": "tag",
      "name": "plus_right_1",
      "path": "./logic_system/src/ill.py",
      "language": "Python",
      "line": 138,
      "kind": "function",
      "docstring": "\u0393 \u22a2 A\n------------\n\u0393 \u22a2 A \u2295 B"
    },
    {
      "_type": "tag",
      "name": "plus_right_2",
      "path": "./logic_system/src/ill.py",
      "language": "Python",
      "line": 148,
      "kind": "function",
      "docstring": "\u0393 \u22a2 B\n------------\n\u0393 \u22a2 A \u2295 B"
    },
    {
      "_type": "tag",
      "name": "plus_left",
      "path": "./logic_system/src/ill.py",
      "language": "Python",
      "line": 158,
      "kind": "function",
      "docstring": "\u0393, A \u22a2 C   and   \u0393, B \u22a2 C\n--------------------------\n     \u0393, A \u2295 B \u22a2 C"
    },
    {
      "_type": "tag",
      "name": "of_course_right",
      "path": "./logic_system/src/ill.py",
      "language": "Python",
      "line": 178,
      "kind": "function",
      "docstring": "!\u0393 \u22a2 A\n----------\n!\u0393 \u22a2 !A"
    },
    {
      "_type": "tag",
      "name": "dereliction",
      "path": "./logic_system/src/ill.py",
      "language": "Python",
      "line": 190,
      "kind": "function",
      "docstring": "\u0393, A \u22a2 B\n------------\n\u0393, !A \u22a2 B"
    },
    {
      "_type": "tag",
      "name": "contraction",
      "path": "./logic_system/src/ill.py",
      "language": "Python",
      "line": 201,
      "kind": "function",
      "docstring": "\u0393, !A, !A \u22a2 B\n----------------\n   \u0393, !A \u22a2 B"
    },
    {
      "_type": "tag",
      "name": "weakening",
      "path": "./logic_system/src/ill.py",
      "language": "Python",
      "line": 213,
      "kind": "function",
      "docstring": "\u0393 \u22a2 B\n------------\n\u0393, !A \u22a2 B"
    },
    {
      "_type": "tag",
      "name": "__init__",
      "path": "./logic_system/src/ill.py",
      "language": "Python",
      "line": 21,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "succedent_formula",
      "path": "./logic_system/src/ill.py",
      "language": "Python",
      "line": 27,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "__repr__",
      "path": "./logic_system/src/ill.py",
      "language": "Python",
      "line": 30,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "Formula",
      "path": "./logic_system/src/formulas.py",
      "language": "Python",
      "line": 3,
      "kind": "class",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "Prop",
      "path": "./logic_system/src/formulas.py",
      "language": "Python",
      "line": 14,
      "kind": "class",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "UnaryOp",
      "path": "./logic_system/src/formulas.py",
      "language": "Python",
      "line": 21,
      "kind": "class",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "Not",
      "path": "./logic_system/src/formulas.py",
      "language": "Python",
      "line": 25,
      "kind": "class",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "BinaryOp",
      "path": "./logic_system/src/formulas.py",
      "language": "Python",
      "line": 29,
      "kind": "class",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "And",
      "path": "./logic_system/src/formulas.py",
      "language": "Python",
      "line": 34,
      "kind": "class",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "Or",
      "path": "./logic_system/src/formulas.py",
      "language": "Python",
      "line": 38,
      "kind": "class",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "Implies",
      "path": "./logic_system/src/formulas.py",
      "language": "Python",
      "line": 42,
      "kind": "class",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "Tensor",
      "path": "./logic_system/src/formulas.py",
      "language": "Python",
      "line": 48,
      "kind": "class",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "Par",
      "path": "./logic_system/src/formulas.py",
      "language": "Python",
      "line": 52,
      "kind": "class",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "LinImplies",
      "path": "./logic_system/src/formulas.py",
      "language": "Python",
      "line": 56,
      "kind": "class",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "OfCourse",
      "path": "./logic_system/src/formulas.py",
      "language": "Python",
      "line": 60,
      "kind": "class",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "With",
      "path": "./logic_system/src/formulas.py",
      "language": "Python",
      "line": 64,
      "kind": "class",
      "docstring": "Additive Conjunction"
    },
    {
      "_type": "tag",
      "name": "Plus",
      "path": "./logic_system/src/formulas.py",
      "language": "Python",
      "line": 69,
      "kind": "class",
      "docstring": "Additive Disjunction"
    },
    {
      "_type": "tag",
      "name": "__repr__",
      "path": "./logic_system/src/formulas.py",
      "language": "Python",
      "line": 5,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "__eq__",
      "path": "./logic_system/src/formulas.py",
      "language": "Python",
      "line": 8,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "__hash__",
      "path": "./logic_system/src/formulas.py",
      "language": "Python",
      "line": 11,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "__init__",
      "path": "./logic_system/src/formulas.py",
      "language": "Python",
      "line": 15,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "__repr__",
      "path": "./logic_system/src/formulas.py",
      "language": "Python",
      "line": 18,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "__init__",
      "path": "./logic_system/src/formulas.py",
      "language": "Python",
      "line": 22,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "__repr__",
      "path": "./logic_system/src/formulas.py",
      "language": "Python",
      "line": 26,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "__init__",
      "path": "./logic_system/src/formulas.py",
      "language": "Python",
      "line": 30,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "__repr__",
      "path": "./logic_system/src/formulas.py",
      "language": "Python",
      "line": 35,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "__repr__",
      "path": "./logic_system/src/formulas.py",
      "language": "Python",
      "line": 39,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "__repr__",
      "path": "./logic_system/src/formulas.py",
      "language": "Python",
      "line": 43,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "__repr__",
      "path": "./logic_system/src/formulas.py",
      "language": "Python",
      "line": 49,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "__repr__",
      "path": "./logic_system/src/formulas.py",
      "language": "Python",
      "line": 53,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "__repr__",
      "path": "./logic_system/src/formulas.py",
      "language": "Python",
      "line": 57,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "__repr__",
      "path": "./logic_system/src/formulas.py",
      "language": "Python",
      "line": 61,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "__repr__",
      "path": "./logic_system/src/formulas.py",
      "language": "Python",
      "line": 66,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "__repr__",
      "path": "./logic_system/src/formulas.py",
      "language": "Python",
      "line": 71,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "Logic",
      "path": "./logic_system/src/diagram.py",
      "language": "Python",
      "line": 6,
      "kind": "class",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "Diagram",
      "path": "./logic_system/src/diagram.py",
      "language": "Python",
      "line": 12,
      "kind": "class",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "__init__",
      "path": "./logic_system/src/diagram.py",
      "language": "Python",
      "line": 13,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "find_path",
      "path": "./logic_system/src/diagram.py",
      "language": "Python",
      "line": 28,
      "kind": "function",
      "docstring": "Finds a path of translations from a start logic to an end logic using BFS."
    },
    {
      "_type": "tag",
      "name": "translate",
      "path": "./logic_system/src/diagram.py",
      "language": "Python",
      "line": 49,
      "kind": "function",
      "docstring": "Translates a proof from a starting logic to an ending logic."
    },
    {
      "_type": "tag",
      "name": "Rule",
      "path": "./logic_system/src/proof.py",
      "language": "Python",
      "line": 4,
      "kind": "class",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "ProofTree",
      "path": "./logic_system/src/proof.py",
      "language": "Python",
      "line": 11,
      "kind": "class",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "__init__",
      "path": "./logic_system/src/proof.py",
      "language": "Python",
      "line": 5,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "__repr__",
      "path": "./logic_system/src/proof.py",
      "language": "Python",
      "line": 8,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "__init__",
      "path": "./logic_system/src/proof.py",
      "language": "Python",
      "line": 12,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "__repr__",
      "path": "./logic_system/src/proof.py",
      "language": "Python",
      "line": 17,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "to_dict",
      "path": "./logic_system/src/proof.py",
      "language": "Python",
      "line": 24,
      "kind": "function",
      "docstring": "Serializes the proof tree to a dictionary."
    },
    {
      "_type": "tag",
      "name": "lj_to_lk",
      "path": "./logic_system/src/translations.py",
      "language": "Python",
      "line": 10,
      "kind": "function",
      "docstring": "Translates a proof from the LJ calculus to the LK calculus.\nThis is a direct embedding, as any valid LJ proof is also a valid LK proof."
    },
    {
      "_type": "tag",
      "name": "translate_formula_lj_to_ill",
      "path": "./logic_system/src/translations.py",
      "language": "Python",
      "line": 23,
      "kind": "function",
      "docstring": "Translates a formula from Intuitionistic Logic (LJ) to Intuitionistic Linear Logic (ILL)\nusing a standard Girard-style translation."
    },
    {
      "_type": "tag",
      "name": "bang_context",
      "path": "./logic_system/src/translations.py",
      "language": "Python",
      "line": 44,
      "kind": "function",
      "docstring": "Applies ! to every formula in a context."
    },
    {
      "_type": "tag",
      "name": "lj_to_ill_proof",
      "path": "./logic_system/src/translations.py",
      "language": "Python",
      "line": 48,
      "kind": "function",
      "docstring": "Translates a full proof from LJ to ILL.\nA proof of \u0393 \u22a2 A in LJ becomes a proof of !\u0393* \u22a2 A* in ILL."
    },
    {
      "_type": "tag",
      "name": "ill_to_ll",
      "path": "./logic_system/src/translations.py",
      "language": "Python",
      "line": 129,
      "kind": "function",
      "docstring": "Translates a proof from the ILL calculus to the LL calculus.\nThis is a direct embedding, as any valid ILL proof is also a valid LL proof."
    },
    {
      "_type": "tag",
      "name": "LJSequent",
      "path": "./logic_system/src/lj.py",
      "language": "Python",
      "line": 7,
      "kind": "class",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "axiom",
      "path": "./logic_system/src/lj.py",
      "language": "Python",
      "line": 26,
      "kind": "function",
      "docstring": "A \u22a2 A"
    },
    {
      "_type": "tag",
      "name": "weak_left",
      "path": "./logic_system/src/lj.py",
      "language": "Python",
      "line": 32,
      "kind": "function",
      "docstring": "\u0393 \u22a2 \u0394  /  \u0393, A \u22a2 \u0394"
    },
    {
      "_type": "tag",
      "name": "cut",
      "path": "./logic_system/src/lj.py",
      "language": "Python",
      "line": 37,
      "kind": "function",
      "docstring": "\u0393 \u22a2 A   and   A, \u0393' \u22a2 B / \u0393, \u0393' \u22a2 B"
    },
    {
      "_type": "tag",
      "name": "and_left",
      "path": "./logic_system/src/lj.py",
      "language": "Python",
      "line": 46,
      "kind": "function",
      "docstring": "\u0393, A, B \u22a2 \u0394 / \u0393, A \u2227 B \u22a2 \u0394"
    },
    {
      "_type": "tag",
      "name": "and_right",
      "path": "./logic_system/src/lj.py",
      "language": "Python",
      "line": 52,
      "kind": "function",
      "docstring": "\u0393 \u22a2 A   and   \u0393 \u22a2 B / \u0393 \u22a2 A \u2227 B"
    },
    {
      "_type": "tag",
      "name": "or_left",
      "path": "./logic_system/src/lj.py",
      "language": "Python",
      "line": 59,
      "kind": "function",
      "docstring": "\u0393, A \u22a2 \u0394   and   \u0393, B \u22a2 \u0394 / \u0393, A \u2228 B \u22a2 \u0394"
    },
    {
      "_type": "tag",
      "name": "or_right",
      "path": "./logic_system/src/lj.py",
      "language": "Python",
      "line": 66,
      "kind": "function",
      "docstring": "\u0393 \u22a2 A / \u0393 \u22a2 A \u2228 B  or  \u0393 \u22a2 B / \u0393 \u22a2 A \u2228 B"
    },
    {
      "_type": "tag",
      "name": "implies_left",
      "path": "./logic_system/src/lj.py",
      "language": "Python",
      "line": 72,
      "kind": "function",
      "docstring": "\u0393 \u22a2 A   and   B, \u0393' \u22a2 C / A \u2192 B, \u0393, \u0393' \u22a2 C"
    },
    {
      "_type": "tag",
      "name": "implies_right",
      "path": "./logic_system/src/lj.py",
      "language": "Python",
      "line": 79,
      "kind": "function",
      "docstring": "A, \u0393 \u22a2 B / \u0393 \u22a2 A \u2192 B"
    },
    {
      "_type": "tag",
      "name": "not_left",
      "path": "./logic_system/src/lj.py",
      "language": "Python",
      "line": 85,
      "kind": "function",
      "docstring": "\u0393 \u22a2 A / \u00acA, \u0393 \u22a2"
    },
    {
      "_type": "tag",
      "name": "not_right",
      "path": "./logic_system/src/lj.py",
      "language": "Python",
      "line": 91,
      "kind": "function",
      "docstring": "A, \u0393 \u22a2 / \u0393 \u22a2 \u00acA"
    },
    {
      "_type": "tag",
      "name": "__init__",
      "path": "./logic_system/src/lj.py",
      "language": "Python",
      "line": 8,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "succedent_formula",
      "path": "./logic_system/src/lj.py",
      "language": "Python",
      "line": 14,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "__repr__",
      "path": "./logic_system/src/lj.py",
      "language": "Python",
      "line": 19,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "load_tool_manifest",
      "path": "./protocols/build.py",
      "language": "Python",
      "line": 31,
      "kind": "function",
      "docstring": "Loads the tool manifest from the specified file."
    },
    {
      "_type": "tag",
      "name": "validate_protocol_tools",
      "path": "./protocols/build.py",
      "language": "Python",
      "line": 39,
      "kind": "function",
      "docstring": "Validates the tools used in a protocol against the tool manifest."
    },
    {
      "_type": "tag",
      "name": "compile_module",
      "path": "./protocols/build.py",
      "language": "Python",
      "line": 51,
      "kind": "function",
      "docstring": "Compiles the protocol files in this directory into a single AGENTS.md."
    },
    {
      "_type": "tag",
      "name": "compile_module",
      "path": "./protocols/self_improvement/build.py",
      "language": "Python",
      "line": 29,
      "kind": "function",
      "docstring": "Compiles the protocol files in this directory into a single AGENTS.md."
    },
    {
      "_type": "tag",
      "name": "compile_module",
      "path": "./protocols/experimental/build.py",
      "language": "Python",
      "line": 27,
      "kind": "function",
      "docstring": "Compiles the protocol files in this directory into a single AGENTS.md."
    },
    {
      "_type": "tag",
      "name": "build",
      "path": "./protocols/aal_spec/build.py",
      "language": "Python",
      "line": 5,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "compile_module",
      "path": "./protocols/gemini/build.py",
      "language": "Python",
      "line": 29,
      "kind": "function",
      "docstring": "Compiles the protocol files in this directory into a single AGENTS.md."
    },
    {
      "_type": "tag",
      "name": "find_files",
      "path": "./protocols/core/build.py",
      "language": "Python",
      "line": 28,
      "kind": "function",
      "docstring": "Finds files matching a pattern in a directory."
    },
    {
      "_type": "tag",
      "name": "load_schema",
      "path": "./protocols/core/build.py",
      "language": "Python",
      "line": 44,
      "kind": "function",
      "docstring": "Loads the JSON schema from a file."
    },
    {
      "_type": "tag",
      "name": "sanitize_markdown",
      "path": "./protocols/core/build.py",
      "language": "Python",
      "line": 56,
      "kind": "function",
      "docstring": "Removes potentially unsafe constructs from Markdown."
    },
    {
      "_type": "tag",
      "name": "compile_module",
      "path": "./protocols/core/build.py",
      "language": "Python",
      "line": 65,
      "kind": "function",
      "docstring": "Compiles the protocol files in this directory into a single AGENTS.md."
    },
    {
      "_type": "tag",
      "name": "is_applicable",
      "path": "./protocols/core/conditional_refactoring.protocol.py",
      "language": "Python",
      "line": 7,
      "kind": "function",
      "docstring": "This protocol is only applicable if the task is 'refactor' and\nat least one of the target files is within the 'legacy/' directory."
    },
    {
      "_type": "tag",
      "name": "find_files",
      "path": "./protocols/security/build.py",
      "language": "Python",
      "line": 28,
      "kind": "function",
      "docstring": "Finds files matching a pattern in a directory."
    },
    {
      "_type": "tag",
      "name": "load_schema",
      "path": "./protocols/security/build.py",
      "language": "Python",
      "line": 44,
      "kind": "function",
      "docstring": "Loads the JSON schema from a file."
    },
    {
      "_type": "tag",
      "name": "sanitize_markdown",
      "path": "./protocols/security/build.py",
      "language": "Python",
      "line": 56,
      "kind": "function",
      "docstring": "Removes potentially unsafe constructs from Markdown."
    },
    {
      "_type": "tag",
      "name": "compile_module",
      "path": "./protocols/security/build.py",
      "language": "Python",
      "line": 65,
      "kind": "function",
      "docstring": "Compiles the protocol files in this directory into a single AGENTS.md."
    },
    {
      "_type": "tag",
      "name": "find_files",
      "path": "./protocols/critic/build.py",
      "language": "Python",
      "line": 28,
      "kind": "function",
      "docstring": "Finds files matching a pattern in a directory."
    },
    {
      "_type": "tag",
      "name": "load_schema",
      "path": "./protocols/critic/build.py",
      "language": "Python",
      "line": 44,
      "kind": "function",
      "docstring": "Loads the JSON schema from a file."
    },
    {
      "_type": "tag",
      "name": "sanitize_markdown",
      "path": "./protocols/critic/build.py",
      "language": "Python",
      "line": 56,
      "kind": "function",
      "docstring": "Removes potentially unsafe constructs from Markdown."
    },
    {
      "_type": "tag",
      "name": "compile_module",
      "path": "./protocols/critic/build.py",
      "language": "Python",
      "line": 65,
      "kind": "function",
      "docstring": "Compiles the protocol files in this directory into a single AGENTS.md."
    },
    {
      "_type": "tag",
      "name": "AgentState",
      "path": "./protocols/chc_protocols/bootstrap/proof.py",
      "language": "Python",
      "line": 5,
      "kind": "class",
      "docstring": "A simplified representation of the agent's state for this proof."
    },
    {
      "_type": "tag",
      "name": "bootstrap",
      "path": "./protocols/chc_protocols/bootstrap/proof.py",
      "language": "Python",
      "line": 21,
      "kind": "function",
      "docstring": "This function is the constructive proof of the AGENT-BOOTSTRAP-001 proposition.\n\nIt takes an agent in an Un-contextualizedAgentState and returns an agent\nin a ContextualizedAgentState, adhering to the protocol's invariants."
    },
    {
      "_type": "tag",
      "name": "__init__",
      "path": "./protocols/chc_protocols/bootstrap/proof.py",
      "language": "Python",
      "line": 7,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "_hash_workspace",
      "path": "./protocols/chc_protocols/bootstrap/proof.py",
      "language": "Python",
      "line": 13,
      "kind": "function",
      "docstring": "Calculates a hash of the current workspace."
    },
    {
      "_type": "tag",
      "name": "check_proof",
      "path": "./protocols/chc_protocols/bootstrap/check.py",
      "language": "Python",
      "line": 5,
      "kind": "function",
      "docstring": "This function is the proof checker for the AGENT-BOOTSTRAP-001 proposition.\n\nIt verifies that the `bootstrap` function in `proof.py` is a valid\nconstructive proof of the proposition defined in `README.md`."
    },
    {
      "_type": "tag",
      "name": "find_files",
      "path": "./protocols/compliance/build.py",
      "language": "Python",
      "line": 28,
      "kind": "function",
      "docstring": "Finds files matching a pattern in a directory."
    },
    {
      "_type": "tag",
      "name": "load_schema",
      "path": "./protocols/compliance/build.py",
      "language": "Python",
      "line": 44,
      "kind": "function",
      "docstring": "Loads the JSON schema from a file."
    },
    {
      "_type": "tag",
      "name": "sanitize_markdown",
      "path": "./protocols/compliance/build.py",
      "language": "Python",
      "line": 56,
      "kind": "function",
      "docstring": "Removes potentially unsafe constructs from Markdown."
    },
    {
      "_type": "tag",
      "name": "compile_module",
      "path": "./protocols/compliance/build.py",
      "language": "Python",
      "line": 65,
      "kind": "function",
      "docstring": "Compiles the protocol files in this directory into a single AGENTS.md."
    },
    {
      "_type": "tag",
      "name": "compile_module",
      "path": "./protocols/testing/build.py",
      "language": "Python",
      "line": 29,
      "kind": "function",
      "docstring": "Compiles the protocol files in this directory into a single AGENTS.md."
    },
    {
      "_type": "tag",
      "name": "compile_module",
      "path": "./protocols/external_apis/build.py",
      "language": "Python",
      "line": 29,
      "kind": "function",
      "docstring": "Compiles the protocol files in this directory into a single AGENTS.md."
    },
    {
      "_type": "tag",
      "name": "ParaconsistentTruth",
      "path": "./lfi_ill/interpreter.py",
      "language": "Python",
      "line": 4,
      "kind": "class",
      "docstring": "Represents the four truth values in a first-degree entailment logic (FDE)."
    },
    {
      "_type": "tag",
      "name": "ParaconsistentState",
      "path": "./lfi_ill/interpreter.py",
      "language": "Python",
      "line": 13,
      "kind": "class",
      "docstring": "A variable whose truth value is modeled paraconsistently."
    },
    {
      "_type": "tag",
      "name": "Interpreter",
      "path": "./lfi_ill/interpreter.py",
      "language": "Python",
      "line": 30,
      "kind": "class",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "__init__",
      "path": "./lfi_ill/interpreter.py",
      "language": "Python",
      "line": 17,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "is_true",
      "path": "./lfi_ill/interpreter.py",
      "language": "Python",
      "line": 21,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "is_false",
      "path": "./lfi_ill/interpreter.py",
      "language": "Python",
      "line": 24,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "__repr__",
      "path": "./lfi_ill/interpreter.py",
      "language": "Python",
      "line": 27,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "__init__",
      "path": "./lfi_ill/interpreter.py",
      "language": "Python",
      "line": 31,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "interpret",
      "path": "./lfi_ill/interpreter.py",
      "language": "Python",
      "line": 35,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "visit",
      "path": "./lfi_ill/interpreter.py",
      "language": "Python",
      "line": 39,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "generic_visit",
      "path": "./lfi_ill/interpreter.py",
      "language": "Python",
      "line": 44,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "visit_Int",
      "path": "./lfi_ill/interpreter.py",
      "language": "Python",
      "line": 47,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "visit_String",
      "path": "./lfi_ill/interpreter.py",
      "language": "Python",
      "line": 50,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "visit_Bool",
      "path": "./lfi_ill/interpreter.py",
      "language": "Python",
      "line": 53,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "visit_WithPair",
      "path": "./lfi_ill/interpreter.py",
      "language": "Python",
      "line": 63,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "visit_Fst",
      "path": "./lfi_ill/interpreter.py",
      "language": "Python",
      "line": 68,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "visit_Snd",
      "path": "./lfi_ill/interpreter.py",
      "language": "Python",
      "line": 75,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "visit_Promotion",
      "path": "./lfi_ill/interpreter.py",
      "language": "Python",
      "line": 82,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "visit_Dereliction",
      "path": "./lfi_ill/interpreter.py",
      "language": "Python",
      "line": 85,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "visit_Negation",
      "path": "./lfi_ill/interpreter.py",
      "language": "Python",
      "line": 93,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "visit_Consistency",
      "path": "./lfi_ill/interpreter.py",
      "language": "Python",
      "line": 109,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "visit_Completeness",
      "path": "./lfi_ill/interpreter.py",
      "language": "Python",
      "line": 115,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "visit_CoNegation",
      "path": "./lfi_ill/interpreter.py",
      "language": "Python",
      "line": 121,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "visit_Undeterminedness",
      "path": "./lfi_ill/interpreter.py",
      "language": "Python",
      "line": 137,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "visit_WhyNot",
      "path": "./lfi_ill/interpreter.py",
      "language": "Python",
      "line": 144,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "visit_LetWhyNot",
      "path": "./lfi_ill/interpreter.py",
      "language": "Python",
      "line": 147,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "visit_Par",
      "path": "./lfi_ill/interpreter.py",
      "language": "Python",
      "line": 155,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "visit_LetPar",
      "path": "./lfi_ill/interpreter.py",
      "language": "Python",
      "line": 158,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "visit_Fun",
      "path": "./lfi_ill/interpreter.py",
      "language": "Python",
      "line": 166,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "visit_App",
      "path": "./lfi_ill/interpreter.py",
      "language": "Python",
      "line": 169,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "visit_Atom",
      "path": "./lfi_ill/interpreter.py",
      "language": "Python",
      "line": 179,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "visit_Inl",
      "path": "./lfi_ill/interpreter.py",
      "language": "Python",
      "line": 186,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "visit_Inr",
      "path": "./lfi_ill/interpreter.py",
      "language": "Python",
      "line": 189,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "visit_Case",
      "path": "./lfi_ill/interpreter.py",
      "language": "Python",
      "line": 192,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "visit_TensorPair",
      "path": "./lfi_ill/interpreter.py",
      "language": "Python",
      "line": 234,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "visit_LetTensor",
      "path": "./lfi_ill/interpreter.py",
      "language": "Python",
      "line": 239,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "Token",
      "path": "./lfi_ill/token.py",
      "language": "Python",
      "line": 1,
      "kind": "class",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "__init__",
      "path": "./lfi_ill/token.py",
      "language": "Python",
      "line": 2,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "__repr__",
      "path": "./lfi_ill/token.py",
      "language": "Python",
      "line": 6,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "t_ID",
      "path": "./lfi_ill/lexer.py",
      "language": "Python",
      "line": 45,
      "kind": "function",
      "docstring": "[a-zA-Z_][a-zA-Z_0-9]*"
    },
    {
      "_type": "tag",
      "name": "t_newline",
      "path": "./lfi_ill/lexer.py",
      "language": "Python",
      "line": 52,
      "kind": "function",
      "docstring": "\\n+"
    },
    {
      "_type": "tag",
      "name": "t_error",
      "path": "./lfi_ill/lexer.py",
      "language": "Python",
      "line": 56,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "TestGrammar",
      "path": "./lfi_ill/test_grammar.py",
      "language": "Python",
      "line": 16,
      "kind": "class",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "TestInterpreter",
      "path": "./lfi_ill/test_grammar.py",
      "language": "Python",
      "line": 54,
      "kind": "class",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "test_tensor_parsing",
      "path": "./lfi_ill/test_grammar.py",
      "language": "Python",
      "line": 17,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "test_par_parsing",
      "path": "./lfi_ill/test_grammar.py",
      "language": "Python",
      "line": 23,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "test_negation_parsing",
      "path": "./lfi_ill/test_grammar.py",
      "language": "Python",
      "line": 29,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "test_consistency_parsing",
      "path": "./lfi_ill/test_grammar.py",
      "language": "Python",
      "line": 35,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "test_completeness_parsing",
      "path": "./lfi_ill/test_grammar.py",
      "language": "Python",
      "line": 41,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "test_of_course_parsing",
      "path": "./lfi_ill/test_grammar.py",
      "language": "Python",
      "line": 47,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "setUp",
      "path": "./lfi_ill/test_grammar.py",
      "language": "Python",
      "line": 55,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "_run_interp",
      "path": "./lfi_ill/test_grammar.py",
      "language": "Python",
      "line": 58,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "test_completeness_operator",
      "path": "./lfi_ill/test_grammar.py",
      "language": "Python",
      "line": 67,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "test_consistency_operator",
      "path": "./lfi_ill/test_grammar.py",
      "language": "Python",
      "line": 86,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "test_negation_operator",
      "path": "./lfi_ill/test_grammar.py",
      "language": "Python",
      "line": 105,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "Formula",
      "path": "./lfi_ill/ast.py",
      "language": "Python",
      "line": 2,
      "kind": "class",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "Atom",
      "path": "./lfi_ill/ast.py",
      "language": "Python",
      "line": 5,
      "kind": "class",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "Tensor",
      "path": "./lfi_ill/ast.py",
      "language": "Python",
      "line": 12,
      "kind": "class",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "Par",
      "path": "./lfi_ill/ast.py",
      "language": "Python",
      "line": 19,
      "kind": "class",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "Plus",
      "path": "./lfi_ill/ast.py",
      "language": "Python",
      "line": 26,
      "kind": "class",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "With",
      "path": "./lfi_ill/ast.py",
      "language": "Python",
      "line": 33,
      "kind": "class",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "OfCourse",
      "path": "./lfi_ill/ast.py",
      "language": "Python",
      "line": 40,
      "kind": "class",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "WhyNot",
      "path": "./lfi_ill/ast.py",
      "language": "Python",
      "line": 46,
      "kind": "class",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "Section",
      "path": "./lfi_ill/ast.py",
      "language": "Python",
      "line": 52,
      "kind": "class",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "Negation",
      "path": "./lfi_ill/ast.py",
      "language": "Python",
      "line": 58,
      "kind": "class",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "Consistency",
      "path": "./lfi_ill/ast.py",
      "language": "Python",
      "line": 64,
      "kind": "class",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "Completeness",
      "path": "./lfi_ill/ast.py",
      "language": "Python",
      "line": 70,
      "kind": "class",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "CoNegation",
      "path": "./lfi_ill/ast.py",
      "language": "Python",
      "line": 76,
      "kind": "class",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "Undeterminedness",
      "path": "./lfi_ill/ast.py",
      "language": "Python",
      "line": 82,
      "kind": "class",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "One",
      "path": "./lfi_ill/ast.py",
      "language": "Python",
      "line": 88,
      "kind": "class",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "Bottom",
      "path": "./lfi_ill/ast.py",
      "language": "Python",
      "line": 92,
      "kind": "class",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "Zero",
      "path": "./lfi_ill/ast.py",
      "language": "Python",
      "line": 96,
      "kind": "class",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "Top",
      "path": "./lfi_ill/ast.py",
      "language": "Python",
      "line": 100,
      "kind": "class",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "__init__",
      "path": "./lfi_ill/ast.py",
      "language": "Python",
      "line": 6,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "__repr__",
      "path": "./lfi_ill/ast.py",
      "language": "Python",
      "line": 9,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "__init__",
      "path": "./lfi_ill/ast.py",
      "language": "Python",
      "line": 13,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "__repr__",
      "path": "./lfi_ill/ast.py",
      "language": "Python",
      "line": 16,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "__init__",
      "path": "./lfi_ill/ast.py",
      "language": "Python",
      "line": 20,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "__repr__",
      "path": "./lfi_ill/ast.py",
      "language": "Python",
      "line": 23,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "__init__",
      "path": "./lfi_ill/ast.py",
      "language": "Python",
      "line": 27,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "__repr__",
      "path": "./lfi_ill/ast.py",
      "language": "Python",
      "line": 30,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "__init__",
      "path": "./lfi_ill/ast.py",
      "language": "Python",
      "line": 34,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "__repr__",
      "path": "./lfi_ill/ast.py",
      "language": "Python",
      "line": 37,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "__init__",
      "path": "./lfi_ill/ast.py",
      "language": "Python",
      "line": 41,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "__repr__",
      "path": "./lfi_ill/ast.py",
      "language": "Python",
      "line": 43,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "__init__",
      "path": "./lfi_ill/ast.py",
      "language": "Python",
      "line": 47,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "__repr__",
      "path": "./lfi_ill/ast.py",
      "language": "Python",
      "line": 49,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "__init__",
      "path": "./lfi_ill/ast.py",
      "language": "Python",
      "line": 53,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "__repr__",
      "path": "./lfi_ill/ast.py",
      "language": "Python",
      "line": 55,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "__init__",
      "path": "./lfi_ill/ast.py",
      "language": "Python",
      "line": 59,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "__repr__",
      "path": "./lfi_ill/ast.py",
      "language": "Python",
      "line": 61,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "__init__",
      "path": "./lfi_ill/ast.py",
      "language": "Python",
      "line": 65,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "__repr__",
      "path": "./lfi_ill/ast.py",
      "language": "Python",
      "line": 67,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "__init__",
      "path": "./lfi_ill/ast.py",
      "language": "Python",
      "line": 71,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "__repr__",
      "path": "./lfi_ill/ast.py",
      "language": "Python",
      "line": 73,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "__init__",
      "path": "./lfi_ill/ast.py",
      "language": "Python",
      "line": 77,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "__repr__",
      "path": "./lfi_ill/ast.py",
      "language": "Python",
      "line": 79,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "__init__",
      "path": "./lfi_ill/ast.py",
      "language": "Python",
      "line": 83,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "__repr__",
      "path": "./lfi_ill/ast.py",
      "language": "Python",
      "line": 85,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "__repr__",
      "path": "./lfi_ill/ast.py",
      "language": "Python",
      "line": 89,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "__repr__",
      "path": "./lfi_ill/ast.py",
      "language": "Python",
      "line": 93,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "__repr__",
      "path": "./lfi_ill/ast.py",
      "language": "Python",
      "line": 97,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "__repr__",
      "path": "./lfi_ill/ast.py",
      "language": "Python",
      "line": 101,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "p_formula_literal",
      "path": "./lfi_ill/parser.py",
      "language": "Python",
      "line": 14,
      "kind": "function",
      "docstring": "formula : literal"
    },
    {
      "_type": "tag",
      "name": "p_literal_atom",
      "path": "./lfi_ill/parser.py",
      "language": "Python",
      "line": 18,
      "kind": "function",
      "docstring": "literal : ID"
    },
    {
      "_type": "tag",
      "name": "p_literal_atom_neg",
      "path": "./lfi_ill/parser.py",
      "language": "Python",
      "line": 22,
      "kind": "function",
      "docstring": "literal : ID BOT"
    },
    {
      "_type": "tag",
      "name": "p_formula_binary_op",
      "path": "./lfi_ill/parser.py",
      "language": "Python",
      "line": 26,
      "kind": "function",
      "docstring": "formula : formula TENSOR formula\n| formula PAR formula\n| formula PLUS formula\n| formula WITH formula"
    },
    {
      "_type": "tag",
      "name": "p_formula_unary_op",
      "path": "./lfi_ill/parser.py",
      "language": "Python",
      "line": 40,
      "kind": "function",
      "docstring": "formula : NEG formula\n| CIRC formula\n| COMP formula\n| MINUS formula\n| STAR formula\n| OFC formula\n| WHYNOT formula\n| SEC formula"
    },
    {
      "_type": "tag",
      "name": "p_formula_units",
      "path": "./lfi_ill/parser.py",
      "language": "Python",
      "line": 66,
      "kind": "function",
      "docstring": "formula : ONE\n| BOT\n| ZERO\n| TOP"
    },
    {
      "_type": "tag",
      "name": "p_formula_group",
      "path": "./lfi_ill/parser.py",
      "language": "Python",
      "line": 80,
      "kind": "function",
      "docstring": "formula : LPAREN formula RPAREN"
    },
    {
      "_type": "tag",
      "name": "p_error",
      "path": "./lfi_ill/parser.py",
      "language": "Python",
      "line": 84,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "parse",
      "path": "./lfi_ill/parser.py",
      "language": "Python",
      "line": 92,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "TestParadefiniteGrammar",
      "path": "./lfi_ill/test_paradefinite.py",
      "language": "Python",
      "line": 7,
      "kind": "class",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "TestParadefiniteInterpreter",
      "path": "./lfi_ill/test_paradefinite.py",
      "language": "Python",
      "line": 20,
      "kind": "class",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "test_co_negation_parsing",
      "path": "./lfi_ill/test_paradefinite.py",
      "language": "Python",
      "line": 8,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "test_undeterminedness_parsing",
      "path": "./lfi_ill/test_paradefinite.py",
      "language": "Python",
      "line": 14,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "setUp",
      "path": "./lfi_ill/test_paradefinite.py",
      "language": "Python",
      "line": 21,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "_run_interp",
      "path": "./lfi_ill/test_paradefinite.py",
      "language": "Python",
      "line": 24,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "test_co_negation_operator",
      "path": "./lfi_ill/test_paradefinite.py",
      "language": "Python",
      "line": 29,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "test_undeterminedness_operator",
      "path": "./lfi_ill/test_paradefinite.py",
      "language": "Python",
      "line": 48,
      "kind": "function",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "plan_deep_research",
      "path": "./archive/add-protocol-validation/add-protocol-validation-tooling-research-planner.py",
      "language": "Python",
      "line": 9,
      "kind": "function",
      "docstring": "Generates a structured markdown template for a deep research plan.\n\nThis function reads the relevant protocol document (either local or external)\nto provide context and then generates a pre-formatted markdown plan. This\nplan provides a consistent workflow for conducting deep research.\n\nArgs:\n    topic: The research topic to be investigated.\n    repository: The repository context for the research ('local' or 'external').\n\nReturns:\n    A string containing the markdown-formatted research plan."
    },
    {
      "_type": "tag",
      "name": "main",
      "path": "./archive/add-protocol-validation/add-protocol-validation-tooling-protocol-validator.py",
      "language": "Python",
      "line": 5,
      "kind": "function",
      "docstring": "Validates the presence and correct naming of the AGENTS.md file in the root directory.\n\nThis script enforces the following rules:\n1. A single file named exactly `AGENTS.md` must exist in the repository root.\n2. If a file with a similar but incorrect name (case-insensitive) is found\n   (e.g., `Agent.md`), it's an error.\n3. If no file matching `AGENTS.md` (case-insensitively) is found, it's an error.\n4. If multiple files matching `AGENTS.md` (case-insensitively) are found,\n   it's an error.\n\nExits with status 0 on success, 1 on failure."
    },
    {
      "_type": "tag",
      "name": "plan_deep_research",
      "path": "./archive/fix/fix-correct-agent-md-references-tooling-research-planner.py",
      "language": "Python",
      "line": 9,
      "kind": "function",
      "docstring": "Generates a structured markdown template for a deep research plan.\n\nThis function reads the relevant protocol document (either local or external)\nto provide context and then generates a pre-formatted markdown plan. This\nplan provides a consistent workflow for conducting deep research.\n\nArgs:\n    topic: The research topic to be investigated.\n    repository: The repository context for the research ('local' or 'external').\n\nReturns:\n    A string containing the markdown-formatted research plan."
    },
    {
      "_type": "tag",
      "name": "plan_deep_research",
      "path": "./archive/main/main-tooling-research-planner.py",
      "language": "Python",
      "line": 9,
      "kind": "function",
      "docstring": "Generates a structured markdown template for a deep research plan.\n\nThis function reads the relevant protocol document (either local or external)\nto provide context and then generates a pre-formatted markdown plan. This\nplan provides a consistent workflow for conducting deep research.\n\nArgs:\n    topic: The research topic to be investigated.\n    repository: The repository context for the research ('local' or 'external').\n\nReturns:\n    A string containing the markdown-formatted research plan."
    },
    {
      "_type": "tag",
      "name": "main",
      "path": "./archive/main/main-tooling-protocol-validator.py",
      "language": "Python",
      "line": 5,
      "kind": "function",
      "docstring": "Validates the presence and correct naming of the AGENTS.md file in the root directory.\n\nThis script enforces the following rules:\n1. A single file named exactly `AGENTS.md` must exist in the repository root.\n2. If a file with a similar but incorrect name (case-insensitive) is found\n   (e.g., `Agent.md`), it's an error.\n3. If no file matching `AGENTS.md` (case-insensitively) is found, it's an error.\n4. If multiple files matching `AGENTS.md` (case-insensitively) are found,\n   it's an error.\n\nExits with status 0 on success, 1 on failure."
    },
    {
      "_type": "tag",
      "name": "plan_deep_research",
      "path": "./archive/agentic-research-experiments/agentic-research-experiments-tooling-research-planner.py",
      "language": "Python",
      "line": 9,
      "kind": "function",
      "docstring": "Generates a structured markdown template for a deep research plan.\n\nThis function reads the relevant protocol document (either local or external)\nto provide context and then generates a pre-formatted markdown plan. This\nplan provides a consistent workflow for conducting deep research.\n\nArgs:\n    topic: The research topic to be investigated.\n    repository: The repository context for the research ('local' or 'external').\n\nReturns:\n    A string containing the markdown-formatted research plan."
    },
    {
      "_type": "tag",
      "name": "build_protocol",
      "path": "./archive/feat/feat-protocol-build-system-tooling-build-protocol.py",
      "language": "Python",
      "line": 4,
      "kind": "function",
      "docstring": "Reads all markdown files from the specified source directory,\nconcatenates them in alphabetical order, and writes the\nresult to the specified output file."
    },
    {
      "_type": "tag",
      "name": "plan_deep_research",
      "path": "./archive/feat/feat-protocol-build-system-tooling-research-planner.py",
      "language": "Python",
      "line": 9,
      "kind": "function",
      "docstring": "Generates a structured markdown template for a deep research plan.\n\nThis function reads the relevant protocol document (either local or external)\nto provide context and then generates a pre-formatted markdown plan. This\nplan provides a consistent workflow for conducting deep research.\n\nArgs:\n    topic: The research topic to be investigated.\n    repository: The repository context for the research ('local' or 'external').\n\nReturns:\n    A string containing the markdown-formatted research plan."
    },
    {
      "_type": "tag",
      "name": "TestBuildProtocol",
      "path": "./archive/feat/feat-protocol-build-system-tests-test-build-protocol.py",
      "language": "Python",
      "line": 7,
      "kind": "class",
      "docstring": null
    },
    {
      "_type": "tag",
      "name": "setUp",
      "path": "./archive/feat/feat-protocol-build-system-tests-test-build-protocol.py",
      "language": "Python",
      "line": 9,
      "kind": "function",
      "docstring": "Set up a temporary test environment."
    },
    {
      "_type": "tag",
      "name": "tearDown",
      "path": "./archive/feat/feat-protocol-build-system-tests-test-build-protocol.py",
      "language": "Python",
      "line": 15,
      "kind": "function",
      "docstring": "Clean up the test environment."
    },
    {
      "_type": "tag",
      "name": "test_build_protocol_concatenates_in_order",
      "path": "./archive/feat/feat-protocol-build-system-tests-test-build-protocol.py",
      "language": "Python",
      "line": 22,
      "kind": "function",
      "docstring": "Tests that the script correctly concatenates sorted markdown files."
    },
    {
      "_type": "tag",
      "name": "test_no_markdown_files",
      "path": "./archive/feat/feat-protocol-build-system-tests-test-build-protocol.py",
      "language": "Python",
      "line": 42,
      "kind": "function",
      "docstring": "Tests that the script handles cases with no markdown files gracefully."
    }
  ]
}