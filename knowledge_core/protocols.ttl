@prefix proto: <https://factory.ai/ns/protocol/> .
@prefix schema: <https://schema.org/> .

<file:///app/protocols/compliance/agent-bootstrap-001> proto:associatedTool <file:///app/protocols/compliance/read_file> ;
    proto:hasRule <file:///app/protocols/compliance/bootstrap-load-agents-md> ;
    schema:description "A foundational protocol that dictates the agent's initial actions upon starting any task." .

<file:///app/protocols/compliance/dependency-management-001> proto:associatedTool <file:///app/protocols/compliance/run_in_bash_session> ;
    proto:hasRule <file:///app/protocols/compliance/dependency-install-on-start> ;
    schema:description "A protocol for ensuring a reliable execution environment through formal dependency management." .

<file:///app/protocols/compliance/experimental-prologue-001> proto:associatedTool <file:///app/protocols/compliance/create_file_with_block> ;
    proto:hasRule <file:///app/protocols/compliance/create-prologue-file> ;
    schema:description "An experimental protocol to test dynamic rule-following. It mandates a prologue action before file creation." .

<file:///app/protocols/core/agent-interaction-001> proto:associatedTool <file:///app/protocols/core/message_user>,
        <file:///app/protocols/core/set_plan> ;
    proto:hasRule <file:///app/protocols/core/communication-tool-access>,
        <file:///app/protocols/core/planning-tool-access> ;
    schema:description "A protocol governing the agent's core interaction and planning tools." .

<file:///app/protocols/core/agent-shell-001> proto:associatedTool <file:///app/protocols/core/tooling/agent_shell.py> ;
    proto:hasRule <file:///app/protocols/core/shell-is-primary-entry-point> ;
    schema:description "A protocol governing the use of the interactive agent shell as the primary entry point for all tasks." .

<file:///app/protocols/core/aura-execution-001> proto:associatedTool <file:///app/protocols/core/tooling/aura_executor.py> ;
    proto:hasRule <file:///app/protocols/core/execute-aura-script> ;
    schema:description "A protocol for executing Aura scripts, enabling a more expressive and powerful planning and automation language for the agent." .

<file:///app/protocols/core/capability-verification-001> proto:associatedTool <file:///app/protocols/core/tooling/capability_verifier.py> ;
    proto:hasRule <file:///app/protocols/core/verify-capability-acquisition> ;
    schema:description "A protocol for using the capability verifier tool to empirically test the agent's monotonic improvement." .

<file:///app/protocols/core/csdc-001> proto:associatedTool <file:///app/protocols/core/tooling/csdc_cli.py> ;
    proto:hasRule <file:///app/protocols/core/model-a-constraints>,
        <file:///app/protocols/core/model-b-constraints>,
        <file:///app/protocols/core/use-csdc-cli> ;
    schema:description "A protocol for the Context-Sensitive Development Cycle (CSDC), which introduces development models based on logical constraints." .

<file:///app/protocols/core/file-indexing-001> proto:associatedTool <file:///app/protocols/core/tooling/file_indexer.py> ;
    proto:hasRule <file:///app/protocols/core/update-index-before-submit> ;
    schema:description "A protocol for maintaining an up-to-date file index to accelerate tool performance." .

<file:///app/protocols/core/hdl-proving-001> proto:associatedTool <file:///app/protocols/core/tooling/hdl_prover.py> ;
    proto:hasRule <file:///app/protocols/core/prove-sequent> ;
    schema:description "A protocol for interacting with the Hypersequent-calculus-based logic engine, allowing the agent to perform formal logical proofs." .

<file:///app/protocols/core/plllu-execution-001> proto:associatedTool <file:///app/protocols/core/tooling/plllu_runner.py> ;
    proto:hasRule <file:///app/protocols/core/execute-plllu-script> ;
    schema:description "A protocol for executing pLLLU scripts, enabling a more expressive and powerful planning and automation language for the agent." .

<file:///app/protocols/core/speculative-execution-001> proto:associatedTool <file:///app/protocols/core/create_file_with_block>,
        <file:///app/protocols/core/request_user_input>,
        <file:///app/protocols/core/set_plan> ;
    proto:hasRule <file:///app/protocols/core/formal-proposal-required>,
        <file:///app/protocols/core/idle-state-trigger>,
        <file:///app/protocols/core/resource-constraints>,
        <file:///app/protocols/core/speculative-logging>,
        <file:///app/protocols/core/user-review-gate> ;
    schema:description "A protocol that governs the agent's ability to initiate and execute self-generated, creative, or exploratory tasks during idle periods." .

<file:///app/protocols/core/toolchain-review-on-schema-change-001> proto:associatedTool <file:///app/protocols/core/tooling/hierarchical_compiler.py>,
        <file:///app/protocols/core/tooling/protocol_auditor.py>,
        <file:///app/protocols/core/tooling/protocol_compiler.py> ;
    proto:hasRule <file:///app/protocols/core/toolchain-audit-on-schema-change> ;
    schema:description "A meta-protocol to ensure the agent's toolchain remains synchronized with the architecture of its governing protocols." .

<file:///app/protocols/core/unified-auditor-001> proto:associatedTool <file:///app/protocols/core/tooling/auditor.py> ;
    proto:hasRule <file:///app/protocols/core/run-all-audits> ;
    schema:description "A protocol for the unified repository auditing tool, which combines multiple health and compliance checks into a single interface." .

<file:///app/protocols/core/unified-doc-builder-001> proto:associatedTool <file:///app/protocols/core/tooling/doc_builder.py> ;
    proto:hasRule <file:///app/protocols/core/use-doc-builder-for-all-docs> ;
    schema:description "A protocol for the unified documentation builder, which generates various documentation artifacts from the repository's sources of truth." .

<file:///app/protocols/security/security-header> schema:description "Defines the identity and purpose of the Security Protocol document." .

<file:///app/protocols/security/security-vuln-reporting-001> proto:hasRule <file:///app/protocols/security/no-public-disclosure>,
        <file:///app/protocols/security/vuln-reporting-channel> ;
    schema:description "Defines the official policy and procedure for reporting security vulnerabilities." .

<file:///app/protocols/compliance/bootstrap-load-agents-md> proto:enforcement "This rule is enforced by the agent's core startup logic. The agent must verify the load of AGENTS.md before proceeding to the planning phase." ;
    schema:description "Upon initialization for any task, the agent's first and highest-priority action must be to locate, read, and parse the AGENTS.md file in the repository root. This ensures the agent is properly contextualized before any planning or execution begins." .

<file:///app/protocols/compliance/create-prologue-file> proto:enforcement "This is a procedural rule. The agent must verify the existence of 'prologue.txt' before using 'create_file_with_block' or similar tools for other files." ;
    schema:description "Before creating any new file as part of a task, the agent MUST first create a file named 'prologue.txt' with the content 'This is a prologue file.' This rule serves as a test of the agent's ability to adapt its behavior to new, dynamically loaded protocols." .

<file:///app/protocols/compliance/dependency-install-on-start> proto:enforcement "The agent's core startup logic should be designed to execute `pip install -r requirements.txt` as one of its initial actions." ;
    schema:description "Upon starting a task, after loading AGENTS.md, the agent MUST install all required Python packages listed in the `requirements.txt` file. This ensures the environment is correctly configured before any other tools are executed." .

<file:///app/protocols/core/communication-tool-access> proto:enforcement "The agent's core logic should be designed to use this tool for all user-facing communication." ;
    schema:description "The agent is authorized to use the `message_user` tool to communicate with the user, providing updates and asking for clarification. This is essential for a collaborative workflow." .

<file:///app/protocols/core/execute-aura-script> proto:enforcement "The tool is used by invoking it from the command line with the path to the Aura script as an argument." ;
    schema:description "The `aura_executor.py` tool should be used to execute .aura script files. This tool provides the bridge between the agent's master control loop and the Aura language interpreter." .

<file:///app/protocols/core/execute-plllu-script> proto:enforcement "The tool is used by invoking it from the command line with the path to the pLLLU script as an argument." ;
    schema:description "The `plllu_runner.py` tool should be used to execute .plllu script files. This tool provides the bridge between the agent's master control loop and the pLLLU language interpreter." .

<file:///app/protocols/core/formal-proposal-required> proto:enforcement "The initial plan for any speculative task must include a step to generate and save a proposal artifact." ;
    schema:description "A speculative task must begin with the creation of a formal proposal document, outlining the objective, rationale, and plan." .

<file:///app/protocols/core/idle-state-trigger> proto:enforcement "The agent's main control loop must verify an idle state before allowing the invocation of a speculative plan." ;
    schema:description "The agent may only initiate a speculative task when it has no active, user-assigned tasks." .

<file:///app/protocols/core/model-a-constraints> proto:enforcement "Enforced by the `fsm_model_a.json` FSM used by the `csdc_cli.py` tool." ;
    schema:description "Model A permits `define_set_of_names` but forbids `define_diagonalization_function`." .

<file:///app/protocols/core/model-b-constraints> proto:enforcement "Enforced by the `fsm_model_b.json` FSM used by the `csdc_cli.py` tool." ;
    schema:description "Model B permits `define_diagonalization_function` but forbids `define_set_of_names`." .

<file:///app/protocols/core/planning-tool-access> proto:enforcement "The agent's core logic should be designed to use this tool for all planning activities." ;
    schema:description "The agent is authorized to use the `set_plan` tool to create and update its execution plan. This is a foundational capability for task execution." .

<file:///app/protocols/core/prove-sequent> proto:enforcement "The tool is used by invoking it from the command line with the sequent to be proved as an argument." ;
    schema:description "The `hdl_prover.py` tool should be used to check the provability of a logical sequent. This tool acts as a wrapper for the underlying Lisp-based prover." .

<file:///app/protocols/core/resource-constraints> proto:enforcement "This is a system-level constraint that the agent orchestrator must enforce." ;
    schema:description "Speculative tasks must operate under defined resource limits." .

<file:///app/protocols/core/run-all-audits> proto:enforcement "The tool is invoked via the command line, typically through the `make audit` target." ;
    schema:description "The `auditor.py` script should be used to run comprehensive checks on the repository's health. It can be run with 'all' to check protocols, plans, and documentation completeness." .

<file:///app/protocols/core/shell-is-primary-entry-point> proto:enforcement "This is a procedural rule. The agent's operational framework should only expose the agent_shell.py as the means of starting a new task." ;
    schema:description "All agent tasks must be initiated through the `agent_shell.py` script. This script is the designated, API-driven entry point that ensures proper initialization of the MasterControlGraph FSM, centralized logging, and programmatic lifecycle management. Direct execution of other tools or scripts is forbidden for task initiation." .

<file:///app/protocols/core/speculative-logging> proto:enforcement "The agent's logging and file-creation tools should be context-aware and apply this tag when in a speculative mode." ;
    schema:description "All logs and artifacts generated during a speculative task must be tagged as 'speculative'." .

<file:///app/protocols/core/toolchain-audit-on-schema-change> proto:enforcement "This is a procedural rule for any agent developing the protocol system. Adherence can be partially checked by post-commit hooks or review processes that look for a tooling audit in any change that modifies the specified core files." ;
    schema:description "If a change is made to the core protocol schema (`protocol.schema.json`) or to the compilers that process it (`protocol_compiler.py`, `hierarchical_compiler.py`), a formal audit of the entire `tooling/` directory MUST be performed as a subsequent step. This audit should verify that all tools are compatible with the new protocol structure." .

<file:///app/protocols/core/update-index-before-submit> proto:enforcement "This is a procedural rule. The agent's pre-submission checklist should include a step to run 'python tooling/file_indexer.py build'." ;
    schema:description "Before submitting any changes that alter the file structure (create, delete, rename), the agent MUST rebuild the repository's file index. This ensures that tools relying on the index, such as the FDC validator, have an accurate view of the filesystem." .

<file:///app/protocols/core/use-csdc-cli> proto:enforcement "The tool is used by invoking it from the command line with the plan file, model, and complexity as arguments." ;
    schema:description "The `csdc_cli.py` tool must be used to validate plans under the CSDC. This tool enforces model-specific constraints (A or B) and complexity requirements (P or EXP)." .

<file:///app/protocols/core/use-doc-builder-for-all-docs> proto:enforcement "The tool is invoked via the command line, typically through the `make docs`, `make readme`, or `make pages` targets." ;
    schema:description "The `doc_builder.py` script is the single entry point for generating all user-facing documentation, including system-level docs, README files, and GitHub Pages. It should be called with the appropriate '--format' argument." .

<file:///app/protocols/core/user-review-gate> proto:enforcement "The agent is forbidden from using tools like 'submit' or 'merge' within a speculative context. It must use 'request_user_input' to present the results." ;
    schema:description "Final artifacts from a speculative task must be submitted for user review and cannot be merged directly." .

<file:///app/protocols/core/verify-capability-acquisition> proto:enforcement "The tool is used by invoking it from the command line with the path to the target test file." ;
    schema:description "The `capability_verifier.py` tool should be used to test the agent's ability to acquire a new capability defined by a failing test file. The tool orchestrates the failure, self-correction, and verification process." .

<file:///app/protocols/security/no-public-disclosure> proto:enforcement "Violation of this rule may result in being banned from the project community." ;
    schema:description "Vulnerabilities MUST NOT be disclosed publicly until a patch is available and has been distributed." .

<file:///app/protocols/security/vuln-reporting-channel> proto:enforcement "This is a procedural rule. The designated contact is specified in the project's main SECURITY.md file." ;
    schema:description "All suspected security vulnerabilities MUST be reported privately to the designated security contact." .
