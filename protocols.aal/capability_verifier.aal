---
protocol_id: capability-verifier-001
description: |
  A protocol for using the capability verifier tool to empirically test the agent's monotonic improvement.
rules:
  - rule_id: verify-capability-acquisition
    description: |
      The `capability_verifier.py` tool should be used to test the agent's ability to acquire a new capability defined by a failing test file. The tool orchestrates the failure, self-correction, and verification process.
    enforcement: |
      The tool is used by invoking it from the command line with the path to the target test file.
associated_tools:
  - tooling/capability_verifier.py
---
This protocol establishes the `capability_verifier.py` script as the official entry point for verifying that the agent has acquired a new capability.
---
create_file_with_block
protocols.aal/csdc_cli.aal
---
protocol_id: csdc-cli-001
description: |
  A protocol for the Context-Sensitive Development Cycle (CSDC) command-line interface.
rules:
  - rule_id: use-csdc-cli
    description: |
      The `csdc_cli.py` tool must be used to validate plans under the CSDC. This tool enforces model-specific constraints (A or B) and complexity requirements (P or EXP).
    enforcement: |
      The tool is used by invoking it from the command line with the plan file, model, and complexity as arguments.
associated_tools:
  - tooling/csdc_cli.py
---
This protocol establishes the `csdc_cli.py` script as the official entry point for validating plans against the Context-Sensitive Development Cycle.
---
create_file_with_block
protocols.aal/doc_builder.aal
---
protocol_id: doc-builder-001
description: |
  A protocol for the unified documentation builder.
rules:
  - rule_id: use-doc-builder-for-all-docs
    description: |
      The `doc_builder.py` script is the single entry point for generating all user-facing documentation, including system-level docs, README files, and GitHub Pages. It should be called with the appropriate '--format' argument.
    enforcement: |
      The tool is invoked via the command line, typically through the `make docs`, `make readme`, or `make pages` targets.
associated_tools:
  - tooling/doc_builder.py
---
This protocol establishes the `doc_builder.py` script as the official entry point for generating all documentation artifacts.
---
create_file_with_block
protocols.aal/file_indexer.aal
---
protocol_id: file-indexer-001
description: |
  A protocol for maintaining an up-to-date file index.
rules:
  - rule_id: update-index-before-submit
    description: |
      Before submitting any changes that alter the file structure (create, delete, rename), the agent MUST rebuild the repository's file index.
    enforcement: |
      This is a procedural rule. The agent's pre-submission checklist should include a step to run 'python tooling/file_indexer.py build'.
associated_tools:
  - tooling/file_indexer.py
---
This protocol establishes the `file_indexer.py` script as the official tool for managing the repository's file index.
---
create_file_with_block
protocols.aal/hdl_prover.aal
---
protocol_id: hdl-prover-001
description: |
  A protocol for interacting with the Hypersequent-calculus-based logic engine.
rules:
  - rule_id: prove-sequent
    description: |
      The `hdl_prover.py` tool should be used to check the provability of a logical sequent. This tool acts as a wrapper for the underlying Lisp-based prover.
    enforcement: |
      The tool is used by invoking it from the command line with the sequent to be proved as an argument.
associated_tools:
  - tooling/hdl_prover.py
---
This protocol establishes the `hdl_prover.py` script as the official tool for interacting with the Hypersequent-calculus-based logic engine.
---
create_file_with_block
protocols.aal/protocol_updater.aal
---
protocol_id: protocol-updater-001
description: |
  A protocol for programmatically updating protocol source files.
rules:
  - rule_id: use-protocol-updater
    description: |
      The `protocol_updater.py` tool should be used to programmatically modify protocol source files.
    enforcement: |
      The tool is used by invoking it from the command line with the appropriate arguments.
associated_tools:
  - tooling/protocol_updater.py
---
This protocol establishes the `protocol_updater.py` script as the official tool for programmatically updating protocol source files.
---
create_file_with_block
protocols.aal/refactor.aal
---
protocol_id: refactor-001
description: |
  A protocol for the refactoring tool.
rules:
  - rule_id: use-refactor-tool
    description: |
      The `refactor.py` tool should be used to perform automated refactoring of the codebase.
    enforcement: |
      The tool is used by invoking it from the command line with the appropriate arguments.
associated_tools:
  - tooling/refactor.py
---
This protocol establishes the `refactor.py` script as the official tool for performing automated refactoring.
---
create_file_with_block
protocols.aal/self_correction_orchestrator.aal
---
protocol_id: self-correction-orchestrator-001
description: |
  A protocol for the self-correction orchestrator.
rules:
  - rule_id: use-self-correction-orchestrator
    description: |
      The `self_correction_orchestrator.py` tool should be used to automatically apply lessons learned to the protocol source files.
    enforcement: |
      The tool is used by invoking it from the command line.
associated_tools:
  - tooling/self_correction_orchestrator.py
---
This protocol establishes the `self_correction_orchestrator.py` script as the official tool for driving the closed-loop self-correction cycle.
---
create_file_with_block
protocols.aal/self_improvement_cli.aal
---
protocol_id: self-improvement-cli-001
description: |
  A protocol for the self-improvement command-line interface.
rules:
  - rule_id: use-self-improvement-cli
    description: |
      The `self_improvement_cli.py` tool should be used to analyze the agent's performance and identify areas for improvement.
    enforcement: |
      The tool is used by invoking it from the command line with the appropriate arguments.
associated_tools:
  - tooling/self_improvement_cli.py
---
This protocol establishes the `self_improvement_cli.py` script as the official tool for analyzing the agent's performance.
---
create_file_with_block
protocols.aal/standard_agents_compiler.aal
---
protocol_id: standard-agents-compiler-001
description: |
  A protocol for the standard AGENTS.md compiler.
rules:
  - rule_id: use-standard-agents-compiler
    description: |
      The `standard_agents_compiler.py` tool should be used to generate the `AGENTS.standard.md` file.
    enforcement: |
      The tool is used by invoking it from the command line.
associated_tools:
  - tooling/standard_agents_compiler.py
---
This protocol establishes the `standard_agents_compiler.py` script as the official tool for generating the `AGENTS.standard.md` file.
---
create_file_with_block
protocols.aal/symbol_map_generator.aal
---
protocol_id: symbol-map-generator-001
description: |
  A protocol for the symbol map generator.
rules:
  - rule_id: use-symbol-map-generator
    description: |
      The `symbol_map_generator.py` tool should be used to generate a symbol map of the repository.
    enforcement: |
      The tool is used by invoking it from the command line.
associated_tools:
  - tooling/symbol_map_generator.py
---
This protocol establishes the `symbol_map_generator.py` script as the official tool for generating a symbol map of the repository.