Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> formula
Rule 1     formula -> literal
Rule 2     literal -> ID
Rule 3     literal -> ID BOT
Rule 4     formula -> formula TENSOR formula
Rule 5     formula -> formula PAR formula
Rule 6     formula -> formula PLUS formula
Rule 7     formula -> formula WITH formula
Rule 8     formula -> OFC formula
Rule 9     formula -> WHYNOT formula
Rule 10    formula -> SEC formula
Rule 11    formula -> NEG formula
Rule 12    formula -> CIRC formula
Rule 13    formula -> TILDE formula
Rule 14    formula -> ONE
Rule 15    formula -> BOT
Rule 16    formula -> ZERO
Rule 17    formula -> TOP
Rule 18    formula -> LPAREN formula RPAREN

Terminals, with rules where they appear

BOT                  : 3 15
CIRC                 : 12
ID                   : 2 3
LPAREN               : 18
NEG                  : 11
OFC                  : 8
ONE                  : 14
PAR                  : 5
PLUS                 : 6
RPAREN               : 18
SEC                  : 10
TENSOR               : 4
TILDE                : 13
TOP                  : 17
WHYNOT               : 9
WITH                 : 7
ZERO                 : 16
error                :

Nonterminals, with rules where they appear

formula              : 4 4 5 5 6 6 7 7 8 9 10 11 12 13 18 0
literal              : 1

Parsing method: LALR

state 0

    (0) S' -> . formula
    (1) formula -> . literal
    (4) formula -> . formula TENSOR formula
    (5) formula -> . formula PAR formula
    (6) formula -> . formula PLUS formula
    (7) formula -> . formula WITH formula
    (8) formula -> . OFC formula
    (9) formula -> . WHYNOT formula
    (10) formula -> . SEC formula
    (11) formula -> . NEG formula
    (12) formula -> . CIRC formula
    (13) formula -> . TILDE formula
    (14) formula -> . ONE
    (15) formula -> . BOT
    (16) formula -> . ZERO
    (17) formula -> . TOP
    (18) formula -> . LPAREN formula RPAREN
    (2) literal -> . ID
    (3) literal -> . ID BOT

    OFC             shift and go to state 3
    WHYNOT          shift and go to state 4
    SEC             shift and go to state 5
    NEG             shift and go to state 6
    CIRC            shift and go to state 7
    TILDE           shift and go to state 8
    ONE             shift and go to state 9
    BOT             shift and go to state 10
    ZERO            shift and go to state 11
    TOP             shift and go to state 12
    LPAREN          shift and go to state 13
    ID              shift and go to state 14

    formula                        shift and go to state 1
    literal                        shift and go to state 2

state 1

    (0) S' -> formula .
    (4) formula -> formula . TENSOR formula
    (5) formula -> formula . PAR formula
    (6) formula -> formula . PLUS formula
    (7) formula -> formula . WITH formula

    TENSOR          shift and go to state 15
    PAR             shift and go to state 16
    PLUS            shift and go to state 17
    WITH            shift and go to state 18


state 2

    (1) formula -> literal .

    TENSOR          reduce using rule 1 (formula -> literal .)
    PAR             reduce using rule 1 (formula -> literal .)
    PLUS            reduce using rule 1 (formula -> literal .)
    WITH            reduce using rule 1 (formula -> literal .)
    $end            reduce using rule 1 (formula -> literal .)
    RPAREN          reduce using rule 1 (formula -> literal .)


state 3

    (8) formula -> OFC . formula
    (1) formula -> . literal
    (4) formula -> . formula TENSOR formula
    (5) formula -> . formula PAR formula
    (6) formula -> . formula PLUS formula
    (7) formula -> . formula WITH formula
    (8) formula -> . OFC formula
    (9) formula -> . WHYNOT formula
    (10) formula -> . SEC formula
    (11) formula -> . NEG formula
    (12) formula -> . CIRC formula
    (13) formula -> . TILDE formula
    (14) formula -> . ONE
    (15) formula -> . BOT
    (16) formula -> . ZERO
    (17) formula -> . TOP
    (18) formula -> . LPAREN formula RPAREN
    (2) literal -> . ID
    (3) literal -> . ID BOT

    OFC             shift and go to state 3
    WHYNOT          shift and go to state 4
    SEC             shift and go to state 5
    NEG             shift and go to state 6
    CIRC            shift and go to state 7
    TILDE           shift and go to state 8
    ONE             shift and go to state 9
    BOT             shift and go to state 10
    ZERO            shift and go to state 11
    TOP             shift and go to state 12
    LPAREN          shift and go to state 13
    ID              shift and go to state 14

    formula                        shift and go to state 19
    literal                        shift and go to state 2

state 4

    (9) formula -> WHYNOT . formula
    (1) formula -> . literal
    (4) formula -> . formula TENSOR formula
    (5) formula -> . formula PAR formula
    (6) formula -> . formula PLUS formula
    (7) formula -> . formula WITH formula
    (8) formula -> . OFC formula
    (9) formula -> . WHYNOT formula
    (10) formula -> . SEC formula
    (11) formula -> . NEG formula
    (12) formula -> . CIRC formula
    (13) formula -> . TILDE formula
    (14) formula -> . ONE
    (15) formula -> . BOT
    (16) formula -> . ZERO
    (17) formula -> . TOP
    (18) formula -> . LPAREN formula RPAREN
    (2) literal -> . ID
    (3) literal -> . ID BOT

    OFC             shift and go to state 3
    WHYNOT          shift and go to state 4
    SEC             shift and go to state 5
    NEG             shift and go to state 6
    CIRC            shift and go to state 7
    TILDE           shift and go to state 8
    ONE             shift and go to state 9
    BOT             shift and go to state 10
    ZERO            shift and go to state 11
    TOP             shift and go to state 12
    LPAREN          shift and go to state 13
    ID              shift and go to state 14

    formula                        shift and go to state 20
    literal                        shift and go to state 2

state 5

    (10) formula -> SEC . formula
    (1) formula -> . literal
    (4) formula -> . formula TENSOR formula
    (5) formula -> . formula PAR formula
    (6) formula -> . formula PLUS formula
    (7) formula -> . formula WITH formula
    (8) formula -> . OFC formula
    (9) formula -> . WHYNOT formula
    (10) formula -> . SEC formula
    (11) formula -> . NEG formula
    (12) formula -> . CIRC formula
    (13) formula -> . TILDE formula
    (14) formula -> . ONE
    (15) formula -> . BOT
    (16) formula -> . ZERO
    (17) formula -> . TOP
    (18) formula -> . LPAREN formula RPAREN
    (2) literal -> . ID
    (3) literal -> . ID BOT

    OFC             shift and go to state 3
    WHYNOT          shift and go to state 4
    SEC             shift and go to state 5
    NEG             shift and go to state 6
    CIRC            shift and go to state 7
    TILDE           shift and go to state 8
    ONE             shift and go to state 9
    BOT             shift and go to state 10
    ZERO            shift and go to state 11
    TOP             shift and go to state 12
    LPAREN          shift and go to state 13
    ID              shift and go to state 14

    formula                        shift and go to state 21
    literal                        shift and go to state 2

state 6

    (11) formula -> NEG . formula
    (1) formula -> . literal
    (4) formula -> . formula TENSOR formula
    (5) formula -> . formula PAR formula
    (6) formula -> . formula PLUS formula
    (7) formula -> . formula WITH formula
    (8) formula -> . OFC formula
    (9) formula -> . WHYNOT formula
    (10) formula -> . SEC formula
    (11) formula -> . NEG formula
    (12) formula -> . CIRC formula
    (13) formula -> . TILDE formula
    (14) formula -> . ONE
    (15) formula -> . BOT
    (16) formula -> . ZERO
    (17) formula -> . TOP
    (18) formula -> . LPAREN formula RPAREN
    (2) literal -> . ID
    (3) literal -> . ID BOT

    OFC             shift and go to state 3
    WHYNOT          shift and go to state 4
    SEC             shift and go to state 5
    NEG             shift and go to state 6
    CIRC            shift and go to state 7
    TILDE           shift and go to state 8
    ONE             shift and go to state 9
    BOT             shift and go to state 10
    ZERO            shift and go to state 11
    TOP             shift and go to state 12
    LPAREN          shift and go to state 13
    ID              shift and go to state 14

    formula                        shift and go to state 22
    literal                        shift and go to state 2

state 7

    (12) formula -> CIRC . formula
    (1) formula -> . literal
    (4) formula -> . formula TENSOR formula
    (5) formula -> . formula PAR formula
    (6) formula -> . formula PLUS formula
    (7) formula -> . formula WITH formula
    (8) formula -> . OFC formula
    (9) formula -> . WHYNOT formula
    (10) formula -> . SEC formula
    (11) formula -> . NEG formula
    (12) formula -> . CIRC formula
    (13) formula -> . TILDE formula
    (14) formula -> . ONE
    (15) formula -> . BOT
    (16) formula -> . ZERO
    (17) formula -> . TOP
    (18) formula -> . LPAREN formula RPAREN
    (2) literal -> . ID
    (3) literal -> . ID BOT

    OFC             shift and go to state 3
    WHYNOT          shift and go to state 4
    SEC             shift and go to state 5
    NEG             shift and go to state 6
    CIRC            shift and go to state 7
    TILDE           shift and go to state 8
    ONE             shift and go to state 9
    BOT             shift and go to state 10
    ZERO            shift and go to state 11
    TOP             shift and go to state 12
    LPAREN          shift and go to state 13
    ID              shift and go to state 14

    formula                        shift and go to state 23
    literal                        shift and go to state 2

state 8

    (13) formula -> TILDE . formula
    (1) formula -> . literal
    (4) formula -> . formula TENSOR formula
    (5) formula -> . formula PAR formula
    (6) formula -> . formula PLUS formula
    (7) formula -> . formula WITH formula
    (8) formula -> . OFC formula
    (9) formula -> . WHYNOT formula
    (10) formula -> . SEC formula
    (11) formula -> . NEG formula
    (12) formula -> . CIRC formula
    (13) formula -> . TILDE formula
    (14) formula -> . ONE
    (15) formula -> . BOT
    (16) formula -> . ZERO
    (17) formula -> . TOP
    (18) formula -> . LPAREN formula RPAREN
    (2) literal -> . ID
    (3) literal -> . ID BOT

    OFC             shift and go to state 3
    WHYNOT          shift and go to state 4
    SEC             shift and go to state 5
    NEG             shift and go to state 6
    CIRC            shift and go to state 7
    TILDE           shift and go to state 8
    ONE             shift and go to state 9
    BOT             shift and go to state 10
    ZERO            shift and go to state 11
    TOP             shift and go to state 12
    LPAREN          shift and go to state 13
    ID              shift and go to state 14

    formula                        shift and go to state 24
    literal                        shift and go to state 2

state 9

    (14) formula -> ONE .

    TENSOR          reduce using rule 14 (formula -> ONE .)
    PAR             reduce using rule 14 (formula -> ONE .)
    PLUS            reduce using rule 14 (formula -> ONE .)
    WITH            reduce using rule 14 (formula -> ONE .)
    $end            reduce using rule 14 (formula -> ONE .)
    RPAREN          reduce using rule 14 (formula -> ONE .)


state 10

    (15) formula -> BOT .

    TENSOR          reduce using rule 15 (formula -> BOT .)
    PAR             reduce using rule 15 (formula -> BOT .)
    PLUS            reduce using rule 15 (formula -> BOT .)
    WITH            reduce using rule 15 (formula -> BOT .)
    $end            reduce using rule 15 (formula -> BOT .)
    RPAREN          reduce using rule 15 (formula -> BOT .)


state 11

    (16) formula -> ZERO .

    TENSOR          reduce using rule 16 (formula -> ZERO .)
    PAR             reduce using rule 16 (formula -> ZERO .)
    PLUS            reduce using rule 16 (formula -> ZERO .)
    WITH            reduce using rule 16 (formula -> ZERO .)
    $end            reduce using rule 16 (formula -> ZERO .)
    RPAREN          reduce using rule 16 (formula -> ZERO .)


state 12

    (17) formula -> TOP .

    TENSOR          reduce using rule 17 (formula -> TOP .)
    PAR             reduce using rule 17 (formula -> TOP .)
    PLUS            reduce using rule 17 (formula -> TOP .)
    WITH            reduce using rule 17 (formula -> TOP .)
    $end            reduce using rule 17 (formula -> TOP .)
    RPAREN          reduce using rule 17 (formula -> TOP .)


state 13

    (18) formula -> LPAREN . formula RPAREN
    (1) formula -> . literal
    (4) formula -> . formula TENSOR formula
    (5) formula -> . formula PAR formula
    (6) formula -> . formula PLUS formula
    (7) formula -> . formula WITH formula
    (8) formula -> . OFC formula
    (9) formula -> . WHYNOT formula
    (10) formula -> . SEC formula
    (11) formula -> . NEG formula
    (12) formula -> . CIRC formula
    (13) formula -> . TILDE formula
    (14) formula -> . ONE
    (15) formula -> . BOT
    (16) formula -> . ZERO
    (17) formula -> . TOP
    (18) formula -> . LPAREN formula RPAREN
    (2) literal -> . ID
    (3) literal -> . ID BOT

    OFC             shift and go to state 3
    WHYNOT          shift and go to state 4
    SEC             shift and go to state 5
    NEG             shift and go to state 6
    CIRC            shift and go to state 7
    TILDE           shift and go to state 8
    ONE             shift and go to state 9
    BOT             shift and go to state 10
    ZERO            shift and go to state 11
    TOP             shift and go to state 12
    LPAREN          shift and go to state 13
    ID              shift and go to state 14

    formula                        shift and go to state 25
    literal                        shift and go to state 2

state 14

    (2) literal -> ID .
    (3) literal -> ID . BOT

    TENSOR          reduce using rule 2 (literal -> ID .)
    PAR             reduce using rule 2 (literal -> ID .)
    PLUS            reduce using rule 2 (literal -> ID .)
    WITH            reduce using rule 2 (literal -> ID .)
    $end            reduce using rule 2 (literal -> ID .)
    RPAREN          reduce using rule 2 (literal -> ID .)
    BOT             shift and go to state 26


state 15

    (4) formula -> formula TENSOR . formula
    (1) formula -> . literal
    (4) formula -> . formula TENSOR formula
    (5) formula -> . formula PAR formula
    (6) formula -> . formula PLUS formula
    (7) formula -> . formula WITH formula
    (8) formula -> . OFC formula
    (9) formula -> . WHYNOT formula
    (10) formula -> . SEC formula
    (11) formula -> . NEG formula
    (12) formula -> . CIRC formula
    (13) formula -> . TILDE formula
    (14) formula -> . ONE
    (15) formula -> . BOT
    (16) formula -> . ZERO
    (17) formula -> . TOP
    (18) formula -> . LPAREN formula RPAREN
    (2) literal -> . ID
    (3) literal -> . ID BOT

    OFC             shift and go to state 3
    WHYNOT          shift and go to state 4
    SEC             shift and go to state 5
    NEG             shift and go to state 6
    CIRC            shift and go to state 7
    TILDE           shift and go to state 8
    ONE             shift and go to state 9
    BOT             shift and go to state 10
    ZERO            shift and go to state 11
    TOP             shift and go to state 12
    LPAREN          shift and go to state 13
    ID              shift and go to state 14

    formula                        shift and go to state 27
    literal                        shift and go to state 2

state 16

    (5) formula -> formula PAR . formula
    (1) formula -> . literal
    (4) formula -> . formula TENSOR formula
    (5) formula -> . formula PAR formula
    (6) formula -> . formula PLUS formula
    (7) formula -> . formula WITH formula
    (8) formula -> . OFC formula
    (9) formula -> . WHYNOT formula
    (10) formula -> . SEC formula
    (11) formula -> . NEG formula
    (12) formula -> . CIRC formula
    (13) formula -> . TILDE formula
    (14) formula -> . ONE
    (15) formula -> . BOT
    (16) formula -> . ZERO
    (17) formula -> . TOP
    (18) formula -> . LPAREN formula RPAREN
    (2) literal -> . ID
    (3) literal -> . ID BOT

    OFC             shift and go to state 3
    WHYNOT          shift and go to state 4
    SEC             shift and go to state 5
    NEG             shift and go to state 6
    CIRC            shift and go to state 7
    TILDE           shift and go to state 8
    ONE             shift and go to state 9
    BOT             shift and go to state 10
    ZERO            shift and go to state 11
    TOP             shift and go to state 12
    LPAREN          shift and go to state 13
    ID              shift and go to state 14

    formula                        shift and go to state 28
    literal                        shift and go to state 2

state 17

    (6) formula -> formula PLUS . formula
    (1) formula -> . literal
    (4) formula -> . formula TENSOR formula
    (5) formula -> . formula PAR formula
    (6) formula -> . formula PLUS formula
    (7) formula -> . formula WITH formula
    (8) formula -> . OFC formula
    (9) formula -> . WHYNOT formula
    (10) formula -> . SEC formula
    (11) formula -> . NEG formula
    (12) formula -> . CIRC formula
    (13) formula -> . TILDE formula
    (14) formula -> . ONE
    (15) formula -> . BOT
    (16) formula -> . ZERO
    (17) formula -> . TOP
    (18) formula -> . LPAREN formula RPAREN
    (2) literal -> . ID
    (3) literal -> . ID BOT

    OFC             shift and go to state 3
    WHYNOT          shift and go to state 4
    SEC             shift and go to state 5
    NEG             shift and go to state 6
    CIRC            shift and go to state 7
    TILDE           shift and go to state 8
    ONE             shift and go to state 9
    BOT             shift and go to state 10
    ZERO            shift and go to state 11
    TOP             shift and go to state 12
    LPAREN          shift and go to state 13
    ID              shift and go to state 14

    formula                        shift and go to state 29
    literal                        shift and go to state 2

state 18

    (7) formula -> formula WITH . formula
    (1) formula -> . literal
    (4) formula -> . formula TENSOR formula
    (5) formula -> . formula PAR formula
    (6) formula -> . formula PLUS formula
    (7) formula -> . formula WITH formula
    (8) formula -> . OFC formula
    (9) formula -> . WHYNOT formula
    (10) formula -> . SEC formula
    (11) formula -> . NEG formula
    (12) formula -> . CIRC formula
    (13) formula -> . TILDE formula
    (14) formula -> . ONE
    (15) formula -> . BOT
    (16) formula -> . ZERO
    (17) formula -> . TOP
    (18) formula -> . LPAREN formula RPAREN
    (2) literal -> . ID
    (3) literal -> . ID BOT

    OFC             shift and go to state 3
    WHYNOT          shift and go to state 4
    SEC             shift and go to state 5
    NEG             shift and go to state 6
    CIRC            shift and go to state 7
    TILDE           shift and go to state 8
    ONE             shift and go to state 9
    BOT             shift and go to state 10
    ZERO            shift and go to state 11
    TOP             shift and go to state 12
    LPAREN          shift and go to state 13
    ID              shift and go to state 14

    formula                        shift and go to state 30
    literal                        shift and go to state 2

state 19

    (8) formula -> OFC formula .
    (4) formula -> formula . TENSOR formula
    (5) formula -> formula . PAR formula
    (6) formula -> formula . PLUS formula
    (7) formula -> formula . WITH formula

    $end            reduce using rule 8 (formula -> OFC formula .)
    RPAREN          reduce using rule 8 (formula -> OFC formula .)
    TENSOR          shift and go to state 15
    PAR             shift and go to state 16
    PLUS            shift and go to state 17
    WITH            shift and go to state 18

  ! TENSOR          [ reduce using rule 8 (formula -> OFC formula .) ]
  ! PAR             [ reduce using rule 8 (formula -> OFC formula .) ]
  ! PLUS            [ reduce using rule 8 (formula -> OFC formula .) ]
  ! WITH            [ reduce using rule 8 (formula -> OFC formula .) ]


state 20

    (9) formula -> WHYNOT formula .
    (4) formula -> formula . TENSOR formula
    (5) formula -> formula . PAR formula
    (6) formula -> formula . PLUS formula
    (7) formula -> formula . WITH formula

    $end            reduce using rule 9 (formula -> WHYNOT formula .)
    RPAREN          reduce using rule 9 (formula -> WHYNOT formula .)
    TENSOR          shift and go to state 15
    PAR             shift and go to state 16
    PLUS            shift and go to state 17
    WITH            shift and go to state 18

  ! TENSOR          [ reduce using rule 9 (formula -> WHYNOT formula .) ]
  ! PAR             [ reduce using rule 9 (formula -> WHYNOT formula .) ]
  ! PLUS            [ reduce using rule 9 (formula -> WHYNOT formula .) ]
  ! WITH            [ reduce using rule 9 (formula -> WHYNOT formula .) ]


state 21

    (10) formula -> SEC formula .
    (4) formula -> formula . TENSOR formula
    (5) formula -> formula . PAR formula
    (6) formula -> formula . PLUS formula
    (7) formula -> formula . WITH formula

    $end            reduce using rule 10 (formula -> SEC formula .)
    RPAREN          reduce using rule 10 (formula -> SEC formula .)
    TENSOR          shift and go to state 15
    PAR             shift and go to state 16
    PLUS            shift and go to state 17
    WITH            shift and go to state 18

  ! TENSOR          [ reduce using rule 10 (formula -> SEC formula .) ]
  ! PAR             [ reduce using rule 10 (formula -> SEC formula .) ]
  ! PLUS            [ reduce using rule 10 (formula -> SEC formula .) ]
  ! WITH            [ reduce using rule 10 (formula -> SEC formula .) ]


state 22

    (11) formula -> NEG formula .
    (4) formula -> formula . TENSOR formula
    (5) formula -> formula . PAR formula
    (6) formula -> formula . PLUS formula
    (7) formula -> formula . WITH formula

    $end            reduce using rule 11 (formula -> NEG formula .)
    RPAREN          reduce using rule 11 (formula -> NEG formula .)
    TENSOR          shift and go to state 15
    PAR             shift and go to state 16
    PLUS            shift and go to state 17
    WITH            shift and go to state 18

  ! TENSOR          [ reduce using rule 11 (formula -> NEG formula .) ]
  ! PAR             [ reduce using rule 11 (formula -> NEG formula .) ]
  ! PLUS            [ reduce using rule 11 (formula -> NEG formula .) ]
  ! WITH            [ reduce using rule 11 (formula -> NEG formula .) ]


state 23

    (12) formula -> CIRC formula .
    (4) formula -> formula . TENSOR formula
    (5) formula -> formula . PAR formula
    (6) formula -> formula . PLUS formula
    (7) formula -> formula . WITH formula

    $end            reduce using rule 12 (formula -> CIRC formula .)
    RPAREN          reduce using rule 12 (formula -> CIRC formula .)
    TENSOR          shift and go to state 15
    PAR             shift and go to state 16
    PLUS            shift and go to state 17
    WITH            shift and go to state 18

  ! TENSOR          [ reduce using rule 12 (formula -> CIRC formula .) ]
  ! PAR             [ reduce using rule 12 (formula -> CIRC formula .) ]
  ! PLUS            [ reduce using rule 12 (formula -> CIRC formula .) ]
  ! WITH            [ reduce using rule 12 (formula -> CIRC formula .) ]


state 24

    (13) formula -> TILDE formula .
    (4) formula -> formula . TENSOR formula
    (5) formula -> formula . PAR formula
    (6) formula -> formula . PLUS formula
    (7) formula -> formula . WITH formula

    $end            reduce using rule 13 (formula -> TILDE formula .)
    RPAREN          reduce using rule 13 (formula -> TILDE formula .)
    TENSOR          shift and go to state 15
    PAR             shift and go to state 16
    PLUS            shift and go to state 17
    WITH            shift and go to state 18

  ! TENSOR          [ reduce using rule 13 (formula -> TILDE formula .) ]
  ! PAR             [ reduce using rule 13 (formula -> TILDE formula .) ]
  ! PLUS            [ reduce using rule 13 (formula -> TILDE formula .) ]
  ! WITH            [ reduce using rule 13 (formula -> TILDE formula .) ]


state 25

    (18) formula -> LPAREN formula . RPAREN
    (4) formula -> formula . TENSOR formula
    (5) formula -> formula . PAR formula
    (6) formula -> formula . PLUS formula
    (7) formula -> formula . WITH formula

    RPAREN          shift and go to state 31
    TENSOR          shift and go to state 15
    PAR             shift and go to state 16
    PLUS            shift and go to state 17
    WITH            shift and go to state 18


state 26

    (3) literal -> ID BOT .

    TENSOR          reduce using rule 3 (literal -> ID BOT .)
    PAR             reduce using rule 3 (literal -> ID BOT .)
    PLUS            reduce using rule 3 (literal -> ID BOT .)
    WITH            reduce using rule 3 (literal -> ID BOT .)
    $end            reduce using rule 3 (literal -> ID BOT .)
    RPAREN          reduce using rule 3 (literal -> ID BOT .)


state 27

    (4) formula -> formula TENSOR formula .
    (4) formula -> formula . TENSOR formula
    (5) formula -> formula . PAR formula
    (6) formula -> formula . PLUS formula
    (7) formula -> formula . WITH formula

    TENSOR          reduce using rule 4 (formula -> formula TENSOR formula .)
    PAR             reduce using rule 4 (formula -> formula TENSOR formula .)
    PLUS            reduce using rule 4 (formula -> formula TENSOR formula .)
    WITH            reduce using rule 4 (formula -> formula TENSOR formula .)
    $end            reduce using rule 4 (formula -> formula TENSOR formula .)
    RPAREN          reduce using rule 4 (formula -> formula TENSOR formula .)

  ! TENSOR          [ shift and go to state 15 ]
  ! PAR             [ shift and go to state 16 ]
  ! PLUS            [ shift and go to state 17 ]
  ! WITH            [ shift and go to state 18 ]


state 28

    (5) formula -> formula PAR formula .
    (4) formula -> formula . TENSOR formula
    (5) formula -> formula . PAR formula
    (6) formula -> formula . PLUS formula
    (7) formula -> formula . WITH formula

    TENSOR          reduce using rule 5 (formula -> formula PAR formula .)
    PAR             reduce using rule 5 (formula -> formula PAR formula .)
    PLUS            reduce using rule 5 (formula -> formula PAR formula .)
    WITH            reduce using rule 5 (formula -> formula PAR formula .)
    $end            reduce using rule 5 (formula -> formula PAR formula .)
    RPAREN          reduce using rule 5 (formula -> formula PAR formula .)

  ! TENSOR          [ shift and go to state 15 ]
  ! PAR             [ shift and go to state 16 ]
  ! PLUS            [ shift and go to state 17 ]
  ! WITH            [ shift and go to state 18 ]


state 29

    (6) formula -> formula PLUS formula .
    (4) formula -> formula . TENSOR formula
    (5) formula -> formula . PAR formula
    (6) formula -> formula . PLUS formula
    (7) formula -> formula . WITH formula

    TENSOR          reduce using rule 6 (formula -> formula PLUS formula .)
    PAR             reduce using rule 6 (formula -> formula PLUS formula .)
    PLUS            reduce using rule 6 (formula -> formula PLUS formula .)
    WITH            reduce using rule 6 (formula -> formula PLUS formula .)
    $end            reduce using rule 6 (formula -> formula PLUS formula .)
    RPAREN          reduce using rule 6 (formula -> formula PLUS formula .)

  ! TENSOR          [ shift and go to state 15 ]
  ! PAR             [ shift and go to state 16 ]
  ! PLUS            [ shift and go to state 17 ]
  ! WITH            [ shift and go to state 18 ]


state 30

    (7) formula -> formula WITH formula .
    (4) formula -> formula . TENSOR formula
    (5) formula -> formula . PAR formula
    (6) formula -> formula . PLUS formula
    (7) formula -> formula . WITH formula

    TENSOR          reduce using rule 7 (formula -> formula WITH formula .)
    PAR             reduce using rule 7 (formula -> formula WITH formula .)
    PLUS            reduce using rule 7 (formula -> formula WITH formula .)
    WITH            reduce using rule 7 (formula -> formula WITH formula .)
    $end            reduce using rule 7 (formula -> formula WITH formula .)
    RPAREN          reduce using rule 7 (formula -> formula WITH formula .)

  ! TENSOR          [ shift and go to state 15 ]
  ! PAR             [ shift and go to state 16 ]
  ! PLUS            [ shift and go to state 17 ]
  ! WITH            [ shift and go to state 18 ]


state 31

    (18) formula -> LPAREN formula RPAREN .

    TENSOR          reduce using rule 18 (formula -> LPAREN formula RPAREN .)
    PAR             reduce using rule 18 (formula -> LPAREN formula RPAREN .)
    PLUS            reduce using rule 18 (formula -> LPAREN formula RPAREN .)
    WITH            reduce using rule 18 (formula -> LPAREN formula RPAREN .)
    $end            reduce using rule 18 (formula -> LPAREN formula RPAREN .)
    RPAREN          reduce using rule 18 (formula -> LPAREN formula RPAREN .)

